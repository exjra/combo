
stmcube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009974  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b14  08009b14  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08009b14  08009b14  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b14  08009b14  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08009b1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000adc  20000164  08009c80  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08009c80  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184ce  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035be  00000000  00000000  0003865a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  0003bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014215  00000000  00000000  0003e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a3d7  00000000  00000000  000525c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ead3  00000000  00000000  0006c99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db46f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049cc  00000000  00000000  000db4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000164 	.word	0x20000164
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009a1c 	.word	0x08009a1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000168 	.word	0x20000168
 8000104:	08009a1c 	.word	0x08009a1c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd98 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f814 	bl	8000254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa40 	bl	80006b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f87e 	bl	8000330 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f97c 	bl	8000530 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000238:	f000 f9aa 	bl	8000590 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800023c:	f000 f9d8 	bl	80005f0 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000240:	f000 fa06 	bl	8000650 <MX_USART4_UART_Init>
  MX_USB_DEVICE_Init();
 8000244:	f008 ff34 	bl	80090b0 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000248:	f000 f8b2 	bl	80003b0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800024c:	f000 f94e 	bl	80004ec <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x30>
	...

08000254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000254:	b590      	push	{r4, r7, lr}
 8000256:	b097      	sub	sp, #92	; 0x5c
 8000258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025a:	2428      	movs	r4, #40	; 0x28
 800025c:	193b      	adds	r3, r7, r4
 800025e:	0018      	movs	r0, r3
 8000260:	2330      	movs	r3, #48	; 0x30
 8000262:	001a      	movs	r2, r3
 8000264:	2100      	movs	r1, #0
 8000266:	f009 fbd1 	bl	8009a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026a:	2318      	movs	r3, #24
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	0018      	movs	r0, r3
 8000270:	2310      	movs	r3, #16
 8000272:	001a      	movs	r2, r3
 8000274:	2100      	movs	r1, #0
 8000276:	f009 fbc9 	bl	8009a0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	0018      	movs	r0, r3
 800027e:	2314      	movs	r3, #20
 8000280:	001a      	movs	r2, r3
 8000282:	2100      	movs	r1, #0
 8000284:	f009 fbc2 	bl	8009a0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000288:	0021      	movs	r1, r4
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2203      	movs	r2, #3
 800028e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2201      	movs	r2, #1
 8000294:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2201      	movs	r2, #1
 800029a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2210      	movs	r2, #16
 80002a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2280      	movs	r2, #128	; 0x80
 80002ac:	0252      	lsls	r2, r2, #9
 80002ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	0352      	lsls	r2, r2, #13
 80002b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2200      	movs	r2, #0
 80002bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	0018      	movs	r0, r3
 80002c2:	f003 f81f 	bl	8003304 <HAL_RCC_OscConfig>
 80002c6:	1e03      	subs	r3, r0, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ca:	f000 fa85 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ce:	2118      	movs	r1, #24
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	2207      	movs	r2, #7
 80002d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2202      	movs	r2, #2
 80002da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	0018      	movs	r0, r3
 80002ee:	f003 fb27 	bl	8003940 <HAL_RCC_ClockConfig>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002f6:	f000 fa6f 	bl	80007d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SystemClock_Config+0xd8>)
 80002fe:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	611a      	str	r2, [r3, #16]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	f003 fc67 	bl	8003be8 <HAL_RCCEx_PeriphCLKConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800031e:	f000 fa5b 	bl	80007d8 <Error_Handler>
  }
}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	46bd      	mov	sp, r7
 8000326:	b017      	add	sp, #92	; 0x5c
 8000328:	bd90      	pop	{r4, r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	00020021 	.word	0x00020021

08000330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000336:	4a1c      	ldr	r2, [pc, #112]	; (80003a8 <MX_I2C1_Init+0x78>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_I2C1_Init+0x74>)
 800033c:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <MX_I2C1_Init+0x7c>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800034c:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_I2C1_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_I2C1_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000360:	2200      	movs	r2, #0
 8000362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_I2C1_Init+0x74>)
 8000366:	2200      	movs	r2, #0
 8000368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_I2C1_Init+0x74>)
 800036c:	0018      	movs	r0, r3
 800036e:	f001 f841 	bl	80013f4 <HAL_I2C_Init>
 8000372:	1e03      	subs	r3, r0, #0
 8000374:	d001      	beq.n	800037a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000376:	f000 fa2f 	bl	80007d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037a:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_I2C1_Init+0x74>)
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f001 f8ce 	bl	8001520 <HAL_I2CEx_ConfigAnalogFilter>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000388:	f000 fa26 	bl	80007d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_I2C1_Init+0x74>)
 800038e:	2100      	movs	r1, #0
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f911 	bl	80015b8 <HAL_I2CEx_ConfigDigitalFilter>
 8000396:	1e03      	subs	r3, r0, #0
 8000398:	d001      	beq.n	800039e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039a:	f000 fa1d 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800039e:	46c0      	nop			; (mov r8, r8)
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000180 	.word	0x20000180
 80003a8:	40005400 	.word	0x40005400
 80003ac:	2000090e 	.word	0x2000090e

080003b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08e      	sub	sp, #56	; 0x38
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003b6:	2328      	movs	r3, #40	; 0x28
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	0018      	movs	r0, r3
 80003bc:	2310      	movs	r3, #16
 80003be:	001a      	movs	r2, r3
 80003c0:	2100      	movs	r1, #0
 80003c2:	f009 fb23 	bl	8009a0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c6:	2320      	movs	r3, #32
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	0018      	movs	r0, r3
 80003cc:	2308      	movs	r3, #8
 80003ce:	001a      	movs	r2, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	f009 fb1b 	bl	8009a0c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	231c      	movs	r3, #28
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f009 fb14 	bl	8009a0c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003e4:	4b3e      	ldr	r3, [pc, #248]	; (80004e0 <MX_TIM3_Init+0x130>)
 80003e6:	4a3f      	ldr	r2, [pc, #252]	; (80004e4 <MX_TIM3_Init+0x134>)
 80003e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80003ea:	4b3d      	ldr	r3, [pc, #244]	; (80004e0 <MX_TIM3_Init+0x130>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f0:	4b3b      	ldr	r3, [pc, #236]	; (80004e0 <MX_TIM3_Init+0x130>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003f6:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <MX_TIM3_Init+0x130>)
 80003f8:	4a3b      	ldr	r2, [pc, #236]	; (80004e8 <MX_TIM3_Init+0x138>)
 80003fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fc:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <MX_TIM3_Init+0x130>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000402:	4b37      	ldr	r3, [pc, #220]	; (80004e0 <MX_TIM3_Init+0x130>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000408:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <MX_TIM3_Init+0x130>)
 800040a:	0018      	movs	r0, r3
 800040c:	f003 fcca 	bl	8003da4 <HAL_TIM_Base_Init>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000414:	f000 f9e0 	bl	80007d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000418:	2128      	movs	r1, #40	; 0x28
 800041a:	187b      	adds	r3, r7, r1
 800041c:	2280      	movs	r2, #128	; 0x80
 800041e:	0152      	lsls	r2, r2, #5
 8000420:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000422:	187a      	adds	r2, r7, r1
 8000424:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MX_TIM3_Init+0x130>)
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f003 ff3f 	bl	80042ac <HAL_TIM_ConfigClockSource>
 800042e:	1e03      	subs	r3, r0, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000432:	f000 f9d1 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000436:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_TIM3_Init+0x130>)
 8000438:	0018      	movs	r0, r3
 800043a:	f003 fd03 	bl	8003e44 <HAL_TIM_PWM_Init>
 800043e:	1e03      	subs	r3, r0, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000442:	f000 f9c9 	bl	80007d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000446:	2120      	movs	r1, #32
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000454:	187a      	adds	r2, r7, r1
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_TIM3_Init+0x130>)
 8000458:	0011      	movs	r1, r2
 800045a:	0018      	movs	r0, r3
 800045c:	f004 fb2e 	bl	8004abc <HAL_TIMEx_MasterConfigSynchronization>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000464:	f000 f9b8 	bl	80007d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2260      	movs	r2, #96	; 0x60
 800046c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800047a:	1d3b      	adds	r3, r7, #4
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000480:	1d39      	adds	r1, r7, #4
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <MX_TIM3_Init+0x130>)
 8000484:	2200      	movs	r2, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fe4a 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 800048c:	1e03      	subs	r3, r0, #0
 800048e:	d001      	beq.n	8000494 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000490:	f000 f9a2 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000494:	1d39      	adds	r1, r7, #4
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <MX_TIM3_Init+0x130>)
 8000498:	2204      	movs	r2, #4
 800049a:	0018      	movs	r0, r3
 800049c:	f003 fe40 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 80004a4:	f000 f998 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004a8:	1d39      	adds	r1, r7, #4
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <MX_TIM3_Init+0x130>)
 80004ac:	2208      	movs	r2, #8
 80004ae:	0018      	movs	r0, r3
 80004b0:	f003 fe36 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 80004b4:	1e03      	subs	r3, r0, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 80004b8:	f000 f98e 	bl	80007d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80004bc:	1d39      	adds	r1, r7, #4
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <MX_TIM3_Init+0x130>)
 80004c0:	220c      	movs	r2, #12
 80004c2:	0018      	movs	r0, r3
 80004c4:	f003 fe2c 	bl	8004120 <HAL_TIM_PWM_ConfigChannel>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 80004cc:	f000 f984 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80004d0:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <MX_TIM3_Init+0x130>)
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fa32 	bl	800093c <HAL_TIM_MspPostInit>

}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b00e      	add	sp, #56	; 0x38
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	200001cc 	.word	0x200001cc
 80004e4:	40000400 	.word	0x40000400
 80004e8:	0000ffff 	.word	0x0000ffff

080004ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MX_TIM6_Init+0x38>)
 80004f2:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <MX_TIM6_Init+0x3c>)
 80004f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <MX_TIM6_Init+0x38>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MX_TIM6_Init+0x38>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <MX_TIM6_Init+0x38>)
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <MX_TIM6_Init+0x40>)
 8000506:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MX_TIM6_Init+0x38>)
 800050a:	2280      	movs	r2, #128	; 0x80
 800050c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <MX_TIM6_Init+0x38>)
 8000510:	0018      	movs	r0, r3
 8000512:	f003 fc47 	bl	8003da4 <HAL_TIM_Base_Init>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 800051a:	f000 f95d 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000214 	.word	0x20000214
 8000528:	40001000 	.word	0x40001000
 800052c:	0000ffff 	.word	0x0000ffff

08000530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000536:	4a15      	ldr	r2, [pc, #84]	; (800058c <MX_USART1_UART_Init+0x5c>)
 8000538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_USART1_UART_Init+0x58>)
 800053c:	2296      	movs	r2, #150	; 0x96
 800053e:	0212      	lsls	r2, r2, #8
 8000540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_USART1_UART_Init+0x58>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_USART1_UART_Init+0x58>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_USART1_UART_Init+0x58>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MX_USART1_UART_Init+0x58>)
 8000574:	0018      	movs	r0, r3
 8000576:	f004 fb09 	bl	8004b8c <HAL_UART_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800057e:	f000 f92b 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	2000025c 	.word	0x2000025c
 800058c:	40013800 	.word	0x40013800

08000590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <MX_USART2_UART_Init+0x5c>)
 8000598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 800059c:	2296      	movs	r2, #150	; 0x96
 800059e:	0212      	lsls	r2, r2, #8
 80005a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005b6:	220c      	movs	r2, #12
 80005b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005bc:	2200      	movs	r2, #0
 80005be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <MX_USART2_UART_Init+0x58>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f004 fad9 	bl	8004b8c <HAL_UART_Init>
 80005da:	1e03      	subs	r3, r0, #0
 80005dc:	d001      	beq.n	80005e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005de:	f000 f8fb 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002e0 	.word	0x200002e0
 80005ec:	40004400 	.word	0x40004400

080005f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART3_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_USART3_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART3_UART_Init+0x58>)
 80005fc:	2296      	movs	r2, #150	; 0x96
 80005fe:	0212      	lsls	r2, r2, #8
 8000600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART3_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_USART3_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART3_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART3_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART3_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART3_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART3_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART3_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MX_USART3_UART_Init+0x58>)
 8000634:	0018      	movs	r0, r3
 8000636:	f004 faa9 	bl	8004b8c <HAL_UART_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f8cb 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000364 	.word	0x20000364
 800064c:	40004800 	.word	0x40004800

08000650 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000656:	4a15      	ldr	r2, [pc, #84]	; (80006ac <MX_USART4_UART_Init+0x5c>)
 8000658:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 800065a:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 800065c:	2296      	movs	r2, #150	; 0x96
 800065e:	0212      	lsls	r2, r2, #8
 8000660:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_USART4_UART_Init+0x58>)
 8000694:	0018      	movs	r0, r3
 8000696:	f004 fa79 	bl	8004b8c <HAL_UART_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 f89b 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	200003e8 	.word	0x200003e8
 80006ac:	40004c00 	.word	0x40004c00

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	240c      	movs	r4, #12
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0018      	movs	r0, r3
 80006bc:	2314      	movs	r3, #20
 80006be:	001a      	movs	r2, r3
 80006c0:	2100      	movs	r1, #0
 80006c2:	f009 f9a3 	bl	8009a0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <MX_GPIO_Init+0x120>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <MX_GPIO_Init+0x120>)
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	03c9      	lsls	r1, r1, #15
 80006d0:	430a      	orrs	r2, r1
 80006d2:	615a      	str	r2, [r3, #20]
 80006d4:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <MX_GPIO_Init+0x120>)
 80006d6:	695a      	ldr	r2, [r3, #20]
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	03db      	lsls	r3, r3, #15
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <MX_GPIO_Init+0x120>)
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	4b3a      	ldr	r3, [pc, #232]	; (80007d0 <MX_GPIO_Init+0x120>)
 80006e8:	2180      	movs	r1, #128	; 0x80
 80006ea:	0289      	lsls	r1, r1, #10
 80006ec:	430a      	orrs	r2, r1
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_GPIO_Init+0x120>)
 80006f2:	695a      	ldr	r2, [r3, #20]
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	029b      	lsls	r3, r3, #10
 80006f8:	4013      	ands	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_GPIO_Init+0x120>)
 8000700:	695a      	ldr	r2, [r3, #20]
 8000702:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <MX_GPIO_Init+0x120>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	02c9      	lsls	r1, r1, #11
 8000708:	430a      	orrs	r2, r1
 800070a:	615a      	str	r2, [r3, #20]
 800070c:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_GPIO_Init+0x120>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	02db      	lsls	r3, r3, #11
 8000714:	4013      	ands	r3, r2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800071a:	2390      	movs	r3, #144	; 0x90
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	2200      	movs	r2, #0
 8000720:	2130      	movs	r1, #48	; 0x30
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fe48 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <MX_GPIO_Init+0x124>)
 800072a:	2200      	movs	r2, #0
 800072c:	2104      	movs	r1, #4
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fe42 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2201      	movs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	193a      	adds	r2, r7, r4
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fcbf 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2204      	movs	r2, #4
 800075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2201      	movs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	193b      	adds	r3, r7, r4
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_GPIO_Init+0x124>)
 8000776:	0019      	movs	r1, r3
 8000778:	0010      	movs	r0, r2
 800077a:	f000 fcad 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800077e:	0021      	movs	r1, r4
 8000780:	187b      	adds	r3, r7, r1
 8000782:	22f0      	movs	r2, #240	; 0xf0
 8000784:	0212      	lsls	r2, r2, #8
 8000786:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	000c      	movs	r4, r1
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	193b      	adds	r3, r7, r4
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <MX_GPIO_Init+0x124>)
 800079a:	0019      	movs	r1, r3
 800079c:	0010      	movs	r0, r2
 800079e:	f000 fc9b 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	2280      	movs	r2, #128	; 0x80
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	187a      	adds	r2, r7, r1
 80007ba:	2390      	movs	r3, #144	; 0x90
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fc89 	bl	80010d8 <HAL_GPIO_Init>

}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b009      	add	sp, #36	; 0x24
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	40021000 	.word	0x40021000
 80007d4:	48000400 	.word	0x48000400

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	699a      	ldr	r2, [r3, #24]
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	619a      	str	r2, [r3, #24]
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	69da      	ldr	r2, [r3, #28]
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0549      	lsls	r1, r1, #21
 800080c:	430a      	orrs	r2, r1
 800080e:	61da      	str	r2, [r3, #28]
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_MspInit+0x44>)
 8000812:	69da      	ldr	r2, [r3, #28]
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	055b      	lsls	r3, r3, #21
 8000818:	4013      	ands	r3, r2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	2414      	movs	r4, #20
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	2314      	movs	r3, #20
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f009 f8e4 	bl	8009a0c <memset>
  if(hi2c->Instance==I2C1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <HAL_I2C_MspInit+0x90>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d131      	bne.n	80008b2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <HAL_I2C_MspInit+0x94>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_I2C_MspInit+0x94>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	02c9      	lsls	r1, r1, #11
 8000858:	430a      	orrs	r2, r1
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_I2C_MspInit+0x94>)
 800085e:	695a      	ldr	r2, [r3, #20]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	02db      	lsls	r3, r3, #11
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800086a:	0021      	movs	r1, r4
 800086c:	187b      	adds	r3, r7, r1
 800086e:	22c0      	movs	r2, #192	; 0xc0
 8000870:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2212      	movs	r2, #18
 8000876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2203      	movs	r2, #3
 8000882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2201      	movs	r2, #1
 8000888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	187b      	adds	r3, r7, r1
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_I2C_MspInit+0x98>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f000 fc21 	bl	80010d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <HAL_I2C_MspInit+0x94>)
 8000898:	69da      	ldr	r2, [r3, #28]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_I2C_MspInit+0x94>)
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	0389      	lsls	r1, r1, #14
 80008a0:	430a      	orrs	r2, r1
 80008a2:	61da      	str	r2, [r3, #28]
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_I2C_MspInit+0x94>)
 80008a6:	69da      	ldr	r2, [r3, #28]
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	039b      	lsls	r3, r3, #14
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b00b      	add	sp, #44	; 0x2c
 80008b8:	bd90      	pop	{r4, r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	40005400 	.word	0x40005400
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400

080008c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_TIM_Base_MspInit+0x68>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d10c      	bne.n	80008f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 80008dc:	69da      	ldr	r2, [r3, #28]
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 80008e0:	2102      	movs	r1, #2
 80008e2:	430a      	orrs	r2, r1
 80008e4:	61da      	str	r2, [r3, #28]
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2202      	movs	r2, #2
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008f2:	e018      	b.n	8000926 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_TIM_Base_MspInit+0x70>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d113      	bne.n	8000926 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008fe:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 8000900:	69da      	ldr	r2, [r3, #28]
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 8000904:	2110      	movs	r1, #16
 8000906:	430a      	orrs	r2, r1
 8000908:	61da      	str	r2, [r3, #28]
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <HAL_TIM_Base_MspInit+0x6c>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	2210      	movs	r2, #16
 8000910:	4013      	ands	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2011      	movs	r0, #17
 800091c:	f000 fb2c 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000920:	2011      	movs	r0, #17
 8000922:	f000 fb3e 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b004      	add	sp, #16
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40000400 	.word	0x40000400
 8000934:	40021000 	.word	0x40021000
 8000938:	40001000 	.word	0x40001000

0800093c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b08b      	sub	sp, #44	; 0x2c
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	2414      	movs	r4, #20
 8000946:	193b      	adds	r3, r7, r4
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f009 f85c 	bl	8009a0c <memset>
  if(htim->Instance==TIM3)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a27      	ldr	r2, [pc, #156]	; (80009f8 <HAL_TIM_MspPostInit+0xbc>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d147      	bne.n	80009ee <HAL_TIM_MspPostInit+0xb2>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <HAL_TIM_MspPostInit+0xc0>)
 8000960:	695a      	ldr	r2, [r3, #20]
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <HAL_TIM_MspPostInit+0xc0>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0289      	lsls	r1, r1, #10
 8000968:	430a      	orrs	r2, r1
 800096a:	615a      	str	r2, [r3, #20]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <HAL_TIM_MspPostInit+0xc0>)
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	029b      	lsls	r3, r3, #10
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <HAL_TIM_MspPostInit+0xc0>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_TIM_MspPostInit+0xc0>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	02c9      	lsls	r1, r1, #11
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_TIM_MspPostInit+0xc0>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	02db      	lsls	r3, r3, #11
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	22c0      	movs	r2, #192	; 0xc0
 800099a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2202      	movs	r2, #2
 80009a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009ae:	193b      	adds	r3, r7, r4
 80009b0:	2201      	movs	r2, #1
 80009b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	193a      	adds	r2, r7, r4
 80009b6:	2390      	movs	r3, #144	; 0x90
 80009b8:	05db      	lsls	r3, r3, #23
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f000 fb8b 	bl	80010d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2203      	movs	r2, #3
 80009c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2202      	movs	r2, #2
 80009ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2201      	movs	r2, #1
 80009e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_TIM_MspPostInit+0xc4>)
 80009e6:	0019      	movs	r1, r3
 80009e8:	0010      	movs	r0, r2
 80009ea:	f000 fb75 	bl	80010d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b00b      	add	sp, #44	; 0x2c
 80009f4:	bd90      	pop	{r4, r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40000400 	.word	0x40000400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400

08000a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b091      	sub	sp, #68	; 0x44
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	242c      	movs	r4, #44	; 0x2c
 8000a0e:	193b      	adds	r3, r7, r4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2314      	movs	r3, #20
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f008 fff8 	bl	8009a0c <memset>
  if(huart->Instance==USART1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a82      	ldr	r2, [pc, #520]	; (8000c2c <HAL_UART_MspInit+0x228>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d13c      	bne.n	8000aa0 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a26:	4b82      	ldr	r3, [pc, #520]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000a28:	699a      	ldr	r2, [r3, #24]
 8000a2a:	4b81      	ldr	r3, [pc, #516]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	01c9      	lsls	r1, r1, #7
 8000a30:	430a      	orrs	r2, r1
 8000a32:	619a      	str	r2, [r3, #24]
 8000a34:	4b7e      	ldr	r3, [pc, #504]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	01db      	lsls	r3, r3, #7
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b7b      	ldr	r3, [pc, #492]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b7a      	ldr	r3, [pc, #488]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	0289      	lsls	r1, r1, #10
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b77      	ldr	r3, [pc, #476]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	029b      	lsls	r3, r3, #10
 8000a58:	4013      	ands	r3, r2
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	22c0      	movs	r2, #192	; 0xc0
 8000a62:	00d2      	lsls	r2, r2, #3
 8000a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	0021      	movs	r1, r4
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2203      	movs	r2, #3
 8000a78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	187a      	adds	r2, r7, r1
 8000a82:	2390      	movs	r3, #144	; 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	0011      	movs	r1, r2
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fb25 	bl	80010d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2100      	movs	r1, #0
 8000a92:	201b      	movs	r0, #27
 8000a94:	f000 fa70 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a98:	201b      	movs	r0, #27
 8000a9a:	f000 fa82 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000a9e:	e0c1      	b.n	8000c24 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a63      	ldr	r2, [pc, #396]	; (8000c34 <HAL_UART_MspInit+0x230>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d13b      	bne.n	8000b22 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	4b61      	ldr	r3, [pc, #388]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000aac:	69da      	ldr	r2, [r3, #28]
 8000aae:	4b60      	ldr	r3, [pc, #384]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	61da      	str	r2, [r3, #28]
 8000ab8:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000aba:	69da      	ldr	r2, [r3, #28]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	623b      	str	r3, [r7, #32]
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b59      	ldr	r3, [pc, #356]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	0289      	lsls	r1, r1, #10
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	4b56      	ldr	r3, [pc, #344]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	029b      	lsls	r3, r3, #10
 8000adc:	4013      	ands	r3, r2
 8000ade:	61fb      	str	r3, [r7, #28]
 8000ae0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ae2:	212c      	movs	r1, #44	; 0x2c
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2203      	movs	r2, #3
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	2390      	movs	r3, #144	; 0x90
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 fae4 	bl	80010d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	201c      	movs	r0, #28
 8000b16:	f000 fa2f 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b1a:	201c      	movs	r0, #28
 8000b1c:	f000 fa41 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
}
 8000b20:	e080      	b.n	8000c24 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a44      	ldr	r2, [pc, #272]	; (8000c38 <HAL_UART_MspInit+0x234>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d13b      	bne.n	8000ba4 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2c:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000b2e:	69da      	ldr	r2, [r3, #28]
 8000b30:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000b32:	2180      	movs	r1, #128	; 0x80
 8000b34:	02c9      	lsls	r1, r1, #11
 8000b36:	430a      	orrs	r2, r1
 8000b38:	61da      	str	r2, [r3, #28]
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000b3c:	69da      	ldr	r2, [r3, #28]
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	02db      	lsls	r3, r3, #11
 8000b42:	4013      	ands	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
 8000b46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000b4a:	695a      	ldr	r2, [r3, #20]
 8000b4c:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000b4e:	2180      	movs	r1, #128	; 0x80
 8000b50:	02c9      	lsls	r1, r1, #11
 8000b52:	430a      	orrs	r2, r1
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	02db      	lsls	r3, r3, #11
 8000b5e:	4013      	ands	r3, r2
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b64:	212c      	movs	r1, #44	; 0x2c
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	22c0      	movs	r2, #192	; 0xc0
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2203      	movs	r2, #3
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2204      	movs	r2, #4
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	4a2c      	ldr	r2, [pc, #176]	; (8000c3c <HAL_UART_MspInit+0x238>)
 8000b8a:	0019      	movs	r1, r3
 8000b8c:	0010      	movs	r0, r2
 8000b8e:	f000 faa3 	bl	80010d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	201d      	movs	r0, #29
 8000b98:	f000 f9ee 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000b9c:	201d      	movs	r0, #29
 8000b9e:	f000 fa00 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
}
 8000ba2:	e03f      	b.n	8000c24 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART4)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <HAL_UART_MspInit+0x23c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d13a      	bne.n	8000c24 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000bae:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000bb0:	69da      	ldr	r2, [r3, #28]
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000bb4:	2180      	movs	r1, #128	; 0x80
 8000bb6:	0309      	lsls	r1, r1, #12
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	61da      	str	r2, [r3, #28]
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000bbe:	69da      	ldr	r2, [r3, #28]
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	031b      	lsls	r3, r3, #12
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000bcc:	695a      	ldr	r2, [r3, #20]
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0289      	lsls	r1, r1, #10
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x22c>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	029b      	lsls	r3, r3, #10
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000be6:	212c      	movs	r1, #44	; 0x2c
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2203      	movs	r2, #3
 8000bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2204      	movs	r2, #4
 8000c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	187a      	adds	r2, r7, r1
 8000c08:	2390      	movs	r3, #144	; 0x90
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 fa62 	bl	80010d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	201d      	movs	r0, #29
 8000c1a:	f000 f9ad 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000c1e:	201d      	movs	r0, #29
 8000c20:	f000 f9bf 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
}
 8000c24:	46c0      	nop			; (mov r8, r8)
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b011      	add	sp, #68	; 0x44
 8000c2a:	bd90      	pop	{r4, r7, pc}
 8000c2c:	40013800 	.word	0x40013800
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40004800 	.word	0x40004800
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	40004c00 	.word	0x40004c00

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f8be 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	46c0      	nop			; (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <TIM6_IRQHandler+0x14>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f003 f93a 	bl	8003ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000214 	.word	0x20000214

08000c8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c90:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <USART1_IRQHandler+0x14>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f003 ffce 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	2000025c 	.word	0x2000025c

08000ca4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <USART2_IRQHandler+0x14>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f003 ffc2 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	200002e0 	.word	0x200002e0

08000cbc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <USART3_4_IRQHandler+0x1c>)
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f003 ffb6 	bl	8004c34 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <USART3_4_IRQHandler+0x20>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f003 ffb2 	bl	8004c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000364 	.word	0x20000364
 8000cdc:	200003e8 	.word	0x200003e8

08000ce0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <USB_IRQHandler+0x14>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fde8 	bl	80018bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000938 	.word	0x20000938

08000cf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d2e:	f7ff ffe3 	bl	8000cf8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d32:	f008 fe47 	bl	80099c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d36:	f7ff fa73 	bl	8000220 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   r0, =_estack
 8000d3c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000d48:	08009b1c 	.word	0x08009b1c
  ldr r2, =_sbss
 8000d4c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000d50:	20000c40 	.word	0x20000c40

08000d54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_IRQHandler>
	...

08000d58 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <HAL_Init+0x24>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_Init+0x24>)
 8000d62:	2110      	movs	r1, #16
 8000d64:	430a      	orrs	r2, r1
 8000d66:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d68:	2003      	movs	r0, #3
 8000d6a:	f000 f809 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6e:	f7ff fd39 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40022000 	.word	0x40022000

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_InitTick+0x5c>)
 8000d8a:	681c      	ldr	r4, [r3, #0]
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_InitTick+0x60>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	0019      	movs	r1, r3
 8000d92:	23fa      	movs	r3, #250	; 0xfa
 8000d94:	0098      	lsls	r0, r3, #2
 8000d96:	f7ff f9b7 	bl	8000108 <__udivsi3>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	0019      	movs	r1, r3
 8000d9e:	0020      	movs	r0, r4
 8000da0:	f7ff f9b2 	bl	8000108 <__udivsi3>
 8000da4:	0003      	movs	r3, r0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 f90b 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e00f      	b.n	8000dd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d80b      	bhi.n	8000dd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f8d8 	bl	8000f78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_InitTick+0x64>)
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b003      	add	sp, #12
 8000dda:	bd90      	pop	{r4, r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	001a      	movs	r2, r3
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x20>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	18d2      	adds	r2, r2, r3
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_IncTick+0x20>)
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	20000008 	.word	0x20000008
 8000e08:	2000046c 	.word	0x2000046c

08000e0c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b02      	ldr	r3, [pc, #8]	; (8000e1c <HAL_GetTick+0x10>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	2000046c 	.word	0x2000046c

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	0002      	movs	r2, r0
 8000e28:	1dfb      	adds	r3, r7, #7
 8000e2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b7f      	cmp	r3, #127	; 0x7f
 8000e32:	d809      	bhi.n	8000e48 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	001a      	movs	r2, r3
 8000e3a:	231f      	movs	r3, #31
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_EnableIRQ+0x30>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	4091      	lsls	r1, r2
 8000e44:	000a      	movs	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
  }
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b7f      	cmp	r3, #127	; 0x7f
 8000e68:	d828      	bhi.n	8000ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e6a:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <__NVIC_SetPriority+0xd4>)
 8000e6c:	1dfb      	adds	r3, r7, #7
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b25b      	sxtb	r3, r3
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	33c0      	adds	r3, #192	; 0xc0
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	589b      	ldr	r3, [r3, r2]
 8000e7a:	1dfa      	adds	r2, r7, #7
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	0011      	movs	r1, r2
 8000e80:	2203      	movs	r2, #3
 8000e82:	400a      	ands	r2, r1
 8000e84:	00d2      	lsls	r2, r2, #3
 8000e86:	21ff      	movs	r1, #255	; 0xff
 8000e88:	4091      	lsls	r1, r2
 8000e8a:	000a      	movs	r2, r1
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	22ff      	movs	r2, #255	; 0xff
 8000e98:	401a      	ands	r2, r3
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	4003      	ands	r3, r0
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea8:	481f      	ldr	r0, [pc, #124]	; (8000f28 <__NVIC_SetPriority+0xd4>)
 8000eaa:	1dfb      	adds	r3, r7, #7
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	33c0      	adds	r3, #192	; 0xc0
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000eba:	e031      	b.n	8000f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <__NVIC_SetPriority+0xd8>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	3b08      	subs	r3, #8
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3306      	adds	r3, #6
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	3304      	adds	r3, #4
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	1dfa      	adds	r2, r7, #7
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	0011      	movs	r1, r2
 8000edc:	2203      	movs	r2, #3
 8000ede:	400a      	ands	r2, r1
 8000ee0:	00d2      	lsls	r2, r2, #3
 8000ee2:	21ff      	movs	r1, #255	; 0xff
 8000ee4:	4091      	lsls	r1, r2
 8000ee6:	000a      	movs	r2, r1
 8000ee8:	43d2      	mvns	r2, r2
 8000eea:	401a      	ands	r2, r3
 8000eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	019b      	lsls	r3, r3, #6
 8000ef2:	22ff      	movs	r2, #255	; 0xff
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	0018      	movs	r0, r3
 8000efc:	2303      	movs	r3, #3
 8000efe:	4003      	ands	r3, r0
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <__NVIC_SetPriority+0xd8>)
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	001c      	movs	r4, r3
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	4023      	ands	r3, r4
 8000f10:	3b08      	subs	r3, #8
 8000f12:	089b      	lsrs	r3, r3, #2
 8000f14:	430a      	orrs	r2, r1
 8000f16:	3306      	adds	r3, #6
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	18c3      	adds	r3, r0, r3
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b003      	add	sp, #12
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	1e5a      	subs	r2, r3, #1
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	045b      	lsls	r3, r3, #17
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d301      	bcc.n	8000f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f44:	2301      	movs	r3, #1
 8000f46:	e010      	b.n	8000f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f48:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <SysTick_Config+0x44>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	3a01      	subs	r2, #1
 8000f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f50:	2301      	movs	r3, #1
 8000f52:	425b      	negs	r3, r3
 8000f54:	2103      	movs	r1, #3
 8000f56:	0018      	movs	r0, r3
 8000f58:	f7ff ff7c 	bl	8000e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x44>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x44>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	210f      	movs	r1, #15
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	1c02      	adds	r2, r0, #0
 8000f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ff5d 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b004      	add	sp, #16
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	0002      	movs	r2, r0
 8000faa:	1dfb      	adds	r3, r7, #7
 8000fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f7ff ff33 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff ffaf 	bl	8000f30 <SysTick_Config>
 8000fd2:	0003      	movs	r3, r0
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2221      	movs	r2, #33	; 0x21
 8000fe8:	5c9b      	ldrb	r3, [r3, r2]
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d008      	beq.n	8001002 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2204      	movs	r2, #4
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e020      	b.n	8001044 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	210e      	movs	r1, #14
 800100e:	438a      	bics	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2101      	movs	r1, #1
 800101e:	438a      	bics	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102a:	2101      	movs	r1, #1
 800102c:	4091      	lsls	r1, r2
 800102e:	000a      	movs	r2, r1
 8001030:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2221      	movs	r2, #33	; 0x21
 8001036:	2101      	movs	r1, #1
 8001038:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2220      	movs	r2, #32
 800103e:	2100      	movs	r1, #0
 8001040:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001054:	210f      	movs	r1, #15
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2221      	movs	r2, #33	; 0x21
 8001060:	5c9b      	ldrb	r3, [r3, r2]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d006      	beq.n	8001076 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2204      	movs	r2, #4
 800106c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	e028      	b.n	80010c8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	210e      	movs	r1, #14
 8001082:	438a      	bics	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	438a      	bics	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	2101      	movs	r1, #1
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2221      	movs	r2, #33	; 0x21
 80010aa:	2101      	movs	r1, #1
 80010ac:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	0010      	movs	r0, r2
 80010c6:	4798      	blx	r3
    } 
  }
  return status;
 80010c8:	230f      	movs	r3, #15
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e14f      	b.n	8001388 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4091      	lsls	r1, r2
 80010f2:	000a      	movs	r2, r1
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d100      	bne.n	8001100 <HAL_GPIO_Init+0x28>
 80010fe:	e140      	b.n	8001382 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	4013      	ands	r3, r2
 8001108:	2b01      	cmp	r3, #1
 800110a:	d005      	beq.n	8001118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2203      	movs	r2, #3
 8001112:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001114:	2b02      	cmp	r3, #2
 8001116:	d130      	bne.n	800117a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	409a      	lsls	r2, r3
 8001126:	0013      	movs	r3, r2
 8001128:	43da      	mvns	r2, r3
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68da      	ldr	r2, [r3, #12]
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	409a      	lsls	r2, r3
 800113a:	0013      	movs	r3, r2
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800114e:	2201      	movs	r2, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	091b      	lsrs	r3, r3, #4
 8001164:	2201      	movs	r2, #1
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	409a      	lsls	r2, r3
 800116c:	0013      	movs	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2203      	movs	r2, #3
 8001180:	4013      	ands	r3, r2
 8001182:	2b03      	cmp	r3, #3
 8001184:	d017      	beq.n	80011b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4013      	ands	r3, r2
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d123      	bne.n	800120a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	08da      	lsrs	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	3208      	adds	r2, #8
 80011ca:	0092      	lsls	r2, r2, #2
 80011cc:	58d3      	ldr	r3, [r2, r3]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	2207      	movs	r2, #7
 80011d4:	4013      	ands	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	691a      	ldr	r2, [r3, #16]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2107      	movs	r1, #7
 80011ee:	400b      	ands	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	08da      	lsrs	r2, r3, #3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3208      	adds	r2, #8
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	6939      	ldr	r1, [r7, #16]
 8001208:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	2203      	movs	r2, #3
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	43da      	mvns	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2203      	movs	r2, #3
 8001228:	401a      	ands	r2, r3
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	409a      	lsls	r2, r3
 8001230:	0013      	movs	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	23c0      	movs	r3, #192	; 0xc0
 8001244:	029b      	lsls	r3, r3, #10
 8001246:	4013      	ands	r3, r2
 8001248:	d100      	bne.n	800124c <HAL_GPIO_Init+0x174>
 800124a:	e09a      	b.n	8001382 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124c:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 800124e:	699a      	ldr	r2, [r3, #24]
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 8001252:	2101      	movs	r1, #1
 8001254:	430a      	orrs	r2, r1
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	4b51      	ldr	r3, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x2c8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	589b      	ldr	r3, [r3, r2]
 8001270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	409a      	lsls	r2, r3
 800127e:	0013      	movs	r3, r2
 8001280:	43da      	mvns	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	2390      	movs	r3, #144	; 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	429a      	cmp	r2, r3
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0x1e2>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a44      	ldr	r2, [pc, #272]	; (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00d      	beq.n	80012b6 <HAL_GPIO_Init+0x1de>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a43      	ldr	r2, [pc, #268]	; (80013ac <HAL_GPIO_Init+0x2d4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d007      	beq.n	80012b2 <HAL_GPIO_Init+0x1da>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <HAL_GPIO_Init+0x2d8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_GPIO_Init+0x1d6>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ae:	2305      	movs	r3, #5
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ba:	2300      	movs	r3, #0
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	2103      	movs	r1, #3
 80012c0:	400a      	ands	r2, r1
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	4013      	ands	r3, r2
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012fe:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43da      	mvns	r2, r3
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	029b      	lsls	r3, r3, #10
 800131c:	4013      	ands	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	035b      	lsls	r3, r3, #13
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	039b      	lsls	r3, r3, #14
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_GPIO_Init+0x2dc>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	3301      	adds	r3, #1
 8001386:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	40da      	lsrs	r2, r3
 8001390:	1e13      	subs	r3, r2, #0
 8001392:	d000      	beq.n	8001396 <HAL_GPIO_Init+0x2be>
 8001394:	e6a8      	b.n	80010e8 <HAL_GPIO_Init+0x10>
  } 
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	b006      	add	sp, #24
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010000 	.word	0x40010000
 80013a8:	48000400 	.word	0x48000400
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000c00 	.word	0x48000c00
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	0008      	movs	r0, r1
 80013c2:	0011      	movs	r1, r2
 80013c4:	1cbb      	adds	r3, r7, #2
 80013c6:	1c02      	adds	r2, r0, #0
 80013c8:	801a      	strh	r2, [r3, #0]
 80013ca:	1c7b      	adds	r3, r7, #1
 80013cc:	1c0a      	adds	r2, r1, #0
 80013ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d0:	1c7b      	adds	r3, r7, #1
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d004      	beq.n	80013e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d8:	1cbb      	adds	r3, r7, #2
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013e0:	e003      	b.n	80013ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013e2:	1cbb      	adds	r3, r7, #2
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e082      	b.n	800150c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2241      	movs	r2, #65	; 0x41
 800140a:	5c9b      	ldrb	r3, [r3, r2]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d107      	bne.n	8001422 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2240      	movs	r2, #64	; 0x40
 8001416:	2100      	movs	r1, #0
 8001418:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fa05 	bl	800082c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2241      	movs	r2, #65	; 0x41
 8001426:	2124      	movs	r1, #36	; 0x24
 8001428:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	438a      	bics	r2, r1
 8001438:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4934      	ldr	r1, [pc, #208]	; (8001514 <HAL_I2C_Init+0x120>)
 8001444:	400a      	ands	r2, r1
 8001446:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4931      	ldr	r1, [pc, #196]	; (8001518 <HAL_I2C_Init+0x124>)
 8001454:	400a      	ands	r2, r1
 8001456:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d108      	bne.n	8001472 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0209      	lsls	r1, r1, #8
 800146c:	430a      	orrs	r2, r1
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e007      	b.n	8001482 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2184      	movs	r1, #132	; 0x84
 800147c:	0209      	lsls	r1, r1, #8
 800147e:	430a      	orrs	r2, r1
 8001480:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d104      	bne.n	8001494 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	491f      	ldr	r1, [pc, #124]	; (800151c <HAL_I2C_Init+0x128>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	491a      	ldr	r1, [pc, #104]	; (8001518 <HAL_I2C_Init+0x124>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	695b      	ldr	r3, [r3, #20]
 80014bc:	431a      	orrs	r2, r3
 80014be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69d9      	ldr	r1, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2241      	movs	r2, #65	; 0x41
 80014f8:	2120      	movs	r1, #32
 80014fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2242      	movs	r2, #66	; 0x42
 8001506:	2100      	movs	r1, #0
 8001508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}
 8001514:	f0ffffff 	.word	0xf0ffffff
 8001518:	ffff7fff 	.word	0xffff7fff
 800151c:	02008000 	.word	0x02008000

08001520 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2241      	movs	r2, #65	; 0x41
 800152e:	5c9b      	ldrb	r3, [r3, r2]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b20      	cmp	r3, #32
 8001534:	d138      	bne.n	80015a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001540:	2302      	movs	r3, #2
 8001542:	e032      	b.n	80015aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2240      	movs	r2, #64	; 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2241      	movs	r2, #65	; 0x41
 8001550:	2124      	movs	r1, #36	; 0x24
 8001552:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2101      	movs	r1, #1
 8001560:	438a      	bics	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4911      	ldr	r1, [pc, #68]	; (80015b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001570:	400a      	ands	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2241      	movs	r2, #65	; 0x41
 8001598:	2120      	movs	r1, #32
 800159a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2240      	movs	r2, #64	; 0x40
 80015a0:	2100      	movs	r1, #0
 80015a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015a8:	2302      	movs	r3, #2
  }
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	ffffefff 	.word	0xffffefff

080015b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2241      	movs	r2, #65	; 0x41
 80015c6:	5c9b      	ldrb	r3, [r3, r2]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	d139      	bne.n	8001642 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	5c9b      	ldrb	r3, [r3, r2]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015d8:	2302      	movs	r3, #2
 80015da:	e033      	b.n	8001644 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	2101      	movs	r1, #1
 80015e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2241      	movs	r2, #65	; 0x41
 80015e8:	2124      	movs	r1, #36	; 0x24
 80015ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2101      	movs	r1, #1
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2241      	movs	r2, #65	; 0x41
 8001632:	2120      	movs	r1, #32
 8001634:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2240      	movs	r2, #64	; 0x40
 800163a:	2100      	movs	r1, #0
 800163c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	e000      	b.n	8001644 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
  }
}
 8001644:	0018      	movs	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	b004      	add	sp, #16
 800164a:	bd80      	pop	{r7, pc}
 800164c:	fffff0ff 	.word	0xfffff0ff

08001650 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001652:	b08b      	sub	sp, #44	; 0x2c
 8001654:	af06      	add	r7, sp, #24
 8001656:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0ff      	b.n	8001862 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a81      	ldr	r2, [pc, #516]	; (800186c <HAL_PCD_Init+0x21c>)
 8001666:	5c9b      	ldrb	r3, [r3, r2]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	23aa      	movs	r3, #170	; 0xaa
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	2100      	movs	r1, #0
 8001676:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	0018      	movs	r0, r3
 800167c:	f007 fe6e 	bl	800935c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a7a      	ldr	r2, [pc, #488]	; (800186c <HAL_PCD_Init+0x21c>)
 8001684:	2103      	movs	r1, #3
 8001686:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0018      	movs	r0, r3
 800168e:	f004 f97f 	bl	8005990 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001692:	230f      	movs	r3, #15
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e058      	b.n	800174e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800169c:	200f      	movs	r0, #15
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	0013      	movs	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	189b      	adds	r3, r3, r2
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	18cb      	adds	r3, r1, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016b6:	183b      	adds	r3, r7, r0
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	1c5a      	adds	r2, r3, #1
 80016be:	0013      	movs	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	189b      	adds	r3, r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	183a      	adds	r2, r7, r0
 80016c8:	7812      	ldrb	r2, [r2, #0]
 80016ca:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016cc:	0004      	movs	r4, r0
 80016ce:	183b      	adds	r3, r7, r0
 80016d0:	781a      	ldrb	r2, [r3, #0]
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	b298      	uxth	r0, r3
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	0013      	movs	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	189b      	adds	r3, r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	18cb      	adds	r3, r1, r3
 80016e4:	3336      	adds	r3, #54	; 0x36
 80016e6:	1c02      	adds	r2, r0, #0
 80016e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016ea:	193b      	adds	r3, r7, r4
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	0013      	movs	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	18cb      	adds	r3, r1, r3
 80016fc:	3303      	adds	r3, #3
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	0013      	movs	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	189b      	adds	r3, r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	18cb      	adds	r3, r1, r3
 8001712:	3338      	adds	r3, #56	; 0x38
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001718:	193b      	adds	r3, r7, r4
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	0013      	movs	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	189b      	adds	r3, r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	18cb      	adds	r3, r1, r3
 8001728:	333c      	adds	r3, #60	; 0x3c
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800172e:	193b      	adds	r3, r7, r4
 8001730:	781a      	ldrb	r2, [r3, #0]
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	0013      	movs	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	189b      	adds	r3, r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	18cb      	adds	r3, r1, r3
 800173e:	3340      	adds	r3, #64	; 0x40
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001744:	193b      	adds	r3, r7, r4
 8001746:	781a      	ldrb	r2, [r3, #0]
 8001748:	193b      	adds	r3, r7, r4
 800174a:	3201      	adds	r2, #1
 800174c:	701a      	strb	r2, [r3, #0]
 800174e:	210f      	movs	r1, #15
 8001750:	187b      	adds	r3, r7, r1
 8001752:	781a      	ldrb	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d39f      	bcc.n	800169c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e056      	b.n	8001812 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001764:	240f      	movs	r4, #15
 8001766:	193b      	adds	r3, r7, r4
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	236a      	movs	r3, #106	; 0x6a
 800176e:	33ff      	adds	r3, #255	; 0xff
 8001770:	0019      	movs	r1, r3
 8001772:	0013      	movs	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	189b      	adds	r3, r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	18c3      	adds	r3, r0, r3
 800177c:	185b      	adds	r3, r3, r1
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001782:	193b      	adds	r3, r7, r4
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	23b4      	movs	r3, #180	; 0xb4
 800178a:	0059      	lsls	r1, r3, #1
 800178c:	0013      	movs	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	189b      	adds	r3, r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	18c3      	adds	r3, r0, r3
 8001796:	185b      	adds	r3, r3, r1
 8001798:	193a      	adds	r2, r7, r4
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	781a      	ldrb	r2, [r3, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	236c      	movs	r3, #108	; 0x6c
 80017a6:	33ff      	adds	r3, #255	; 0xff
 80017a8:	0019      	movs	r1, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	189b      	adds	r3, r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	18c3      	adds	r3, r0, r3
 80017b4:	185b      	adds	r3, r3, r1
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017ba:	193b      	adds	r3, r7, r4
 80017bc:	781a      	ldrb	r2, [r3, #0]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	23bc      	movs	r3, #188	; 0xbc
 80017c2:	0059      	lsls	r1, r3, #1
 80017c4:	0013      	movs	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	189b      	adds	r3, r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	18c3      	adds	r3, r0, r3
 80017ce:	185b      	adds	r3, r3, r1
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	781a      	ldrb	r2, [r3, #0]
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	23be      	movs	r3, #190	; 0xbe
 80017dc:	0059      	lsls	r1, r3, #1
 80017de:	0013      	movs	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	189b      	adds	r3, r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	18c3      	adds	r3, r0, r3
 80017e8:	185b      	adds	r3, r3, r1
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017ee:	193b      	adds	r3, r7, r4
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	23c0      	movs	r3, #192	; 0xc0
 80017f6:	0059      	lsls	r1, r3, #1
 80017f8:	0013      	movs	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	18c3      	adds	r3, r0, r3
 8001802:	185b      	adds	r3, r3, r1
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001808:	193b      	adds	r3, r7, r4
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	193b      	adds	r3, r7, r4
 800180e:	3201      	adds	r2, #1
 8001810:	701a      	strb	r2, [r3, #0]
 8001812:	230f      	movs	r3, #15
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3a1      	bcc.n	8001764 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	466a      	mov	r2, sp
 8001828:	0011      	movs	r1, r2
 800182a:	001a      	movs	r2, r3
 800182c:	3210      	adds	r2, #16
 800182e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001830:	c170      	stmia	r1!, {r4, r5, r6}
 8001832:	ca30      	ldmia	r2!, {r4, r5}
 8001834:	c130      	stmia	r1!, {r4, r5}
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f004 f8c2 	bl	80059c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	2100      	movs	r1, #0
 8001846:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <HAL_PCD_Init+0x21c>)
 800184c:	2101      	movs	r1, #1
 800184e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d103      	bne.n	8001860 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0018      	movs	r0, r3
 800185c:	f001 fd1c 	bl	8003298 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b005      	add	sp, #20
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	000002a9 	.word	0x000002a9

08001870 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	23aa      	movs	r3, #170	; 0xaa
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	5cd3      	ldrb	r3, [r2, r3]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_PCD_Start+0x18>
 8001884:	2302      	movs	r3, #2
 8001886:	e014      	b.n	80018b2 <HAL_PCD_Start+0x42>
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	23aa      	movs	r3, #170	; 0xaa
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	2101      	movs	r1, #1
 8001890:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0018      	movs	r0, r3
 8001898:	f004 f864 	bl	8005964 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f005 ffbb 	bl	800781c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	23aa      	movs	r3, #170	; 0xaa
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	2100      	movs	r1, #0
 80018ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	0018      	movs	r0, r3
 80018ca:	f005 ffbd 	bl	8007848 <USB_ReadInterrupts>
 80018ce:	0002      	movs	r2, r0
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	401a      	ands	r2, r3
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	429a      	cmp	r2, r3
 80018dc:	d103      	bne.n	80018e6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f000 fba3 	bl	800202c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f005 ffac 	bl	8007848 <USB_ReadInterrupts>
 80018f0:	0002      	movs	r2, r0
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	401a      	ands	r2, r3
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d114      	bne.n	800192a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2244      	movs	r2, #68	; 0x44
 8001906:	5a9b      	ldrh	r3, [r3, r2]
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	49a2      	ldr	r1, [pc, #648]	; (8001b98 <HAL_PCD_IRQHandler+0x2dc>)
 8001910:	400a      	ands	r2, r1
 8001912:	b291      	uxth	r1, r2
 8001914:	2244      	movs	r2, #68	; 0x44
 8001916:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	0018      	movs	r0, r3
 800191c:	f007 fda9 	bl	8009472 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2100      	movs	r1, #0
 8001924:	0018      	movs	r0, r3
 8001926:	f000 f945 	bl	8001bb4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0018      	movs	r0, r3
 8001930:	f005 ff8a 	bl	8007848 <USB_ReadInterrupts>
 8001934:	0002      	movs	r2, r0
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	01db      	lsls	r3, r3, #7
 800193a:	401a      	ands	r2, r3
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	01db      	lsls	r3, r3, #7
 8001940:	429a      	cmp	r2, r3
 8001942:	d10b      	bne.n	800195c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2244      	movs	r2, #68	; 0x44
 800194a:	5a9b      	ldrh	r3, [r3, r2]
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4992      	ldr	r1, [pc, #584]	; (8001b9c <HAL_PCD_IRQHandler+0x2e0>)
 8001954:	400a      	ands	r2, r1
 8001956:	b291      	uxth	r1, r2
 8001958:	2244      	movs	r2, #68	; 0x44
 800195a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	0018      	movs	r0, r3
 8001962:	f005 ff71 	bl	8007848 <USB_ReadInterrupts>
 8001966:	0002      	movs	r2, r0
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	019b      	lsls	r3, r3, #6
 800196c:	401a      	ands	r2, r3
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	429a      	cmp	r2, r3
 8001974:	d10b      	bne.n	800198e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2244      	movs	r2, #68	; 0x44
 800197c:	5a9b      	ldrh	r3, [r3, r2]
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4986      	ldr	r1, [pc, #536]	; (8001ba0 <HAL_PCD_IRQHandler+0x2e4>)
 8001986:	400a      	ands	r2, r1
 8001988:	b291      	uxth	r1, r2
 800198a:	2244      	movs	r2, #68	; 0x44
 800198c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0018      	movs	r0, r3
 8001994:	f005 ff58 	bl	8007848 <USB_ReadInterrupts>
 8001998:	0002      	movs	r2, r0
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	401a      	ands	r2, r3
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d137      	bne.n	8001a18 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	5a9b      	ldrh	r3, [r3, r2]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2104      	movs	r1, #4
 80019b8:	438a      	bics	r2, r1
 80019ba:	b291      	uxth	r1, r2
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	5a9b      	ldrh	r3, [r3, r2]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2108      	movs	r1, #8
 80019d0:	438a      	bics	r2, r1
 80019d2:	b291      	uxth	r1, r2
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	23b8      	movs	r3, #184	; 0xb8
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d109      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	23b8      	movs	r3, #184	; 0xb8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	2100      	movs	r1, #0
 80019ec:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2100      	movs	r1, #0
 80019f2:	0018      	movs	r0, r3
 80019f4:	f001 fc7a 	bl	80032ec <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0018      	movs	r0, r3
 80019fc:	f007 fd7a 	bl	80094f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2244      	movs	r2, #68	; 0x44
 8001a06:	5a9b      	ldrh	r3, [r3, r2]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4965      	ldr	r1, [pc, #404]	; (8001ba4 <HAL_PCD_IRQHandler+0x2e8>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	b291      	uxth	r1, r2
 8001a14:	2244      	movs	r2, #68	; 0x44
 8001a16:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f005 ff13 	bl	8007848 <USB_ReadInterrupts>
 8001a22:	0002      	movs	r2, r0
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	401a      	ands	r2, r3
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d127      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2240      	movs	r2, #64	; 0x40
 8001a38:	5a9b      	ldrh	r3, [r3, r2]
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2108      	movs	r1, #8
 8001a42:	430a      	orrs	r2, r1
 8001a44:	b291      	uxth	r1, r2
 8001a46:	2240      	movs	r2, #64	; 0x40
 8001a48:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2244      	movs	r2, #68	; 0x44
 8001a50:	5a9b      	ldrh	r3, [r3, r2]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4953      	ldr	r1, [pc, #332]	; (8001ba8 <HAL_PCD_IRQHandler+0x2ec>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	b291      	uxth	r1, r2
 8001a5e:	2244      	movs	r2, #68	; 0x44
 8001a60:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	5a9b      	ldrh	r3, [r3, r2]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2104      	movs	r1, #4
 8001a72:	430a      	orrs	r2, r1
 8001a74:	b291      	uxth	r1, r2
 8001a76:	2240      	movs	r2, #64	; 0x40
 8001a78:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f007 fd1d 	bl	80094bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f005 fede 	bl	8007848 <USB_ReadInterrupts>
 8001a8c:	0003      	movs	r3, r0
 8001a8e:	2280      	movs	r2, #128	; 0x80
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b80      	cmp	r3, #128	; 0x80
 8001a94:	d145      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2244      	movs	r2, #68	; 0x44
 8001a9c:	5a9b      	ldrh	r3, [r3, r2]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	438a      	bics	r2, r1
 8001aa8:	b291      	uxth	r1, r2
 8001aaa:	2244      	movs	r2, #68	; 0x44
 8001aac:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	23b8      	movs	r3, #184	; 0xb8
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d12f      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	5a9b      	ldrh	r3, [r3, r2]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2104      	movs	r1, #4
 8001aca:	430a      	orrs	r2, r1
 8001acc:	b291      	uxth	r1, r2
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	5a9b      	ldrh	r3, [r3, r2]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2108      	movs	r1, #8
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	b291      	uxth	r1, r2
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	23b8      	movs	r3, #184	; 0xb8
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	2101      	movs	r1, #1
 8001af2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	5a9b      	ldrh	r3, [r3, r2]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	223c      	movs	r2, #60	; 0x3c
 8001b02:	4013      	ands	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	23b9      	movs	r3, #185	; 0xb9
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2101      	movs	r1, #1
 8001b12:	0018      	movs	r0, r3
 8001b14:	f001 fbea 	bl	80032ec <HAL_PCDEx_LPM_Callback>
 8001b18:	e003      	b.n	8001b22 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f007 fccd 	bl	80094bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0018      	movs	r0, r3
 8001b28:	f005 fe8e 	bl	8007848 <USB_ReadInterrupts>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	401a      	ands	r2, r3
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d10f      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2244      	movs	r2, #68	; 0x44
 8001b42:	5a9b      	ldrh	r3, [r3, r2]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4918      	ldr	r1, [pc, #96]	; (8001bac <HAL_PCD_IRQHandler+0x2f0>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	b291      	uxth	r1, r2
 8001b50:	2244      	movs	r2, #68	; 0x44
 8001b52:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f007 fc7c 	bl	8009454 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f005 fe71 	bl	8007848 <USB_ReadInterrupts>
 8001b66:	0002      	movs	r2, r0
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d10b      	bne.n	8001b8e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2244      	movs	r2, #68	; 0x44
 8001b7c:	5a9b      	ldrh	r3, [r3, r2]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	490a      	ldr	r1, [pc, #40]	; (8001bb0 <HAL_PCD_IRQHandler+0x2f4>)
 8001b86:	400a      	ands	r2, r1
 8001b88:	b291      	uxth	r1, r2
 8001b8a:	2244      	movs	r2, #68	; 0x44
 8001b8c:	5299      	strh	r1, [r3, r2]
  }
}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	fffffbff 	.word	0xfffffbff
 8001b9c:	ffffbfff 	.word	0xffffbfff
 8001ba0:	ffffdfff 	.word	0xffffdfff
 8001ba4:	ffffefff 	.word	0xffffefff
 8001ba8:	fffff7ff 	.word	0xfffff7ff
 8001bac:	fffffdff 	.word	0xfffffdff
 8001bb0:	fffffeff 	.word	0xfffffeff

08001bb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	000a      	movs	r2, r1
 8001bbe:	1cfb      	adds	r3, r7, #3
 8001bc0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	23aa      	movs	r3, #170	; 0xaa
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_PCD_SetAddress+0x1e>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e017      	b.n	8001c02 <HAL_PCD_SetAddress+0x4e>
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	23aa      	movs	r3, #170	; 0xaa
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	2101      	movs	r1, #1
 8001bda:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1cfa      	adds	r2, r7, #3
 8001be0:	2124      	movs	r1, #36	; 0x24
 8001be2:	7812      	ldrb	r2, [r2, #0]
 8001be4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	1cfb      	adds	r3, r7, #3
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	0019      	movs	r1, r3
 8001bf0:	0010      	movs	r0, r2
 8001bf2:	f005 fdff 	bl	80077f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	23aa      	movs	r3, #170	; 0xaa
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	0018      	movs	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c0a:	b590      	push	{r4, r7, lr}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	000c      	movs	r4, r1
 8001c14:	0010      	movs	r0, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	1cfb      	adds	r3, r7, #3
 8001c1a:	1c22      	adds	r2, r4, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	003b      	movs	r3, r7
 8001c20:	1c02      	adds	r2, r0, #0
 8001c22:	801a      	strh	r2, [r3, #0]
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	1c0a      	adds	r2, r1, #0
 8001c28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c2a:	230b      	movs	r3, #11
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c32:	1cfb      	adds	r3, r7, #3
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	da0f      	bge.n	8001c5c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	1cfb      	adds	r3, r7, #3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2207      	movs	r2, #7
 8001c42:	4013      	ands	r3, r2
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	0013      	movs	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	18d3      	adds	r3, r2, r3
 8001c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	705a      	strb	r2, [r3, #1]
 8001c5a:	e00f      	b.n	8001c7c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5c:	1cfb      	adds	r3, r7, #3
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2207      	movs	r2, #7
 8001c62:	401a      	ands	r2, r3
 8001c64:	0013      	movs	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	189b      	adds	r3, r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	3369      	adds	r3, #105	; 0x69
 8001c6e:	33ff      	adds	r3, #255	; 0xff
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	18d3      	adds	r3, r2, r3
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7c:	1cfb      	adds	r3, r7, #3
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2207      	movs	r2, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c8a:	003b      	movs	r3, r7
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1cba      	adds	r2, r7, #2
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	785b      	ldrb	r3, [r3, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cac:	1cbb      	adds	r3, r7, #2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d102      	bne.n	8001cba <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	23aa      	movs	r3, #170	; 0xaa
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_PCD_EP_Open+0xc0>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e013      	b.n	8001cf2 <HAL_PCD_EP_Open+0xe8>
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	23aa      	movs	r3, #170	; 0xaa
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f003 fe99 	bl	8005a14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	23aa      	movs	r3, #170	; 0xaa
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	2100      	movs	r1, #0
 8001cea:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001cec:	230b      	movs	r3, #11
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	781b      	ldrb	r3, [r3, #0]
}
 8001cf2:	0018      	movs	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	b005      	add	sp, #20
 8001cf8:	bd90      	pop	{r4, r7, pc}

08001cfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	000a      	movs	r2, r1
 8001d04:	1cfb      	adds	r3, r7, #3
 8001d06:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d08:	1cfb      	adds	r3, r7, #3
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	b25b      	sxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da0f      	bge.n	8001d32 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	1cfb      	adds	r3, r7, #3
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2207      	movs	r2, #7
 8001d18:	4013      	ands	r3, r2
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	189b      	adds	r3, r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	18d3      	adds	r3, r2, r3
 8001d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	705a      	strb	r2, [r3, #1]
 8001d30:	e00f      	b.n	8001d52 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	1cfb      	adds	r3, r7, #3
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2207      	movs	r2, #7
 8001d38:	401a      	ands	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	3369      	adds	r3, #105	; 0x69
 8001d44:	33ff      	adds	r3, #255	; 0xff
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	18d3      	adds	r3, r2, r3
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d52:	1cfb      	adds	r3, r7, #3
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2207      	movs	r2, #7
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	23aa      	movs	r3, #170	; 0xaa
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	5cd3      	ldrb	r3, [r2, r3]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_EP_Close+0x76>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e011      	b.n	8001d94 <HAL_PCD_EP_Close+0x9a>
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	23aa      	movs	r3, #170	; 0xaa
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	2101      	movs	r1, #1
 8001d78:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	0011      	movs	r1, r2
 8001d82:	0018      	movs	r0, r3
 8001d84:	f004 f9ba 	bl	80060fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	23aa      	movs	r3, #170	; 0xaa
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	2100      	movs	r1, #0
 8001d90:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	200b      	movs	r0, #11
 8001daa:	183b      	adds	r3, r7, r0
 8001dac:	1c0a      	adds	r2, r1, #0
 8001dae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	0001      	movs	r1, r0
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2207      	movs	r2, #7
 8001db8:	401a      	ands	r2, r3
 8001dba:	0013      	movs	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	189b      	adds	r3, r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	3369      	adds	r3, #105	; 0x69
 8001dc4:	33ff      	adds	r3, #255	; 0xff
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	18d3      	adds	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2200      	movs	r2, #0
 8001de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2207      	movs	r2, #7
 8001dea:	4013      	ands	r3, r2
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2207      	movs	r2, #7
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d107      	bne.n	8001e0c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	0011      	movs	r1, r2
 8001e04:	0018      	movs	r0, r3
 8001e06:	f004 fb39 	bl	800647c <USB_EPStartXfer>
 8001e0a:	e006      	b.n	8001e1a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	0011      	movs	r1, r2
 8001e14:	0018      	movs	r0, r3
 8001e16:	f004 fb31 	bl	800647c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b006      	add	sp, #24
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	200b      	movs	r0, #11
 8001e32:	183b      	adds	r3, r7, r0
 8001e34:	1c0a      	adds	r2, r1, #0
 8001e36:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e38:	183b      	adds	r3, r7, r0
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2207      	movs	r2, #7
 8001e3e:	4013      	ands	r3, r2
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	0013      	movs	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	189b      	adds	r3, r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	18d3      	adds	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2224      	movs	r2, #36	; 0x24
 8001e60:	2101      	movs	r1, #1
 8001e62:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2201      	movs	r2, #1
 8001e74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2207      	movs	r2, #7
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d107      	bne.n	8001e9e <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f004 faf0 	bl	800647c <USB_EPStartXfer>
 8001e9c:	e006      	b.n	8001eac <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f004 fae8 	bl	800647c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b006      	add	sp, #24
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	000a      	movs	r2, r1
 8001ec0:	1cfb      	adds	r3, r7, #3
 8001ec2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ec4:	1cfb      	adds	r3, r7, #3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2207      	movs	r2, #7
 8001eca:	401a      	ands	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d901      	bls.n	8001ed8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e046      	b.n	8001f66 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ed8:	1cfb      	adds	r3, r7, #3
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da0f      	bge.n	8001f02 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee2:	1cfb      	adds	r3, r7, #3
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	4013      	ands	r3, r2
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	0013      	movs	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	189b      	adds	r3, r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	18d3      	adds	r3, r2, r3
 8001ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2201      	movs	r2, #1
 8001efe:	705a      	strb	r2, [r3, #1]
 8001f00:	e00d      	b.n	8001f1e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f02:	1cfb      	adds	r3, r7, #3
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	0013      	movs	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	189b      	adds	r3, r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	3369      	adds	r3, #105	; 0x69
 8001f10:	33ff      	adds	r3, #255	; 0xff
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	18d3      	adds	r3, r2, r3
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f24:	1cfb      	adds	r3, r7, #3
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2207      	movs	r2, #7
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	23aa      	movs	r3, #170	; 0xaa
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_PCD_EP_SetStall+0x8c>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e011      	b.n	8001f66 <HAL_PCD_EP_SetStall+0xb0>
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	23aa      	movs	r3, #170	; 0xaa
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	2101      	movs	r1, #1
 8001f4a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f005 fb4b 	bl	80075f0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	23aa      	movs	r3, #170	; 0xaa
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	2100      	movs	r1, #0
 8001f62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	0018      	movs	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b084      	sub	sp, #16
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	000a      	movs	r2, r1
 8001f78:	1cfb      	adds	r3, r7, #3
 8001f7a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f7c:	1cfb      	adds	r3, r7, #3
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	220f      	movs	r2, #15
 8001f82:	401a      	ands	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d901      	bls.n	8001f90 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e048      	b.n	8002022 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f90:	1cfb      	adds	r3, r7, #3
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	da0f      	bge.n	8001fba <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9a:	1cfb      	adds	r3, r7, #3
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	189b      	adds	r3, r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	18d3      	adds	r3, r2, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	705a      	strb	r2, [r3, #1]
 8001fb8:	e00f      	b.n	8001fda <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	1cfb      	adds	r3, r7, #3
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	0013      	movs	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	189b      	adds	r3, r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	3369      	adds	r3, #105	; 0x69
 8001fcc:	33ff      	adds	r3, #255	; 0xff
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	18d3      	adds	r3, r2, r3
 8001fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe0:	1cfb      	adds	r3, r7, #3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	23aa      	movs	r3, #170	; 0xaa
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	5cd3      	ldrb	r3, [r2, r3]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_PCD_EP_ClrStall+0x90>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e011      	b.n	8002022 <HAL_PCD_EP_ClrStall+0xb4>
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	23aa      	movs	r3, #170	; 0xaa
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	2101      	movs	r1, #1
 8002006:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	0011      	movs	r1, r2
 8002010:	0018      	movs	r0, r3
 8002012:	f005 fb3d 	bl	8007690 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	23aa      	movs	r3, #170	; 0xaa
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	2100      	movs	r1, #0
 800201e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b004      	add	sp, #16
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800202c:	b5b0      	push	{r4, r5, r7, lr}
 800202e:	b096      	sub	sp, #88	; 0x58
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002034:	f000 fbd8 	bl	80027e8 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2056      	movs	r0, #86	; 0x56
 800203e:	183b      	adds	r3, r7, r0
 8002040:	2144      	movs	r1, #68	; 0x44
 8002042:	5a52      	ldrh	r2, [r2, r1]
 8002044:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002046:	183b      	adds	r3, r7, r0
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	2455      	movs	r4, #85	; 0x55
 800204e:	193b      	adds	r3, r7, r4
 8002050:	210f      	movs	r1, #15
 8002052:	400a      	ands	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002056:	193b      	adds	r3, r7, r4
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d000      	beq.n	8002060 <PCD_EP_ISR_Handler+0x34>
 800205e:	e179      	b.n	8002354 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002060:	183b      	adds	r3, r7, r0
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	4013      	ands	r3, r2
 8002068:	d154      	bne.n	8002114 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29a      	uxth	r2, r3
 8002072:	200e      	movs	r0, #14
 8002074:	183b      	adds	r3, r7, r0
 8002076:	49af      	ldr	r1, [pc, #700]	; (8002334 <PCD_EP_ISR_Handler+0x308>)
 8002078:	400a      	ands	r2, r1
 800207a:	801a      	strh	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	183a      	adds	r2, r7, r0
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	49ac      	ldr	r1, [pc, #688]	; (8002338 <PCD_EP_ISR_Handler+0x30c>)
 8002086:	430a      	orrs	r2, r1
 8002088:	b292      	uxth	r2, r2
 800208a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3328      	adds	r3, #40	; 0x28
 8002090:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2250      	movs	r2, #80	; 0x50
 8002098:	5a9b      	ldrh	r3, [r3, r2]
 800209a:	b29b      	uxth	r3, r3
 800209c:	001a      	movs	r2, r3
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	18d2      	adds	r2, r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	4aa3      	ldr	r2, [pc, #652]	; (800233c <PCD_EP_ISR_Handler+0x310>)
 80020ae:	4694      	mov	ip, r2
 80020b0:	4463      	add	r3, ip
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	059b      	lsls	r3, r3, #22
 80020b6:	0d9a      	lsrs	r2, r3, #22
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020be:	695a      	ldr	r2, [r3, #20]
 80020c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	18d2      	adds	r2, r2, r3
 80020c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2100      	movs	r1, #0
 80020ce:	0018      	movs	r0, r3
 80020d0:	f007 f9a2 	bl	8009418 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	5c9b      	ldrb	r3, [r3, r2]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <PCD_EP_ISR_Handler+0xb8>
 80020e0:	f000 fb82 	bl	80027e8 <PCD_EP_ISR_Handler+0x7bc>
 80020e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <PCD_EP_ISR_Handler+0xc4>
 80020ec:	f000 fb7c 	bl	80027e8 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	; 0x24
 80020f4:	5c9b      	ldrb	r3, [r3, r2]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	4252      	negs	r2, r2
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b291      	uxth	r1, r2
 8002106:	224c      	movs	r2, #76	; 0x4c
 8002108:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2224      	movs	r2, #36	; 0x24
 800210e:	2100      	movs	r1, #0
 8002110:	5499      	strb	r1, [r3, r2]
 8002112:	e369      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3369      	adds	r3, #105	; 0x69
 8002118:	33ff      	adds	r3, #255	; 0xff
 800211a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2152      	movs	r1, #82	; 0x52
 8002122:	187b      	adds	r3, r7, r1
 8002124:	8812      	ldrh	r2, [r2, #0]
 8002126:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002128:	187b      	adds	r3, r7, r1
 800212a:	881a      	ldrh	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	4013      	ands	r3, r2
 8002132:	d037      	beq.n	80021a4 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2250      	movs	r2, #80	; 0x50
 800213a:	5a9b      	ldrh	r3, [r3, r2]
 800213c:	b29b      	uxth	r3, r3
 800213e:	001a      	movs	r2, r3
 8002140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	18d2      	adds	r2, r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	18d3      	adds	r3, r2, r3
 800214e:	4a7c      	ldr	r2, [pc, #496]	; (8002340 <PCD_EP_ISR_Handler+0x314>)
 8002150:	4694      	mov	ip, r2
 8002152:	4463      	add	r3, ip
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	059b      	lsls	r3, r3, #22
 8002158:	0d9a      	lsrs	r2, r3, #22
 800215a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800215c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	22ac      	movs	r2, #172	; 0xac
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	1899      	adds	r1, r3, r2
 800216a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800216c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002170:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002172:	b29b      	uxth	r3, r3
 8002174:	f005 fbba 	bl	80078ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2010      	movs	r0, #16
 8002182:	183b      	adds	r3, r7, r0
 8002184:	496f      	ldr	r1, [pc, #444]	; (8002344 <PCD_EP_ISR_Handler+0x318>)
 8002186:	400a      	ands	r2, r1
 8002188:	801a      	strh	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	183a      	adds	r2, r7, r0
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	430a      	orrs	r2, r1
 8002196:	b292      	uxth	r2, r2
 8002198:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f007 f905 	bl	80093ac <HAL_PCD_SetupStageCallback>
 80021a2:	e321      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021a4:	2352      	movs	r3, #82	; 0x52
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2200      	movs	r2, #0
 80021aa:	5e9b      	ldrsh	r3, [r3, r2]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db00      	blt.n	80021b2 <PCD_EP_ISR_Handler+0x186>
 80021b0:	e31a      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	201e      	movs	r0, #30
 80021bc:	183b      	adds	r3, r7, r0
 80021be:	4961      	ldr	r1, [pc, #388]	; (8002344 <PCD_EP_ISR_Handler+0x318>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	801a      	strh	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	183a      	adds	r2, r7, r0
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	430a      	orrs	r2, r1
 80021d0:	b292      	uxth	r2, r2
 80021d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2250      	movs	r2, #80	; 0x50
 80021da:	5a9b      	ldrh	r3, [r3, r2]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	001a      	movs	r2, r3
 80021e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	18d2      	adds	r2, r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	4a54      	ldr	r2, [pc, #336]	; (8002340 <PCD_EP_ISR_Handler+0x314>)
 80021f0:	4694      	mov	ip, r2
 80021f2:	4463      	add	r3, ip
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	059b      	lsls	r3, r3, #22
 80021f8:	0d9a      	lsrs	r2, r3, #22
 80021fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d01a      	beq.n	800223c <PCD_EP_ISR_Handler+0x210>
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002218:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800221a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800221e:	b29b      	uxth	r3, r3
 8002220:	f005 fb64 	bl	80078ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	18d2      	adds	r2, r2, r3
 800222e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002230:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2100      	movs	r1, #0
 8002236:	0018      	movs	r0, r3
 8002238:	f007 f8cd 	bl	80093d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b29b      	uxth	r3, r3
 8002244:	001a      	movs	r2, r3
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d000      	beq.n	8002250 <PCD_EP_ISR_Handler+0x224>
 800224e:	e2cb      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2250      	movs	r2, #80	; 0x50
 800225c:	5a9b      	ldrh	r3, [r3, r2]
 800225e:	b29b      	uxth	r3, r3
 8002260:	001a      	movs	r2, r3
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	189b      	adds	r3, r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4a35      	ldr	r2, [pc, #212]	; (8002340 <PCD_EP_ISR_Handler+0x314>)
 800226c:	4694      	mov	ip, r2
 800226e:	4463      	add	r3, ip
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d110      	bne.n	800229c <PCD_EP_ISR_Handler+0x270>
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4a31      	ldr	r2, [pc, #196]	; (8002348 <PCD_EP_ISR_Handler+0x31c>)
 8002282:	4013      	ands	r3, r2
 8002284:	b29a      	uxth	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	801a      	strh	r2, [r3, #0]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4a29      	ldr	r2, [pc, #164]	; (8002338 <PCD_EP_ISR_Handler+0x30c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	b29a      	uxth	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	801a      	strh	r2, [r3, #0]
 800229a:	e02b      	b.n	80022f4 <PCD_EP_ISR_Handler+0x2c8>
 800229c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	2b3e      	cmp	r3, #62	; 0x3e
 80022a2:	d812      	bhi.n	80022ca <PCD_EP_ISR_Handler+0x29e>
 80022a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	085b      	lsrs	r3, r3, #1
 80022aa:	647b      	str	r3, [r7, #68]	; 0x44
 80022ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	d002      	beq.n	80022bc <PCD_EP_ISR_Handler+0x290>
 80022b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b8:	3301      	adds	r3, #1
 80022ba:	647b      	str	r3, [r7, #68]	; 0x44
 80022bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022be:	b29b      	uxth	r3, r3
 80022c0:	029b      	lsls	r3, r3, #10
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	e014      	b.n	80022f4 <PCD_EP_ISR_Handler+0x2c8>
 80022ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	647b      	str	r3, [r7, #68]	; 0x44
 80022d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	221f      	movs	r2, #31
 80022d8:	4013      	ands	r3, r2
 80022da:	d102      	bne.n	80022e2 <PCD_EP_ISR_Handler+0x2b6>
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	3b01      	subs	r3, #1
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
 80022e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <PCD_EP_ISR_Handler+0x30c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	2012      	movs	r0, #18
 80022fe:	183b      	adds	r3, r7, r0
 8002300:	4912      	ldr	r1, [pc, #72]	; (800234c <PCD_EP_ISR_Handler+0x320>)
 8002302:	400a      	ands	r2, r1
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	183b      	adds	r3, r7, r0
 8002308:	183a      	adds	r2, r7, r0
 800230a:	8812      	ldrh	r2, [r2, #0]
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	0149      	lsls	r1, r1, #5
 8002310:	404a      	eors	r2, r1
 8002312:	801a      	strh	r2, [r3, #0]
 8002314:	183b      	adds	r3, r7, r0
 8002316:	183a      	adds	r2, r7, r0
 8002318:	8812      	ldrh	r2, [r2, #0]
 800231a:	2180      	movs	r1, #128	; 0x80
 800231c:	0189      	lsls	r1, r1, #6
 800231e:	404a      	eors	r2, r1
 8002320:	801a      	strh	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	183a      	adds	r2, r7, r0
 8002328:	8812      	ldrh	r2, [r2, #0]
 800232a:	4909      	ldr	r1, [pc, #36]	; (8002350 <PCD_EP_ISR_Handler+0x324>)
 800232c:	430a      	orrs	r2, r1
 800232e:	b292      	uxth	r2, r2
 8002330:	801a      	strh	r2, [r3, #0]
 8002332:	e259      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
 8002334:	ffff8f0f 	.word	0xffff8f0f
 8002338:	ffff8000 	.word	0xffff8000
 800233c:	00000402 	.word	0x00000402
 8002340:	00000406 	.word	0x00000406
 8002344:	00000f8f 	.word	0x00000f8f
 8002348:	ffff83ff 	.word	0xffff83ff
 800234c:	ffffbf8f 	.word	0xffffbf8f
 8002350:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	001a      	movs	r2, r3
 800235a:	2055      	movs	r0, #85	; 0x55
 800235c:	183b      	adds	r3, r7, r0
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	18d2      	adds	r2, r2, r3
 8002364:	2152      	movs	r1, #82	; 0x52
 8002366:	187b      	adds	r3, r7, r1
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2200      	movs	r2, #0
 8002370:	5e9b      	ldrsh	r3, [r3, r2]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db00      	blt.n	8002378 <PCD_EP_ISR_Handler+0x34c>
 8002376:	e0fa      	b.n	800256e <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	001a      	movs	r2, r3
 800237e:	183b      	adds	r3, r7, r0
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	18d3      	adds	r3, r2, r3
 8002386:	881b      	ldrh	r3, [r3, #0]
 8002388:	b29a      	uxth	r2, r3
 800238a:	2450      	movs	r4, #80	; 0x50
 800238c:	193b      	adds	r3, r7, r4
 800238e:	49cf      	ldr	r1, [pc, #828]	; (80026cc <PCD_EP_ISR_Handler+0x6a0>)
 8002390:	400a      	ands	r2, r1
 8002392:	801a      	strh	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	001a      	movs	r2, r3
 800239a:	183b      	adds	r3, r7, r0
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	18d3      	adds	r3, r2, r3
 80023a2:	193a      	adds	r2, r7, r4
 80023a4:	8812      	ldrh	r2, [r2, #0]
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	430a      	orrs	r2, r1
 80023aa:	b292      	uxth	r2, r2
 80023ac:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80023ae:	183b      	adds	r3, r7, r0
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	0013      	movs	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	189b      	adds	r3, r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	3369      	adds	r3, #105	; 0x69
 80023bc:	33ff      	adds	r3, #255	; 0xff
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	18d3      	adds	r3, r2, r3
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80023c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c6:	7b1b      	ldrb	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d125      	bne.n	8002418 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2250      	movs	r2, #80	; 0x50
 80023d2:	5a9b      	ldrh	r3, [r3, r2]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	001a      	movs	r2, r3
 80023d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	18d2      	adds	r2, r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	18d3      	adds	r3, r2, r3
 80023e6:	4aba      	ldr	r2, [pc, #744]	; (80026d0 <PCD_EP_ISR_Handler+0x6a4>)
 80023e8:	4694      	mov	ip, r2
 80023ea:	4463      	add	r3, ip
 80023ec:	881a      	ldrh	r2, [r3, #0]
 80023ee:	2448      	movs	r4, #72	; 0x48
 80023f0:	193b      	adds	r3, r7, r4
 80023f2:	0592      	lsls	r2, r2, #22
 80023f4:	0d92      	lsrs	r2, r2, #22
 80023f6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80023f8:	193b      	adds	r3, r7, r4
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d100      	bne.n	8002402 <PCD_EP_ISR_Handler+0x3d6>
 8002400:	e08d      	b.n	800251e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	6959      	ldr	r1, [r3, #20]
 800240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240c:	88da      	ldrh	r2, [r3, #6]
 800240e:	193b      	adds	r3, r7, r4
 8002410:	881b      	ldrh	r3, [r3, #0]
 8002412:	f005 fa6b 	bl	80078ec <USB_ReadPMA>
 8002416:	e082      	b.n	800251e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	78db      	ldrb	r3, [r3, #3]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d10c      	bne.n	800243a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002420:	2348      	movs	r3, #72	; 0x48
 8002422:	18fc      	adds	r4, r7, r3
 8002424:	2352      	movs	r3, #82	; 0x52
 8002426:	18fb      	adds	r3, r7, r3
 8002428:	881a      	ldrh	r2, [r3, #0]
 800242a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	0018      	movs	r0, r3
 8002430:	f000 f9ee 	bl	8002810 <HAL_PCD_EP_DB_Receive>
 8002434:	0003      	movs	r3, r0
 8002436:	8023      	strh	r3, [r4, #0]
 8002438:	e071      	b.n	800251e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	001a      	movs	r2, r3
 8002440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29a      	uxth	r2, r3
 800244c:	204a      	movs	r0, #74	; 0x4a
 800244e:	183b      	adds	r3, r7, r0
 8002450:	49a0      	ldr	r1, [pc, #640]	; (80026d4 <PCD_EP_ISR_Handler+0x6a8>)
 8002452:	400a      	ands	r2, r1
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	001a      	movs	r2, r3
 800245c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	18d3      	adds	r3, r2, r3
 8002464:	183a      	adds	r2, r7, r0
 8002466:	8812      	ldrh	r2, [r2, #0]
 8002468:	499b      	ldr	r1, [pc, #620]	; (80026d8 <PCD_EP_ISR_Handler+0x6ac>)
 800246a:	430a      	orrs	r2, r1
 800246c:	b292      	uxth	r2, r2
 800246e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	001a      	movs	r2, r3
 8002476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	001a      	movs	r2, r3
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	01db      	lsls	r3, r3, #7
 8002488:	4013      	ands	r3, r2
 800248a:	d024      	beq.n	80024d6 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2250      	movs	r2, #80	; 0x50
 8002492:	5a9b      	ldrh	r3, [r3, r2]
 8002494:	b29b      	uxth	r3, r3
 8002496:	001a      	movs	r2, r3
 8002498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	18d2      	adds	r2, r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	18d3      	adds	r3, r2, r3
 80024a6:	4a8d      	ldr	r2, [pc, #564]	; (80026dc <PCD_EP_ISR_Handler+0x6b0>)
 80024a8:	4694      	mov	ip, r2
 80024aa:	4463      	add	r3, ip
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	2448      	movs	r4, #72	; 0x48
 80024b0:	193b      	adds	r3, r7, r4
 80024b2:	0592      	lsls	r2, r2, #22
 80024b4:	0d92      	lsrs	r2, r2, #22
 80024b6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80024b8:	193b      	adds	r3, r7, r4
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02e      	beq.n	800251e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c6:	6959      	ldr	r1, [r3, #20]
 80024c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ca:	891a      	ldrh	r2, [r3, #8]
 80024cc:	193b      	adds	r3, r7, r4
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f005 fa0c 	bl	80078ec <USB_ReadPMA>
 80024d4:	e023      	b.n	800251e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2250      	movs	r2, #80	; 0x50
 80024dc:	5a9b      	ldrh	r3, [r3, r2]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	001a      	movs	r2, r3
 80024e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	18d2      	adds	r2, r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	18d3      	adds	r3, r2, r3
 80024f0:	4a77      	ldr	r2, [pc, #476]	; (80026d0 <PCD_EP_ISR_Handler+0x6a4>)
 80024f2:	4694      	mov	ip, r2
 80024f4:	4463      	add	r3, ip
 80024f6:	881a      	ldrh	r2, [r3, #0]
 80024f8:	2448      	movs	r4, #72	; 0x48
 80024fa:	193b      	adds	r3, r7, r4
 80024fc:	0592      	lsls	r2, r2, #22
 80024fe:	0d92      	lsrs	r2, r2, #22
 8002500:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002502:	193b      	adds	r3, r7, r4
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002510:	6959      	ldr	r1, [r3, #20]
 8002512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002514:	895a      	ldrh	r2, [r3, #10]
 8002516:	193b      	adds	r3, r7, r4
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	f005 f9e7 	bl	80078ec <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800251e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	2148      	movs	r1, #72	; 0x48
 8002524:	187b      	adds	r3, r7, r1
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	18d2      	adds	r2, r2, r3
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	187b      	adds	r3, r7, r1
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	18d2      	adds	r2, r2, r3
 8002538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <PCD_EP_ISR_Handler+0x524>
 8002544:	187b      	adds	r3, r7, r1
 8002546:	881a      	ldrh	r2, [r3, #0]
 8002548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	429a      	cmp	r2, r3
 800254e:	d207      	bcs.n	8002560 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0011      	movs	r1, r2
 8002558:	0018      	movs	r0, r3
 800255a:	f006 ff3c 	bl	80093d6 <HAL_PCD_DataOutStageCallback>
 800255e:	e006      	b.n	800256e <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002566:	0011      	movs	r1, r2
 8002568:	0018      	movs	r0, r3
 800256a:	f003 ff87 	bl	800647c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800256e:	2452      	movs	r4, #82	; 0x52
 8002570:	193b      	adds	r3, r7, r4
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	4013      	ands	r3, r2
 8002578:	d100      	bne.n	800257c <PCD_EP_ISR_Handler+0x550>
 800257a:	e135      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800257c:	2055      	movs	r0, #85	; 0x55
 800257e:	183b      	adds	r3, r7, r0
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	1c5a      	adds	r2, r3, #1
 8002584:	0013      	movs	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	189b      	adds	r3, r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	18d3      	adds	r3, r2, r3
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	001a      	movs	r2, r3
 8002598:	183b      	adds	r3, r7, r0
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	18d3      	adds	r3, r2, r3
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	2542      	movs	r5, #66	; 0x42
 80025a6:	197b      	adds	r3, r7, r5
 80025a8:	494d      	ldr	r1, [pc, #308]	; (80026e0 <PCD_EP_ISR_Handler+0x6b4>)
 80025aa:	400a      	ands	r2, r1
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	001a      	movs	r2, r3
 80025b4:	183b      	adds	r3, r7, r0
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	18d3      	adds	r3, r2, r3
 80025bc:	197a      	adds	r2, r7, r5
 80025be:	8812      	ldrh	r2, [r2, #0]
 80025c0:	4948      	ldr	r1, [pc, #288]	; (80026e4 <PCD_EP_ISR_Handler+0x6b8>)
 80025c2:	430a      	orrs	r2, r1
 80025c4:	b292      	uxth	r2, r2
 80025c6:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d100      	bne.n	80025d2 <PCD_EP_ISR_Handler+0x5a6>
 80025d0:	e0ad      	b.n	800272e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80025d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025d8:	193b      	adds	r3, r7, r4
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2240      	movs	r2, #64	; 0x40
 80025de:	4013      	ands	r3, r2
 80025e0:	d046      	beq.n	8002670 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d125      	bne.n	8002636 <PCD_EP_ISR_Handler+0x60a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2250      	movs	r2, #80	; 0x50
 80025f6:	5a9b      	ldrh	r3, [r3, r2]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	001a      	movs	r2, r3
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	189b      	adds	r3, r3, r2
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	00da      	lsls	r2, r3, #3
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	18d3      	adds	r3, r2, r3
 800260c:	4a33      	ldr	r2, [pc, #204]	; (80026dc <PCD_EP_ISR_Handler+0x6b0>)
 800260e:	4694      	mov	ip, r2
 8002610:	4463      	add	r3, ip
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <PCD_EP_ISR_Handler+0x6bc>)
 800261c:	4013      	ands	r3, r2
 800261e:	b29a      	uxth	r2, r3
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	801a      	strh	r2, [r3, #0]
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <PCD_EP_ISR_Handler+0x6b8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	b29a      	uxth	r2, r3
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	e073      	b.n	800271e <PCD_EP_ISR_Handler+0x6f2>
 8002636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d16f      	bne.n	800271e <PCD_EP_ISR_Handler+0x6f2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2250      	movs	r2, #80	; 0x50
 800264a:	5a9b      	ldrh	r3, [r3, r2]
 800264c:	b29b      	uxth	r3, r3
 800264e:	001a      	movs	r2, r3
 8002650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002652:	189b      	adds	r3, r3, r2
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	00da      	lsls	r2, r3, #3
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	18d3      	adds	r3, r2, r3
 8002660:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <PCD_EP_ISR_Handler+0x6b0>)
 8002662:	4694      	mov	ip, r2
 8002664:	4463      	add	r3, ip
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]
 800266e:	e056      	b.n	800271e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d136      	bne.n	80026ec <PCD_EP_ISR_Handler+0x6c0>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2250      	movs	r2, #80	; 0x50
 800268a:	5a9b      	ldrh	r3, [r3, r2]
 800268c:	b29b      	uxth	r3, r3
 800268e:	001a      	movs	r2, r3
 8002690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002692:	189b      	adds	r3, r3, r2
 8002694:	637b      	str	r3, [r7, #52]	; 0x34
 8002696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	00da      	lsls	r2, r3, #3
 800269c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269e:	18d3      	adds	r3, r2, r3
 80026a0:	4a0b      	ldr	r2, [pc, #44]	; (80026d0 <PCD_EP_ISR_Handler+0x6a4>)
 80026a2:	4694      	mov	ip, r2
 80026a4:	4463      	add	r3, ip
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <PCD_EP_ISR_Handler+0x6bc>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	801a      	strh	r2, [r3, #0]
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <PCD_EP_ISR_Handler+0x6b8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	801a      	strh	r2, [r3, #0]
 80026c8:	e029      	b.n	800271e <PCD_EP_ISR_Handler+0x6f2>
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	00000f8f 	.word	0x00000f8f
 80026d0:	00000406 	.word	0x00000406
 80026d4:	ffff8f8f 	.word	0xffff8f8f
 80026d8:	ffff80c0 	.word	0xffff80c0
 80026dc:	00000402 	.word	0x00000402
 80026e0:	ffff8f0f 	.word	0xffff8f0f
 80026e4:	ffff8000 	.word	0xffff8000
 80026e8:	ffff83ff 	.word	0xffff83ff
 80026ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d114      	bne.n	800271e <PCD_EP_ISR_Handler+0x6f2>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2250      	movs	r2, #80	; 0x50
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	001a      	movs	r2, r3
 8002700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002702:	189b      	adds	r3, r3, r2
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	00da      	lsls	r2, r3, #3
 800270c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270e:	18d3      	adds	r3, r2, r3
 8002710:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <PCD_EP_ISR_Handler+0x7dc>)
 8002712:	4694      	mov	ip, r2
 8002714:	4463      	add	r3, ip
 8002716:	63bb      	str	r3, [r7, #56]	; 0x38
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	2200      	movs	r2, #0
 800271c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002720:	781a      	ldrb	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f006 fe76 	bl	8009418 <HAL_PCD_DataInStageCallback>
 800272c:	e05c      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800272e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002730:	78db      	ldrb	r3, [r3, #3]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d150      	bne.n	80027d8 <PCD_EP_ISR_Handler+0x7ac>
 8002736:	2352      	movs	r3, #82	; 0x52
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	881a      	ldrh	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4013      	ands	r3, r2
 8002742:	d149      	bne.n	80027d8 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2250      	movs	r2, #80	; 0x50
 800274a:	5a9b      	ldrh	r3, [r3, r2]
 800274c:	b29b      	uxth	r3, r3
 800274e:	001a      	movs	r2, r3
 8002750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	18d2      	adds	r2, r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	18d3      	adds	r3, r2, r3
 800275e:	4a2b      	ldr	r2, [pc, #172]	; (800280c <PCD_EP_ISR_Handler+0x7e0>)
 8002760:	4694      	mov	ip, r2
 8002762:	4463      	add	r3, ip
 8002764:	881a      	ldrh	r2, [r3, #0]
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	187b      	adds	r3, r7, r1
 800276a:	0592      	lsls	r2, r2, #22
 800276c:	0d92      	lsrs	r2, r2, #22
 800276e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002772:	699a      	ldr	r2, [r3, #24]
 8002774:	187b      	adds	r3, r7, r1
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d907      	bls.n	800278c <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800277c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	187b      	adds	r3, r7, r1
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	1ad2      	subs	r2, r2, r3
 8002786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002788:	619a      	str	r2, [r3, #24]
 800278a:	e002      	b.n	8002792 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 800278c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800279a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0011      	movs	r1, r2
 80027a2:	0018      	movs	r0, r3
 80027a4:	f006 fe38 	bl	8009418 <HAL_PCD_DataInStageCallback>
 80027a8:	e01e      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80027aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	18d2      	adds	r2, r2, r3
 80027b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80027ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	18d2      	adds	r2, r2, r3
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ce:	0011      	movs	r1, r2
 80027d0:	0018      	movs	r0, r3
 80027d2:	f003 fe53 	bl	800647c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80027d6:	e007      	b.n	80027e8 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80027d8:	2352      	movs	r3, #82	; 0x52
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 f930 	bl	8002a48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2244      	movs	r2, #68	; 0x44
 80027ee:	5a9b      	ldrh	r3, [r3, r2]
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b21b      	sxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da01      	bge.n	80027fc <PCD_EP_ISR_Handler+0x7d0>
 80027f8:	f7ff fc1e 	bl	8002038 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b016      	add	sp, #88	; 0x58
 8002804:	bdb0      	pop	{r4, r5, r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	00000406 	.word	0x00000406
 800280c:	00000402 	.word	0x00000402

08002810 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	1dbb      	adds	r3, r7, #6
 800281c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800281e:	1dbb      	adds	r3, r7, #6
 8002820:	881a      	ldrh	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	01db      	lsls	r3, r3, #7
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_PCD_EP_DB_Receive+0x1c>
 800282a:	e07d      	b.n	8002928 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2250      	movs	r2, #80	; 0x50
 8002832:	5a9b      	ldrh	r3, [r3, r2]
 8002834:	b29b      	uxth	r3, r3
 8002836:	001a      	movs	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	18d2      	adds	r2, r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <HAL_PCD_EP_DB_Receive+0x220>)
 8002848:	4694      	mov	ip, r2
 800284a:	4463      	add	r3, ip
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	211a      	movs	r1, #26
 8002850:	187b      	adds	r3, r7, r1
 8002852:	0592      	lsls	r2, r2, #22
 8002854:	0d92      	lsrs	r2, r2, #22
 8002856:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	187b      	adds	r3, r7, r1
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d307      	bcc.n	8002874 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	187b      	adds	r3, r7, r1
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	1ad2      	subs	r2, r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	619a      	str	r2, [r3, #24]
 8002872:	e002      	b.n	800287a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2200      	movs	r2, #0
 8002878:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d121      	bne.n	80028c6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	001a      	movs	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	18d3      	adds	r3, r2, r3
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29a      	uxth	r2, r3
 8002894:	2018      	movs	r0, #24
 8002896:	183b      	adds	r3, r7, r0
 8002898:	4966      	ldr	r1, [pc, #408]	; (8002a34 <HAL_PCD_EP_DB_Receive+0x224>)
 800289a:	400a      	ands	r2, r1
 800289c:	801a      	strh	r2, [r3, #0]
 800289e:	183b      	adds	r3, r7, r0
 80028a0:	183a      	adds	r2, r7, r0
 80028a2:	8812      	ldrh	r2, [r2, #0]
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0189      	lsls	r1, r1, #6
 80028a8:	404a      	eors	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	001a      	movs	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	183a      	adds	r2, r7, r0
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	495e      	ldr	r1, [pc, #376]	; (8002a38 <HAL_PCD_EP_DB_Receive+0x228>)
 80028c0:	430a      	orrs	r2, r1
 80028c2:	b292      	uxth	r2, r2
 80028c4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028c6:	1dbb      	adds	r3, r7, #6
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	4013      	ands	r3, r2
 80028ce:	d01a      	beq.n	8002906 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	001a      	movs	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	18d3      	adds	r3, r2, r3
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	2016      	movs	r0, #22
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	4955      	ldr	r1, [pc, #340]	; (8002a3c <HAL_PCD_EP_DB_Receive+0x22c>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	001a      	movs	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	18d3      	adds	r3, r2, r3
 80028fa:	183a      	adds	r2, r7, r0
 80028fc:	8812      	ldrh	r2, [r2, #0]
 80028fe:	4950      	ldr	r1, [pc, #320]	; (8002a40 <HAL_PCD_EP_DB_Receive+0x230>)
 8002900:	430a      	orrs	r2, r1
 8002902:	b292      	uxth	r2, r2
 8002904:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002906:	241a      	movs	r4, #26
 8002908:	193b      	adds	r3, r7, r4
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d100      	bne.n	8002912 <HAL_PCD_EP_DB_Receive+0x102>
 8002910:	e086      	b.n	8002a20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	6959      	ldr	r1, [r3, #20]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	891a      	ldrh	r2, [r3, #8]
 800291e:	193b      	adds	r3, r7, r4
 8002920:	881b      	ldrh	r3, [r3, #0]
 8002922:	f004 ffe3 	bl	80078ec <USB_ReadPMA>
 8002926:	e07b      	b.n	8002a20 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2250      	movs	r2, #80	; 0x50
 800292e:	5a9b      	ldrh	r3, [r3, r2]
 8002930:	b29b      	uxth	r3, r3
 8002932:	001a      	movs	r2, r3
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	18d2      	adds	r2, r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	18d3      	adds	r3, r2, r3
 8002942:	4a40      	ldr	r2, [pc, #256]	; (8002a44 <HAL_PCD_EP_DB_Receive+0x234>)
 8002944:	4694      	mov	ip, r2
 8002946:	4463      	add	r3, ip
 8002948:	881a      	ldrh	r2, [r3, #0]
 800294a:	211a      	movs	r1, #26
 800294c:	187b      	adds	r3, r7, r1
 800294e:	0592      	lsls	r2, r2, #22
 8002950:	0d92      	lsrs	r2, r2, #22
 8002952:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	699a      	ldr	r2, [r3, #24]
 8002958:	187b      	adds	r3, r7, r1
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d307      	bcc.n	8002970 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	187b      	adds	r3, r7, r1
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	619a      	str	r2, [r3, #24]
 800296e:	e002      	b.n	8002976 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d121      	bne.n	80029c2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	001a      	movs	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29a      	uxth	r2, r3
 8002990:	201e      	movs	r0, #30
 8002992:	183b      	adds	r3, r7, r0
 8002994:	4927      	ldr	r1, [pc, #156]	; (8002a34 <HAL_PCD_EP_DB_Receive+0x224>)
 8002996:	400a      	ands	r2, r1
 8002998:	801a      	strh	r2, [r3, #0]
 800299a:	183b      	adds	r3, r7, r0
 800299c:	183a      	adds	r2, r7, r0
 800299e:	8812      	ldrh	r2, [r2, #0]
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0189      	lsls	r1, r1, #6
 80029a4:	404a      	eors	r2, r1
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	001a      	movs	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	18d3      	adds	r3, r2, r3
 80029b6:	183a      	adds	r2, r7, r0
 80029b8:	8812      	ldrh	r2, [r2, #0]
 80029ba:	491f      	ldr	r1, [pc, #124]	; (8002a38 <HAL_PCD_EP_DB_Receive+0x228>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	b292      	uxth	r2, r2
 80029c0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80029c2:	1dbb      	adds	r3, r7, #6
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	4013      	ands	r3, r2
 80029ca:	d11a      	bne.n	8002a02 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	201c      	movs	r0, #28
 80029e0:	183b      	adds	r3, r7, r0
 80029e2:	4916      	ldr	r1, [pc, #88]	; (8002a3c <HAL_PCD_EP_DB_Receive+0x22c>)
 80029e4:	400a      	ands	r2, r1
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	001a      	movs	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	18d3      	adds	r3, r2, r3
 80029f6:	183a      	adds	r2, r7, r0
 80029f8:	8812      	ldrh	r2, [r2, #0]
 80029fa:	4911      	ldr	r1, [pc, #68]	; (8002a40 <HAL_PCD_EP_DB_Receive+0x230>)
 80029fc:	430a      	orrs	r2, r1
 80029fe:	b292      	uxth	r2, r2
 8002a00:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002a02:	241a      	movs	r4, #26
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6818      	ldr	r0, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	6959      	ldr	r1, [r3, #20]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	895a      	ldrh	r2, [r3, #10]
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f004 ff66 	bl	80078ec <USB_ReadPMA>
    }
  }

  return count;
 8002a20:	231a      	movs	r3, #26
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	881b      	ldrh	r3, [r3, #0]
}
 8002a26:	0018      	movs	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	b009      	add	sp, #36	; 0x24
 8002a2c:	bd90      	pop	{r4, r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	00000402 	.word	0x00000402
 8002a34:	ffffbf8f 	.word	0xffffbf8f
 8002a38:	ffff8080 	.word	0xffff8080
 8002a3c:	ffff8f8f 	.word	0xffff8f8f
 8002a40:	ffff80c0 	.word	0xffff80c0
 8002a44:	00000406 	.word	0x00000406

08002a48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b0a2      	sub	sp, #136	; 0x88
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	1dbb      	adds	r3, r7, #6
 8002a54:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a56:	1dbb      	adds	r3, r7, #6
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2240      	movs	r2, #64	; 0x40
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d100      	bne.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002a60:	e1c8      	b.n	8002df4 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2250      	movs	r2, #80	; 0x50
 8002a68:	5a9b      	ldrh	r3, [r3, r2]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	18d2      	adds	r2, r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	4ad7      	ldr	r2, [pc, #860]	; (8002ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002a7e:	4694      	mov	ip, r2
 8002a80:	4463      	add	r3, ip
 8002a82:	881a      	ldrh	r2, [r3, #0]
 8002a84:	214e      	movs	r1, #78	; 0x4e
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	0592      	lsls	r2, r2, #22
 8002a8a:	0d92      	lsrs	r2, r2, #22
 8002a8c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	699a      	ldr	r2, [r3, #24]
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d907      	bls.n	8002aaa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	1ad2      	subs	r2, r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	619a      	str	r2, [r3, #24]
 8002aa8:	e002      	b.n	8002ab0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d000      	beq.n	8002aba <HAL_PCD_EP_DB_Transmit+0x72>
 8002ab8:	e0b5      	b.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	785b      	ldrb	r3, [r3, #1]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d125      	bne.n	8002b0e <HAL_PCD_EP_DB_Transmit+0xc6>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2250      	movs	r2, #80	; 0x50
 8002ace:	5a9b      	ldrh	r3, [r3, r2]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	189b      	adds	r3, r3, r2
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	00da      	lsls	r2, r3, #3
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	18d3      	adds	r3, r2, r3
 8002ae4:	4abd      	ldr	r2, [pc, #756]	; (8002ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002ae6:	4694      	mov	ip, r2
 8002ae8:	4463      	add	r3, ip
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4abb      	ldr	r2, [pc, #748]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	801a      	strh	r2, [r3, #0]
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4ab8      	ldr	r2, [pc, #736]	; (8002de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	801a      	strh	r2, [r3, #0]
 8002b0c:	e01b      	b.n	8002b46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d117      	bne.n	8002b46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2250      	movs	r2, #80	; 0x50
 8002b22:	5a9b      	ldrh	r3, [r3, r2]
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	001a      	movs	r2, r3
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	189b      	adds	r3, r3, r2
 8002b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	00da      	lsls	r2, r3, #3
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	18d3      	adds	r3, r2, r3
 8002b38:	4aa8      	ldr	r2, [pc, #672]	; (8002ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002b3a:	4694      	mov	ip, r2
 8002b3c:	4463      	add	r3, ip
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b42:	2200      	movs	r2, #0
 8002b44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	623b      	str	r3, [r7, #32]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	785b      	ldrb	r3, [r3, #1]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d125      	bne.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0x158>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2250      	movs	r2, #80	; 0x50
 8002b60:	5a9b      	ldrh	r3, [r3, r2]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	001a      	movs	r2, r3
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	00da      	lsls	r2, r3, #3
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	18d3      	adds	r3, r2, r3
 8002b76:	4a9c      	ldr	r2, [pc, #624]	; (8002de8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002b78:	4694      	mov	ip, r2
 8002b7a:	4463      	add	r3, ip
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4a96      	ldr	r2, [pc, #600]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4a93      	ldr	r2, [pc, #588]	; (8002de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e018      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d114      	bne.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2250      	movs	r2, #80	; 0x50
 8002bae:	5a9b      	ldrh	r3, [r3, r2]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	623b      	str	r3, [r7, #32]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00da      	lsls	r2, r3, #3
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	18d3      	adds	r3, r2, r3
 8002bc4:	4a88      	ldr	r2, [pc, #544]	; (8002de8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002bc6:	4694      	mov	ip, r2
 8002bc8:	4463      	add	r3, ip
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	781a      	ldrb	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f006 fc1c 	bl	8009418 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002be0:	1dbb      	adds	r3, r7, #6
 8002be2:	881a      	ldrh	r2, [r3, #0]
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	01db      	lsls	r3, r3, #7
 8002be8:	4013      	ands	r3, r2
 8002bea:	d100      	bne.n	8002bee <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002bec:	e2d4      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	18d3      	adds	r3, r2, r3
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	2012      	movs	r0, #18
 8002c02:	183b      	adds	r3, r7, r0
 8002c04:	4979      	ldr	r1, [pc, #484]	; (8002dec <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	001a      	movs	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	183a      	adds	r2, r7, r0
 8002c1a:	8812      	ldrh	r2, [r2, #0]
 8002c1c:	4974      	ldr	r1, [pc, #464]	; (8002df0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	b292      	uxth	r2, r2
 8002c22:	801a      	strh	r2, [r3, #0]
 8002c24:	e2b8      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	881a      	ldrh	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	01db      	lsls	r3, r3, #7
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d01a      	beq.n	8002c68 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	001a      	movs	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	18d3      	adds	r3, r2, r3
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	2044      	movs	r0, #68	; 0x44
 8002c46:	183b      	adds	r3, r7, r0
 8002c48:	4968      	ldr	r1, [pc, #416]	; (8002dec <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	801a      	strh	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	001a      	movs	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	18d3      	adds	r3, r2, r3
 8002c5c:	183a      	adds	r2, r7, r0
 8002c5e:	8812      	ldrh	r2, [r2, #0]
 8002c60:	4963      	ldr	r1, [pc, #396]	; (8002df0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002c62:	430a      	orrs	r2, r1
 8002c64:	b292      	uxth	r2, r2
 8002c66:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2224      	movs	r2, #36	; 0x24
 8002c6c:	5c9b      	ldrb	r3, [r3, r2]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d000      	beq.n	8002c74 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002c72:	e291      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	214e      	movs	r1, #78	; 0x4e
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	18d2      	adds	r2, r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	69da      	ldr	r2, [r3, #28]
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	18d2      	adds	r2, r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d309      	bcc.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	6a1a      	ldr	r2, [r3, #32]
 8002ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	621a      	str	r2, [r3, #32]
 8002cb0:	e016      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d108      	bne.n	8002ccc <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8002cba:	234e      	movs	r3, #78	; 0x4e
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2224      	movs	r2, #36	; 0x24
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]
 8002cca:	e009      	b.n	8002ce0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d150      	bne.n	8002d8a <HAL_PCD_EP_DB_Transmit+0x342>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2250      	movs	r2, #80	; 0x50
 8002cf4:	5a9b      	ldrh	r3, [r3, r2]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	001a      	movs	r2, r3
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfc:	189b      	adds	r3, r3, r2
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	00da      	lsls	r2, r3, #3
 8002d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d08:	18d3      	adds	r3, r2, r3
 8002d0a:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002d0c:	4694      	mov	ip, r2
 8002d0e:	4463      	add	r3, ip
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34
 8002d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d110      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8002d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	801a      	strh	r2, [r3, #0]
 8002d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d36:	801a      	strh	r2, [r3, #0]
 8002d38:	e044      	b.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d3e:	d810      	bhi.n	8002d62 <HAL_PCD_EP_DB_Transmit+0x31a>
 8002d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d002      	beq.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d50:	3301      	adds	r3, #1
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	029b      	lsls	r3, r3, #10
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	801a      	strh	r2, [r3, #0]
 8002d60:	e030      	b.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d64:	095b      	lsrs	r3, r3, #5
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6a:	221f      	movs	r2, #31
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d72:	3b01      	subs	r3, #1
 8002d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	801a      	strh	r2, [r3, #0]
 8002d88:	e01c      	b.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d118      	bne.n	8002dc4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	643b      	str	r3, [r7, #64]	; 0x40
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2250      	movs	r2, #80	; 0x50
 8002d9e:	5a9b      	ldrh	r3, [r3, r2]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	001a      	movs	r2, r3
 8002da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db2:	18d3      	adds	r3, r2, r3
 8002db4:	4a09      	ldr	r2, [pc, #36]	; (8002ddc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002db6:	4694      	mov	ip, r2
 8002db8:	4463      	add	r3, ip
 8002dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6959      	ldr	r1, [r3, #20]
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	891a      	ldrh	r2, [r3, #8]
 8002dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	f004 fd46 	bl	8007864 <USB_WritePMA>
 8002dd8:	e1de      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	00000402 	.word	0x00000402
 8002de0:	ffff83ff 	.word	0xffff83ff
 8002de4:	ffff8000 	.word	0xffff8000
 8002de8:	00000406 	.word	0x00000406
 8002dec:	ffff8f8f 	.word	0xffff8f8f
 8002df0:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2250      	movs	r2, #80	; 0x50
 8002dfa:	5a9b      	ldrh	r3, [r3, r2]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	001a      	movs	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	18d2      	adds	r2, r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	4aca      	ldr	r2, [pc, #808]	; (8003138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002e10:	4694      	mov	ip, r2
 8002e12:	4463      	add	r3, ip
 8002e14:	881a      	ldrh	r2, [r3, #0]
 8002e16:	214e      	movs	r1, #78	; 0x4e
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	0592      	lsls	r2, r2, #22
 8002e1c:	0d92      	lsrs	r2, r2, #22
 8002e1e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	699a      	ldr	r2, [r3, #24]
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	881b      	ldrh	r3, [r3, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d307      	bcc.n	8002e3c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	1ad2      	subs	r2, r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	619a      	str	r2, [r3, #24]
 8002e3a:	e002      	b.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d000      	beq.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x404>
 8002e4a:	e0c0      	b.n	8002fce <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	785b      	ldrb	r3, [r3, #1]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d125      	bne.n	8002ea0 <HAL_PCD_EP_DB_Transmit+0x458>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2250      	movs	r2, #80	; 0x50
 8002e60:	5a9b      	ldrh	r3, [r3, r2]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	001a      	movs	r2, r3
 8002e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e68:	189b      	adds	r3, r3, r2
 8002e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	00da      	lsls	r2, r3, #3
 8002e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	4ab1      	ldr	r2, [pc, #708]	; (800313c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002e78:	4694      	mov	ip, r2
 8002e7a:	4463      	add	r3, ip
 8002e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	4aae      	ldr	r2, [pc, #696]	; (8003140 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e8c:	801a      	strh	r2, [r3, #0]
 8002e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4aab      	ldr	r2, [pc, #684]	; (8003144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e9c:	801a      	strh	r2, [r3, #0]
 8002e9e:	e01b      	b.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x490>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	785b      	ldrb	r3, [r3, #1]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d117      	bne.n	8002ed8 <HAL_PCD_EP_DB_Transmit+0x490>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	677b      	str	r3, [r7, #116]	; 0x74
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2250      	movs	r2, #80	; 0x50
 8002eb4:	5a9b      	ldrh	r3, [r3, r2]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	001a      	movs	r2, r3
 8002eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ebc:	189b      	adds	r3, r3, r2
 8002ebe:	677b      	str	r3, [r7, #116]	; 0x74
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	00da      	lsls	r2, r3, #3
 8002ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ec8:	18d3      	adds	r3, r2, r3
 8002eca:	4a9c      	ldr	r2, [pc, #624]	; (800313c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002ecc:	4694      	mov	ip, r2
 8002ece:	4463      	add	r3, ip
 8002ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	785b      	ldrb	r3, [r3, #1]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d130      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x500>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	187a      	adds	r2, r7, r1
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2250      	movs	r2, #80	; 0x50
 8002ef6:	5a9b      	ldrh	r3, [r3, r2]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	001a      	movs	r2, r3
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	189b      	adds	r3, r3, r2
 8002f02:	187a      	adds	r2, r7, r1
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	00da      	lsls	r2, r3, #3
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	18d3      	adds	r3, r2, r3
 8002f12:	4a89      	ldr	r2, [pc, #548]	; (8003138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002f14:	4694      	mov	ip, r2
 8002f16:	4463      	add	r3, ip
 8002f18:	2184      	movs	r1, #132	; 0x84
 8002f1a:	187a      	adds	r2, r7, r1
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	4a86      	ldr	r2, [pc, #536]	; (8003140 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	801a      	strh	r2, [r3, #0]
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4a82      	ldr	r2, [pc, #520]	; (8003144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e018      	b.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x532>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d114      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x532>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2250      	movs	r2, #80	; 0x50
 8002f56:	5a9b      	ldrh	r3, [r3, r2]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	001a      	movs	r2, r3
 8002f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f5e:	189b      	adds	r3, r3, r2
 8002f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	00da      	lsls	r2, r3, #3
 8002f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f6a:	18d3      	adds	r3, r2, r3
 8002f6c:	4a72      	ldr	r2, [pc, #456]	; (8003138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002f6e:	4694      	mov	ip, r2
 8002f70:	4463      	add	r3, ip
 8002f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f76:	2200      	movs	r2, #0
 8002f78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781a      	ldrb	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f006 fa48 	bl	8009418 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f88:	1dbb      	adds	r3, r7, #6
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	4013      	ands	r3, r2
 8002f92:	d000      	beq.n	8002f96 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002f94:	e100      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	18d3      	adds	r3, r2, r3
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	2046      	movs	r0, #70	; 0x46
 8002faa:	183b      	adds	r3, r7, r0
 8002fac:	4966      	ldr	r1, [pc, #408]	; (8003148 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	18d3      	adds	r3, r2, r3
 8002fc0:	183a      	adds	r2, r7, r0
 8002fc2:	8812      	ldrh	r2, [r2, #0]
 8002fc4:	4961      	ldr	r1, [pc, #388]	; (800314c <HAL_PCD_EP_DB_Transmit+0x704>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	801a      	strh	r2, [r3, #0]
 8002fcc:	e0e4      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fce:	1dbb      	adds	r3, r7, #6
 8002fd0:	881a      	ldrh	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	01db      	lsls	r3, r3, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d11a      	bne.n	8003010 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	001a      	movs	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	18d3      	adds	r3, r2, r3
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	204c      	movs	r0, #76	; 0x4c
 8002fee:	183b      	adds	r3, r7, r0
 8002ff0:	4955      	ldr	r1, [pc, #340]	; (8003148 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	18d3      	adds	r3, r2, r3
 8003004:	183a      	adds	r2, r7, r0
 8003006:	8812      	ldrh	r2, [r2, #0]
 8003008:	4950      	ldr	r1, [pc, #320]	; (800314c <HAL_PCD_EP_DB_Transmit+0x704>)
 800300a:	430a      	orrs	r2, r1
 800300c:	b292      	uxth	r2, r2
 800300e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	5c9b      	ldrb	r3, [r3, r2]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d000      	beq.n	800301c <HAL_PCD_EP_DB_Transmit+0x5d4>
 800301a:	e0bd      	b.n	8003198 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	214e      	movs	r1, #78	; 0x4e
 8003022:	187b      	adds	r3, r7, r1
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	18d2      	adds	r2, r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	187b      	adds	r3, r7, r1
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	18d2      	adds	r2, r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	429a      	cmp	r2, r3
 8003044:	d309      	bcc.n	800305a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003052:	1ad2      	subs	r2, r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	621a      	str	r2, [r3, #32]
 8003058:	e016      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003062:	234e      	movs	r3, #78	; 0x4e
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2224      	movs	r2, #36	; 0x24
 800306e:	2100      	movs	r1, #0
 8003070:	5499      	strb	r1, [r3, r2]
 8003072:	e009      	b.n	8003088 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	667b      	str	r3, [r7, #100]	; 0x64
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d15c      	bne.n	8003150 <HAL_PCD_EP_DB_Transmit+0x708>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2250      	movs	r2, #80	; 0x50
 80030a2:	5a9b      	ldrh	r3, [r3, r2]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	001a      	movs	r2, r3
 80030a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b6:	18d3      	adds	r3, r2, r3
 80030b8:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80030ba:	4694      	mov	ip, r2
 80030bc:	4463      	add	r3, ip
 80030be:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d110      	bne.n	80030e8 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80030c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	4a1c      	ldr	r2, [pc, #112]	; (8003140 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4a19      	ldr	r2, [pc, #100]	; (8003144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030e4:	801a      	strh	r2, [r3, #0]
 80030e6:	e04d      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x73c>
 80030e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030ea:	2b3e      	cmp	r3, #62	; 0x3e
 80030ec:	d810      	bhi.n	8003110 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80030ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f0:	085b      	lsrs	r3, r3, #1
 80030f2:	657b      	str	r3, [r7, #84]	; 0x54
 80030f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f6:	2201      	movs	r2, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d002      	beq.n	8003102 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80030fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fe:	3301      	adds	r3, #1
 8003100:	657b      	str	r3, [r7, #84]	; 0x54
 8003102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003104:	b29b      	uxth	r3, r3
 8003106:	029b      	lsls	r3, r3, #10
 8003108:	b29a      	uxth	r2, r3
 800310a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	e039      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	657b      	str	r3, [r7, #84]	; 0x54
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	221f      	movs	r2, #31
 800311a:	4013      	ands	r3, r2
 800311c:	d102      	bne.n	8003124 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800311e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003120:	3b01      	subs	r3, #1
 8003122:	657b      	str	r3, [r7, #84]	; 0x54
 8003124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003126:	b29b      	uxth	r3, r3
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	b29b      	uxth	r3, r3
 800312c:	4a05      	ldr	r2, [pc, #20]	; (8003144 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800312e:	4313      	orrs	r3, r2
 8003130:	b29a      	uxth	r2, r3
 8003132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	e025      	b.n	8003184 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003138:	00000406 	.word	0x00000406
 800313c:	00000402 	.word	0x00000402
 8003140:	ffff83ff 	.word	0xffff83ff
 8003144:	ffff8000 	.word	0xffff8000
 8003148:	ffff8f8f 	.word	0xffff8f8f
 800314c:	ffffc080 	.word	0xffffc080
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d115      	bne.n	8003184 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2250      	movs	r2, #80	; 0x50
 800315e:	5a9b      	ldrh	r3, [r3, r2]
 8003160:	b29b      	uxth	r3, r3
 8003162:	001a      	movs	r2, r3
 8003164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003166:	189b      	adds	r3, r3, r2
 8003168:	667b      	str	r3, [r7, #100]	; 0x64
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	00da      	lsls	r2, r3, #3
 8003170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003176:	4694      	mov	ip, r2
 8003178:	4463      	add	r3, ip
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
 800317c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317e:	b29a      	uxth	r2, r3
 8003180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003182:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6818      	ldr	r0, [r3, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6959      	ldr	r1, [r3, #20]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	895a      	ldrh	r2, [r3, #10]
 8003190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003192:	b29b      	uxth	r3, r3
 8003194:	f004 fb66 	bl	8007864 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	001a      	movs	r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	18d3      	adds	r3, r2, r3
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	2010      	movs	r0, #16
 80031ac:	183b      	adds	r3, r7, r0
 80031ae:	4911      	ldr	r1, [pc, #68]	; (80031f4 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80031b0:	400a      	ands	r2, r1
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	183b      	adds	r3, r7, r0
 80031b6:	183a      	adds	r2, r7, r0
 80031b8:	8812      	ldrh	r2, [r2, #0]
 80031ba:	2110      	movs	r1, #16
 80031bc:	404a      	eors	r2, r1
 80031be:	801a      	strh	r2, [r3, #0]
 80031c0:	183b      	adds	r3, r7, r0
 80031c2:	183a      	adds	r2, r7, r0
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	2120      	movs	r1, #32
 80031c8:	404a      	eors	r2, r1
 80031ca:	801a      	strh	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	001a      	movs	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	18d3      	adds	r3, r2, r3
 80031da:	183a      	adds	r2, r7, r0
 80031dc:	8812      	ldrh	r2, [r2, #0]
 80031de:	4906      	ldr	r1, [pc, #24]	; (80031f8 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80031e0:	430a      	orrs	r2, r1
 80031e2:	b292      	uxth	r2, r2
 80031e4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b022      	add	sp, #136	; 0x88
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	00000406 	.word	0x00000406
 80031f4:	ffff8fbf 	.word	0xffff8fbf
 80031f8:	ffff8080 	.word	0xffff8080

080031fc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	0008      	movs	r0, r1
 8003206:	0011      	movs	r1, r2
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	240a      	movs	r4, #10
 800320c:	193b      	adds	r3, r7, r4
 800320e:	1c02      	adds	r2, r0, #0
 8003210:	801a      	strh	r2, [r3, #0]
 8003212:	2308      	movs	r3, #8
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	1c0a      	adds	r2, r1, #0
 8003218:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800321a:	0021      	movs	r1, r4
 800321c:	187b      	adds	r3, r7, r1
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	4013      	ands	r3, r2
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00c      	beq.n	8003244 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322a:	187b      	adds	r3, r7, r1
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	0013      	movs	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	189b      	adds	r3, r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	18d3      	adds	r3, r2, r3
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	e00b      	b.n	800325c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003244:	230a      	movs	r3, #10
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	881a      	ldrh	r2, [r3, #0]
 800324a:	0013      	movs	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	189b      	adds	r3, r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	3369      	adds	r3, #105	; 0x69
 8003254:	33ff      	adds	r3, #255	; 0xff
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	18d3      	adds	r3, r2, r3
 800325a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800325c:	2308      	movs	r3, #8
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2200      	movs	r2, #0
 800326a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	b29a      	uxth	r2, r3
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	80da      	strh	r2, [r3, #6]
 8003274:	e00b      	b.n	800328e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2201      	movs	r2, #1
 800327a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	b29a      	uxth	r2, r3
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0c1b      	lsrs	r3, r3, #16
 8003288:	b29a      	uxth	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b007      	add	sp, #28
 8003296:	bd90      	pop	{r4, r7, pc}

08003298 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	23ba      	movs	r3, #186	; 0xba
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	2101      	movs	r1, #1
 80032ae:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	23b8      	movs	r3, #184	; 0xb8
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	2100      	movs	r1, #0
 80032b8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2254      	movs	r2, #84	; 0x54
 80032be:	5a9b      	ldrh	r3, [r3, r2]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	2201      	movs	r2, #1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	b299      	uxth	r1, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2254      	movs	r2, #84	; 0x54
 80032cc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2254      	movs	r2, #84	; 0x54
 80032d2:	5a9b      	ldrh	r3, [r3, r2]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2202      	movs	r2, #2
 80032d8:	4313      	orrs	r3, r2
 80032da:	b299      	uxth	r1, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2254      	movs	r2, #84	; 0x54
 80032e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	0018      	movs	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b004      	add	sp, #16
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	000a      	movs	r2, r1
 80032f6:	1cfb      	adds	r3, r7, #3
 80032f8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b002      	add	sp, #8
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e305      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	4013      	ands	r3, r2
 800331e:	d100      	bne.n	8003322 <HAL_RCC_OscConfig+0x1e>
 8003320:	e08d      	b.n	800343e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003322:	4bc5      	ldr	r3, [pc, #788]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	220c      	movs	r2, #12
 8003328:	4013      	ands	r3, r2
 800332a:	2b04      	cmp	r3, #4
 800332c:	d00e      	beq.n	800334c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800332e:	4bc2      	ldr	r3, [pc, #776]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	220c      	movs	r2, #12
 8003334:	4013      	ands	r3, r2
 8003336:	2b08      	cmp	r3, #8
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x64>
 800333a:	4bbf      	ldr	r3, [pc, #764]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	23c0      	movs	r3, #192	; 0xc0
 8003340:	025b      	lsls	r3, r3, #9
 8003342:	401a      	ands	r2, r3
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	429a      	cmp	r2, r3
 800334a:	d10d      	bne.n	8003368 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4bba      	ldr	r3, [pc, #744]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	4013      	ands	r3, r2
 8003356:	d100      	bne.n	800335a <HAL_RCC_OscConfig+0x56>
 8003358:	e070      	b.n	800343c <HAL_RCC_OscConfig+0x138>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d000      	beq.n	8003364 <HAL_RCC_OscConfig+0x60>
 8003362:	e06b      	b.n	800343c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e2dc      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <HAL_RCC_OscConfig+0x7c>
 8003370:	4bb1      	ldr	r3, [pc, #708]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4bb0      	ldr	r3, [pc, #704]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	0249      	lsls	r1, r1, #9
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e02f      	b.n	80033e0 <HAL_RCC_OscConfig+0xdc>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x9e>
 8003388:	4bab      	ldr	r3, [pc, #684]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4baa      	ldr	r3, [pc, #680]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800338e:	49ab      	ldr	r1, [pc, #684]	; (800363c <HAL_RCC_OscConfig+0x338>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	4ba8      	ldr	r3, [pc, #672]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4ba7      	ldr	r3, [pc, #668]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800339a:	49a9      	ldr	r1, [pc, #676]	; (8003640 <HAL_RCC_OscConfig+0x33c>)
 800339c:	400a      	ands	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	e01e      	b.n	80033e0 <HAL_RCC_OscConfig+0xdc>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10e      	bne.n	80033c8 <HAL_RCC_OscConfig+0xc4>
 80033aa:	4ba3      	ldr	r3, [pc, #652]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4ba2      	ldr	r3, [pc, #648]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033b0:	2180      	movs	r1, #128	; 0x80
 80033b2:	02c9      	lsls	r1, r1, #11
 80033b4:	430a      	orrs	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	4b9f      	ldr	r3, [pc, #636]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b9e      	ldr	r3, [pc, #632]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0249      	lsls	r1, r1, #9
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	e00b      	b.n	80033e0 <HAL_RCC_OscConfig+0xdc>
 80033c8:	4b9b      	ldr	r3, [pc, #620]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b9a      	ldr	r3, [pc, #616]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033ce:	499b      	ldr	r1, [pc, #620]	; (800363c <HAL_RCC_OscConfig+0x338>)
 80033d0:	400a      	ands	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	4b98      	ldr	r3, [pc, #608]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b97      	ldr	r3, [pc, #604]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80033da:	4999      	ldr	r1, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x33c>)
 80033dc:	400a      	ands	r2, r1
 80033de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fd10 	bl	8000e0c <HAL_GetTick>
 80033ec:	0003      	movs	r3, r0
 80033ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f2:	f7fd fd0b 	bl	8000e0c <HAL_GetTick>
 80033f6:	0002      	movs	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b64      	cmp	r3, #100	; 0x64
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e28e      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003404:	4b8c      	ldr	r3, [pc, #560]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	029b      	lsls	r3, r3, #10
 800340c:	4013      	ands	r3, r2
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0xee>
 8003410:	e015      	b.n	800343e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003412:	f7fd fcfb 	bl	8000e0c <HAL_GetTick>
 8003416:	0003      	movs	r3, r0
 8003418:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fcf6 	bl	8000e0c <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e279      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b82      	ldr	r3, [pc, #520]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	029b      	lsls	r3, r3, #10
 8003436:	4013      	ands	r3, r2
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x118>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2202      	movs	r2, #2
 8003444:	4013      	ands	r3, r2
 8003446:	d100      	bne.n	800344a <HAL_RCC_OscConfig+0x146>
 8003448:	e06c      	b.n	8003524 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800344a:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	220c      	movs	r2, #12
 8003450:	4013      	ands	r3, r2
 8003452:	d00e      	beq.n	8003472 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003454:	4b78      	ldr	r3, [pc, #480]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	220c      	movs	r2, #12
 800345a:	4013      	ands	r3, r2
 800345c:	2b08      	cmp	r3, #8
 800345e:	d11f      	bne.n	80034a0 <HAL_RCC_OscConfig+0x19c>
 8003460:	4b75      	ldr	r3, [pc, #468]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	23c0      	movs	r3, #192	; 0xc0
 8003466:	025b      	lsls	r3, r3, #9
 8003468:	401a      	ands	r2, r3
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	429a      	cmp	r2, r3
 8003470:	d116      	bne.n	80034a0 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	4b71      	ldr	r3, [pc, #452]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x184>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d001      	beq.n	8003488 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e24c      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b6b      	ldr	r3, [pc, #428]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	22f8      	movs	r2, #248	; 0xf8
 800348e:	4393      	bics	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	00da      	lsls	r2, r3, #3
 8003498:	4b67      	ldr	r3, [pc, #412]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	e041      	b.n	8003524 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d024      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a8:	4b63      	ldr	r3, [pc, #396]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	4b62      	ldr	r3, [pc, #392]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	430a      	orrs	r2, r1
 80034b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fd fcaa 	bl	8000e0c <HAL_GetTick>
 80034b8:	0003      	movs	r3, r0
 80034ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034be:	f7fd fca5 	bl	8000e0c <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e228      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2202      	movs	r2, #2
 80034d6:	4013      	ands	r3, r2
 80034d8:	d0f1      	beq.n	80034be <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b57      	ldr	r3, [pc, #348]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	22f8      	movs	r2, #248	; 0xf8
 80034e0:	4393      	bics	r3, r2
 80034e2:	0019      	movs	r1, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	00da      	lsls	r2, r3, #3
 80034ea:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e018      	b.n	8003524 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b51      	ldr	r3, [pc, #324]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	438a      	bics	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fe:	f7fd fc85 	bl	8000e0c <HAL_GetTick>
 8003502:	0003      	movs	r3, r0
 8003504:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003508:	f7fd fc80 	bl	8000e0c <HAL_GetTick>
 800350c:	0002      	movs	r2, r0
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e203      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2202      	movs	r2, #2
 8003520:	4013      	ands	r3, r2
 8003522:	d1f1      	bne.n	8003508 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2208      	movs	r2, #8
 800352a:	4013      	ands	r3, r2
 800352c:	d036      	beq.n	800359c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d019      	beq.n	800356a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b40      	ldr	r3, [pc, #256]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800353c:	2101      	movs	r1, #1
 800353e:	430a      	orrs	r2, r1
 8003540:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003542:	f7fd fc63 	bl	8000e0c <HAL_GetTick>
 8003546:	0003      	movs	r3, r0
 8003548:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800354c:	f7fd fc5e 	bl	8000e0c <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1e1      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2202      	movs	r2, #2
 8003564:	4013      	ands	r3, r2
 8003566:	d0f1      	beq.n	800354c <HAL_RCC_OscConfig+0x248>
 8003568:	e018      	b.n	800359c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356a:	4b33      	ldr	r3, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356e:	4b32      	ldr	r3, [pc, #200]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003570:	2101      	movs	r1, #1
 8003572:	438a      	bics	r2, r1
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003576:	f7fd fc49 	bl	8000e0c <HAL_GetTick>
 800357a:	0003      	movs	r3, r0
 800357c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003580:	f7fd fc44 	bl	8000e0c <HAL_GetTick>
 8003584:	0002      	movs	r2, r0
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1c7      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003592:	4b29      	ldr	r3, [pc, #164]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	2202      	movs	r2, #2
 8003598:	4013      	ands	r3, r2
 800359a:	d1f1      	bne.n	8003580 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2204      	movs	r2, #4
 80035a2:	4013      	ands	r3, r2
 80035a4:	d100      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2a4>
 80035a6:	e0b5      	b.n	8003714 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a8:	201f      	movs	r0, #31
 80035aa:	183b      	adds	r3, r7, r0
 80035ac:	2200      	movs	r2, #0
 80035ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b0:	4b21      	ldr	r3, [pc, #132]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	055b      	lsls	r3, r3, #21
 80035b8:	4013      	ands	r3, r2
 80035ba:	d110      	bne.n	80035de <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80035c2:	2180      	movs	r1, #128	; 0x80
 80035c4:	0549      	lsls	r1, r1, #21
 80035c6:	430a      	orrs	r2, r1
 80035c8:	61da      	str	r2, [r3, #28]
 80035ca:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	055b      	lsls	r3, r3, #21
 80035d2:	4013      	ands	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80035d8:	183b      	adds	r3, r7, r0
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035de:	4b19      	ldr	r3, [pc, #100]	; (8003644 <HAL_RCC_OscConfig+0x340>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	4013      	ands	r3, r2
 80035e8:	d11a      	bne.n	8003620 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ea:	4b16      	ldr	r3, [pc, #88]	; (8003644 <HAL_RCC_OscConfig+0x340>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_RCC_OscConfig+0x340>)
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0049      	lsls	r1, r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f8:	f7fd fc08 	bl	8000e0c <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003602:	f7fd fc03 	bl	8000e0c <HAL_GetTick>
 8003606:	0002      	movs	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b64      	cmp	r3, #100	; 0x64
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e186      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_OscConfig+0x340>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4013      	ands	r3, r2
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d10f      	bne.n	8003648 <HAL_RCC_OscConfig+0x344>
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	4b02      	ldr	r3, [pc, #8]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800362e:	2101      	movs	r1, #1
 8003630:	430a      	orrs	r2, r1
 8003632:	621a      	str	r2, [r3, #32]
 8003634:	e036      	b.n	80036a4 <HAL_RCC_OscConfig+0x3a0>
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	40021000 	.word	0x40021000
 800363c:	fffeffff 	.word	0xfffeffff
 8003640:	fffbffff 	.word	0xfffbffff
 8003644:	40007000 	.word	0x40007000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10c      	bne.n	800366a <HAL_RCC_OscConfig+0x366>
 8003650:	4bb6      	ldr	r3, [pc, #728]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003652:	6a1a      	ldr	r2, [r3, #32]
 8003654:	4bb5      	ldr	r3, [pc, #724]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003656:	2101      	movs	r1, #1
 8003658:	438a      	bics	r2, r1
 800365a:	621a      	str	r2, [r3, #32]
 800365c:	4bb3      	ldr	r3, [pc, #716]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800365e:	6a1a      	ldr	r2, [r3, #32]
 8003660:	4bb2      	ldr	r3, [pc, #712]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003662:	2104      	movs	r1, #4
 8003664:	438a      	bics	r2, r1
 8003666:	621a      	str	r2, [r3, #32]
 8003668:	e01c      	b.n	80036a4 <HAL_RCC_OscConfig+0x3a0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x388>
 8003672:	4bae      	ldr	r3, [pc, #696]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003674:	6a1a      	ldr	r2, [r3, #32]
 8003676:	4bad      	ldr	r3, [pc, #692]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003678:	2104      	movs	r1, #4
 800367a:	430a      	orrs	r2, r1
 800367c:	621a      	str	r2, [r3, #32]
 800367e:	4bab      	ldr	r3, [pc, #684]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003680:	6a1a      	ldr	r2, [r3, #32]
 8003682:	4baa      	ldr	r3, [pc, #680]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003684:	2101      	movs	r1, #1
 8003686:	430a      	orrs	r2, r1
 8003688:	621a      	str	r2, [r3, #32]
 800368a:	e00b      	b.n	80036a4 <HAL_RCC_OscConfig+0x3a0>
 800368c:	4ba7      	ldr	r3, [pc, #668]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800368e:	6a1a      	ldr	r2, [r3, #32]
 8003690:	4ba6      	ldr	r3, [pc, #664]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003692:	2101      	movs	r1, #1
 8003694:	438a      	bics	r2, r1
 8003696:	621a      	str	r2, [r3, #32]
 8003698:	4ba4      	ldr	r3, [pc, #656]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800369a:	6a1a      	ldr	r2, [r3, #32]
 800369c:	4ba3      	ldr	r3, [pc, #652]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800369e:	2104      	movs	r1, #4
 80036a0:	438a      	bics	r2, r1
 80036a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d014      	beq.n	80036d6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ac:	f7fd fbae 	bl	8000e0c <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b4:	e009      	b.n	80036ca <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b6:	f7fd fba9 	bl	8000e0c <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	4a9b      	ldr	r2, [pc, #620]	; (8003930 <HAL_RCC_OscConfig+0x62c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e12b      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	4b98      	ldr	r3, [pc, #608]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	2202      	movs	r2, #2
 80036d0:	4013      	ands	r3, r2
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x3b2>
 80036d4:	e013      	b.n	80036fe <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fd fb99 	bl	8000e0c <HAL_GetTick>
 80036da:	0003      	movs	r3, r0
 80036dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036de:	e009      	b.n	80036f4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fd fb94 	bl	8000e0c <HAL_GetTick>
 80036e4:	0002      	movs	r2, r0
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	4a91      	ldr	r2, [pc, #580]	; (8003930 <HAL_RCC_OscConfig+0x62c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e116      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	4b8d      	ldr	r3, [pc, #564]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	2202      	movs	r2, #2
 80036fa:	4013      	ands	r3, r2
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036fe:	231f      	movs	r3, #31
 8003700:	18fb      	adds	r3, r7, r3
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b88      	ldr	r3, [pc, #544]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800370a:	69da      	ldr	r2, [r3, #28]
 800370c:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800370e:	4989      	ldr	r1, [pc, #548]	; (8003934 <HAL_RCC_OscConfig+0x630>)
 8003710:	400a      	ands	r2, r1
 8003712:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2210      	movs	r2, #16
 800371a:	4013      	ands	r3, r2
 800371c:	d063      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d12a      	bne.n	800377c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003726:	4b81      	ldr	r3, [pc, #516]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800372a:	4b80      	ldr	r3, [pc, #512]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800372c:	2104      	movs	r1, #4
 800372e:	430a      	orrs	r2, r1
 8003730:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003732:	4b7e      	ldr	r3, [pc, #504]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003736:	4b7d      	ldr	r3, [pc, #500]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003738:	2101      	movs	r1, #1
 800373a:	430a      	orrs	r2, r1
 800373c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373e:	f7fd fb65 	bl	8000e0c <HAL_GetTick>
 8003742:	0003      	movs	r3, r0
 8003744:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003748:	f7fd fb60 	bl	8000e0c <HAL_GetTick>
 800374c:	0002      	movs	r2, r0
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0e3      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800375a:	4b74      	ldr	r3, [pc, #464]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800375c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375e:	2202      	movs	r2, #2
 8003760:	4013      	ands	r3, r2
 8003762:	d0f1      	beq.n	8003748 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003764:	4b71      	ldr	r3, [pc, #452]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	22f8      	movs	r2, #248	; 0xf8
 800376a:	4393      	bics	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	00da      	lsls	r2, r3, #3
 8003774:	4b6d      	ldr	r3, [pc, #436]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003776:	430a      	orrs	r2, r1
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
 800377a:	e034      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	3305      	adds	r3, #5
 8003782:	d111      	bne.n	80037a8 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003784:	4b69      	ldr	r3, [pc, #420]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003788:	4b68      	ldr	r3, [pc, #416]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800378a:	2104      	movs	r1, #4
 800378c:	438a      	bics	r2, r1
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003790:	4b66      	ldr	r3, [pc, #408]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003794:	22f8      	movs	r2, #248	; 0xf8
 8003796:	4393      	bics	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	00da      	lsls	r2, r3, #3
 80037a0:	4b62      	ldr	r3, [pc, #392]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	635a      	str	r2, [r3, #52]	; 0x34
 80037a6:	e01e      	b.n	80037e6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80037a8:	4b60      	ldr	r3, [pc, #384]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ac:	4b5f      	ldr	r3, [pc, #380]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037ae:	2104      	movs	r1, #4
 80037b0:	430a      	orrs	r2, r1
 80037b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80037b4:	4b5d      	ldr	r3, [pc, #372]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b8:	4b5c      	ldr	r3, [pc, #368]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037ba:	2101      	movs	r1, #1
 80037bc:	438a      	bics	r2, r1
 80037be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c0:	f7fd fb24 	bl	8000e0c <HAL_GetTick>
 80037c4:	0003      	movs	r3, r0
 80037c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80037ca:	f7fd fb1f 	bl	8000e0c <HAL_GetTick>
 80037ce:	0002      	movs	r2, r0
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e0a2      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80037dc:	4b53      	ldr	r3, [pc, #332]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e0:	2202      	movs	r2, #2
 80037e2:	4013      	ands	r3, r2
 80037e4:	d1f1      	bne.n	80037ca <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d100      	bne.n	80037f0 <HAL_RCC_OscConfig+0x4ec>
 80037ee:	e097      	b.n	8003920 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f0:	4b4e      	ldr	r3, [pc, #312]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	220c      	movs	r2, #12
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d100      	bne.n	80037fe <HAL_RCC_OscConfig+0x4fa>
 80037fc:	e06b      	b.n	80038d6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d14c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b49      	ldr	r3, [pc, #292]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b48      	ldr	r3, [pc, #288]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800380c:	494a      	ldr	r1, [pc, #296]	; (8003938 <HAL_RCC_OscConfig+0x634>)
 800380e:	400a      	ands	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fafb 	bl	8000e0c <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381c:	f7fd faf6 	bl	8000e0c <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e079      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382e:	4b3f      	ldr	r3, [pc, #252]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	049b      	lsls	r3, r3, #18
 8003836:	4013      	ands	r3, r2
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383a:	4b3c      	ldr	r3, [pc, #240]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	220f      	movs	r2, #15
 8003840:	4393      	bics	r3, r2
 8003842:	0019      	movs	r1, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800384a:	430a      	orrs	r2, r1
 800384c:	62da      	str	r2, [r3, #44]	; 0x2c
 800384e:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4a3a      	ldr	r2, [pc, #232]	; (800393c <HAL_RCC_OscConfig+0x638>)
 8003854:	4013      	ands	r3, r2
 8003856:	0019      	movs	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	431a      	orrs	r2, r3
 8003862:	4b32      	ldr	r3, [pc, #200]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003868:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b2f      	ldr	r3, [pc, #188]	; (800392c <HAL_RCC_OscConfig+0x628>)
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	0449      	lsls	r1, r1, #17
 8003872:	430a      	orrs	r2, r1
 8003874:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003876:	f7fd fac9 	bl	8000e0c <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fac4 	bl	8000e0c <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e047      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003892:	4b26      	ldr	r3, [pc, #152]	; (800392c <HAL_RCC_OscConfig+0x628>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	049b      	lsls	r3, r3, #18
 800389a:	4013      	ands	r3, r2
 800389c:	d0f0      	beq.n	8003880 <HAL_RCC_OscConfig+0x57c>
 800389e:	e03f      	b.n	8003920 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b21      	ldr	r3, [pc, #132]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80038a6:	4924      	ldr	r1, [pc, #144]	; (8003938 <HAL_RCC_OscConfig+0x634>)
 80038a8:	400a      	ands	r2, r1
 80038aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd faae 	bl	8000e0c <HAL_GetTick>
 80038b0:	0003      	movs	r3, r0
 80038b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd faa9 	bl	8000e0c <HAL_GetTick>
 80038ba:	0002      	movs	r2, r0
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e02c      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	049b      	lsls	r3, r3, #18
 80038d0:	4013      	ands	r3, r2
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x5b2>
 80038d4:	e024      	b.n	8003920 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e01f      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80038e8:	4b10      	ldr	r3, [pc, #64]	; (800392c <HAL_RCC_OscConfig+0x628>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	23c0      	movs	r3, #192	; 0xc0
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	401a      	ands	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d10e      	bne.n	800391c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	220f      	movs	r2, #15
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d107      	bne.n	800391c <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	23f0      	movs	r3, #240	; 0xf0
 8003910:	039b      	lsls	r3, r3, #14
 8003912:	401a      	ands	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e000      	b.n	8003922 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b008      	add	sp, #32
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40021000 	.word	0x40021000
 8003930:	00001388 	.word	0x00001388
 8003934:	efffffff 	.word	0xefffffff
 8003938:	feffffff 	.word	0xfeffffff
 800393c:	ffc27fff 	.word	0xffc27fff

08003940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0b3      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003954:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2201      	movs	r2, #1
 800395a:	4013      	ands	r3, r2
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d911      	bls.n	8003986 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b58      	ldr	r3, [pc, #352]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4393      	bics	r3, r2
 800396a:	0019      	movs	r1, r3
 800396c:	4b55      	ldr	r3, [pc, #340]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2201      	movs	r2, #1
 800397a:	4013      	ands	r3, r2
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d001      	beq.n	8003986 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e09a      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2202      	movs	r2, #2
 800398c:	4013      	ands	r3, r2
 800398e:	d015      	beq.n	80039bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2204      	movs	r2, #4
 8003996:	4013      	ands	r3, r2
 8003998:	d006      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800399a:	4b4b      	ldr	r3, [pc, #300]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 80039a0:	21e0      	movs	r1, #224	; 0xe0
 80039a2:	00c9      	lsls	r1, r1, #3
 80039a4:	430a      	orrs	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	22f0      	movs	r2, #240	; 0xf0
 80039ae:	4393      	bics	r3, r2
 80039b0:	0019      	movs	r1, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	4b44      	ldr	r3, [pc, #272]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2201      	movs	r2, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	d040      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b3e      	ldr	r3, [pc, #248]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	4013      	ands	r3, r2
 80039d8:	d114      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06e      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	049b      	lsls	r3, r3, #18
 80039ee:	4013      	ands	r3, r2
 80039f0:	d108      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e062      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2202      	movs	r2, #2
 80039fc:	4013      	ands	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e05b      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a04:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	4393      	bics	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 8003a14:	430a      	orrs	r2, r1
 8003a16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a18:	f7fd f9f8 	bl	8000e0c <HAL_GetTick>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a20:	e009      	b.n	8003a36 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a22:	f7fd f9f3 	bl	8000e0c <HAL_GetTick>
 8003a26:	0002      	movs	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	4a27      	ldr	r2, [pc, #156]	; (8003acc <HAL_RCC_ClockConfig+0x18c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e042      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	220c      	movs	r2, #12
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1ec      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4013      	ands	r3, r2
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d211      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_RCC_ClockConfig+0x184>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	4013      	ands	r3, r2
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e020      	b.n	8003abc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	4013      	ands	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <HAL_RCC_ClockConfig+0x190>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a98:	f000 f820 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9c:	0001      	movs	r1, r0
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x188>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <HAL_RCC_ClockConfig+0x194>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	000a      	movs	r2, r1
 8003aae:	40da      	lsrs	r2, r3
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x198>)
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ab4:	2003      	movs	r0, #3
 8003ab6:	f7fd f963 	bl	8000d80 <HAL_InitTick>
  
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b004      	add	sp, #16
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	00001388 	.word	0x00001388
 8003ad0:	fffff8ff 	.word	0xfffff8ff
 8003ad4:	08009a9c 	.word	0x08009a9c
 8003ad8:	20000000 	.word	0x20000000

08003adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b08f      	sub	sp, #60	; 0x3c
 8003ae0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003ae2:	2314      	movs	r3, #20
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	4a2c      	ldr	r2, [pc, #176]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ae8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003aea:	c313      	stmia	r3!, {r0, r1, r4}
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003af4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003af6:	c313      	stmia	r3!, {r0, r1, r4}
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b00:	2300      	movs	r3, #0
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b04:	2300      	movs	r3, #0
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003b10:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	220c      	movs	r2, #12
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d002      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x4a>
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d003      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x50>
 8003b24:	e02f      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b26:	4b1f      	ldr	r3, [pc, #124]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b2a:	e02f      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	0c9b      	lsrs	r3, r3, #18
 8003b30:	220f      	movs	r2, #15
 8003b32:	4013      	ands	r3, r2
 8003b34:	2214      	movs	r2, #20
 8003b36:	18ba      	adds	r2, r7, r2
 8003b38:	5cd3      	ldrb	r3, [r2, r3]
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b3c:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	220f      	movs	r2, #15
 8003b42:	4013      	ands	r3, r2
 8003b44:	1d3a      	adds	r2, r7, #4
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4c:	23c0      	movs	r3, #192	; 0xc0
 8003b4e:	025b      	lsls	r3, r3, #9
 8003b50:	401a      	ands	r2, r3
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	025b      	lsls	r3, r3, #9
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b5c:	4811      	ldr	r0, [pc, #68]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b5e:	f7fc fad3 	bl	8000108 <__udivsi3>
 8003b62:	0003      	movs	r3, r0
 8003b64:	001a      	movs	r2, r3
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	4353      	muls	r3, r2
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b70:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b72:	f7fc fac9 	bl	8000108 <__udivsi3>
 8003b76:	0003      	movs	r3, r0
 8003b78:	001a      	movs	r2, r3
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	4353      	muls	r3, r2
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b86:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003b8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b8e:	0018      	movs	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	b00f      	add	sp, #60	; 0x3c
 8003b94:	bd90      	pop	{r4, r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	08009a34 	.word	0x08009a34
 8003b9c:	08009a44 	.word	0x08009a44
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	007a1200 	.word	0x007a1200

08003ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bac:	4b02      	ldr	r3, [pc, #8]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	46c0      	nop			; (mov r8, r8)
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003bc0:	f7ff fff2 	bl	8003ba8 <HAL_RCC_GetHCLKFreq>
 8003bc4:	0001      	movs	r1, r0
 8003bc6:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	0a1b      	lsrs	r3, r3, #8
 8003bcc:	2207      	movs	r2, #7
 8003bce:	4013      	ands	r3, r2
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bd2:	5cd3      	ldrb	r3, [r2, r3]
 8003bd4:	40d9      	lsrs	r1, r3
 8003bd6:	000b      	movs	r3, r1
}    
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			; (mov r8, r8)
 8003be0:	40021000 	.word	0x40021000
 8003be4:	08009aac 	.word	0x08009aac

08003be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	025b      	lsls	r3, r3, #9
 8003c00:	4013      	ands	r3, r2
 8003c02:	d100      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003c04:	e08e      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003c06:	2017      	movs	r0, #23
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0e:	4b5f      	ldr	r3, [pc, #380]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	2380      	movs	r3, #128	; 0x80
 8003c14:	055b      	lsls	r3, r3, #21
 8003c16:	4013      	ands	r3, r2
 8003c18:	d110      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c1a:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c1c:	69da      	ldr	r2, [r3, #28]
 8003c1e:	4b5b      	ldr	r3, [pc, #364]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c20:	2180      	movs	r1, #128	; 0x80
 8003c22:	0549      	lsls	r1, r1, #21
 8003c24:	430a      	orrs	r2, r1
 8003c26:	61da      	str	r2, [r3, #28]
 8003c28:	4b58      	ldr	r3, [pc, #352]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	055b      	lsls	r3, r3, #21
 8003c30:	4013      	ands	r3, r2
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	2201      	movs	r2, #1
 8003c3a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	2380      	movs	r3, #128	; 0x80
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4013      	ands	r3, r2
 8003c46:	d11a      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c48:	4b51      	ldr	r3, [pc, #324]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c4e:	2180      	movs	r1, #128	; 0x80
 8003c50:	0049      	lsls	r1, r1, #1
 8003c52:	430a      	orrs	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fd f8d9 	bl	8000e0c <HAL_GetTick>
 8003c5a:	0003      	movs	r3, r0
 8003c5c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	e008      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c60:	f7fd f8d4 	bl	8000e0c <HAL_GetTick>
 8003c64:	0002      	movs	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e087      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7e:	4b43      	ldr	r3, [pc, #268]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	23c0      	movs	r3, #192	; 0xc0
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d034      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	23c0      	movs	r3, #192	; 0xc0
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d02c      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ca0:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cb0:	2180      	movs	r1, #128	; 0x80
 8003cb2:	0249      	lsls	r1, r1, #9
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cb8:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cbe:	4936      	ldr	r1, [pc, #216]	; (8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cc4:	4b31      	ldr	r3, [pc, #196]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fd f89b 	bl	8000e0c <HAL_GetTick>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cdc:	f7fd f896 	bl	8000e0c <HAL_GetTick>
 8003ce0:	0002      	movs	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	4a2d      	ldr	r2, [pc, #180]	; (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e048      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	4b26      	ldr	r3, [pc, #152]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4a25      	ldr	r2, [pc, #148]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d0e:	2317      	movs	r3, #23
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d1e:	4920      	ldr	r1, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d20:	400a      	ands	r2, r1
 8003d22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	2203      	movs	r2, #3
 8003d34:	4393      	bics	r3, r2
 8003d36:	0019      	movs	r1, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2220      	movs	r2, #32
 8003d48:	4013      	ands	r3, r2
 8003d4a:	d009      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	2210      	movs	r2, #16
 8003d52:	4393      	bics	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d009      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	4393      	bics	r3, r2
 8003d74:	0019      	movs	r1, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	0018      	movs	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	b006      	add	sp, #24
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	fffffcff 	.word	0xfffffcff
 8003d98:	fffeffff 	.word	0xfffeffff
 8003d9c:	00001388 	.word	0x00001388
 8003da0:	efffffff 	.word	0xefffffff

08003da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e042      	b.n	8003e3c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	223d      	movs	r2, #61	; 0x3d
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d107      	bne.n	8003dd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	223c      	movs	r2, #60	; 0x3c
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7fc fd7b 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	223d      	movs	r2, #61	; 0x3d
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	0019      	movs	r1, r3
 8003de4:	0010      	movs	r0, r2
 8003de6:	f000 fb5d 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2246      	movs	r2, #70	; 0x46
 8003dee:	2101      	movs	r1, #1
 8003df0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	223e      	movs	r2, #62	; 0x3e
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223f      	movs	r2, #63	; 0x3f
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2241      	movs	r2, #65	; 0x41
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2242      	movs	r2, #66	; 0x42
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2243      	movs	r2, #67	; 0x43
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2244      	movs	r2, #68	; 0x44
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2245      	movs	r2, #69	; 0x45
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223d      	movs	r2, #61	; 0x3d
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e042      	b.n	8003edc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	223d      	movs	r2, #61	; 0x3d
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	223c      	movs	r2, #60	; 0x3c
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f000 f839 	bl	8003ee4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	223d      	movs	r2, #61	; 0x3d
 8003e76:	2102      	movs	r1, #2
 8003e78:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3304      	adds	r3, #4
 8003e82:	0019      	movs	r1, r3
 8003e84:	0010      	movs	r0, r2
 8003e86:	f000 fb0d 	bl	80044a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2246      	movs	r2, #70	; 0x46
 8003e8e:	2101      	movs	r1, #1
 8003e90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	223e      	movs	r2, #62	; 0x3e
 8003e96:	2101      	movs	r1, #1
 8003e98:	5499      	strb	r1, [r3, r2]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	223f      	movs	r2, #63	; 0x3f
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	5499      	strb	r1, [r3, r2]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2240      	movs	r2, #64	; 0x40
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	5499      	strb	r1, [r3, r2]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2241      	movs	r2, #65	; 0x41
 8003eae:	2101      	movs	r1, #1
 8003eb0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2242      	movs	r2, #66	; 0x42
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	5499      	strb	r1, [r3, r2]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2243      	movs	r2, #67	; 0x43
 8003ebe:	2101      	movs	r1, #1
 8003ec0:	5499      	strb	r1, [r3, r2]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2244      	movs	r2, #68	; 0x44
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	5499      	strb	r1, [r3, r2]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2245      	movs	r2, #69	; 0x45
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	223d      	movs	r2, #61	; 0x3d
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d124      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2202      	movs	r2, #2
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d11d      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2203      	movs	r2, #3
 8003f1e:	4252      	negs	r2, r2
 8003f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	2203      	movs	r2, #3
 8003f30:	4013      	ands	r3, r2
 8003f32:	d004      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fa9c 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e007      	b.n	8003f4e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 fa8f 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 fa9b 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2204      	movs	r2, #4
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d125      	bne.n	8003fae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d11e      	bne.n	8003fae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2205      	movs	r2, #5
 8003f76:	4252      	negs	r2, r2
 8003f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	699a      	ldr	r2, [r3, #24]
 8003f86:	23c0      	movs	r3, #192	; 0xc0
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 fa6f 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 fa62 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f000 fa6e 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d124      	bne.n	8004006 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d11d      	bne.n	8004006 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2209      	movs	r2, #9
 8003fd0:	4252      	negs	r2, r2
 8003fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f000 fa43 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003fee:	e007      	b.n	8004000 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f000 fa36 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f000 fa42 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2210      	movs	r2, #16
 800400e:	4013      	ands	r3, r2
 8004010:	2b10      	cmp	r3, #16
 8004012:	d125      	bne.n	8004060 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2210      	movs	r2, #16
 800401c:	4013      	ands	r3, r2
 800401e:	2b10      	cmp	r3, #16
 8004020:	d11e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2211      	movs	r2, #17
 8004028:	4252      	negs	r2, r2
 800402a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2208      	movs	r2, #8
 8004030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	23c0      	movs	r3, #192	; 0xc0
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	0018      	movs	r0, r3
 8004044:	f000 fa16 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8004048:	e007      	b.n	800405a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 fa09 	bl	8004464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f000 fa15 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2201      	movs	r2, #1
 8004068:	4013      	ands	r3, r2
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10f      	bne.n	800408e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	4013      	ands	r3, r2
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2202      	movs	r2, #2
 8004082:	4252      	negs	r2, r2
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f000 f9e3 	bl	8004454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2280      	movs	r2, #128	; 0x80
 8004096:	4013      	ands	r3, r2
 8004098:	2b80      	cmp	r3, #128	; 0x80
 800409a:	d10f      	bne.n	80040bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2280      	movs	r2, #128	; 0x80
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b80      	cmp	r3, #128	; 0x80
 80040a8:	d108      	bne.n	80040bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2281      	movs	r2, #129	; 0x81
 80040b0:	4252      	negs	r2, r2
 80040b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fd60 	bl	8004b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2240      	movs	r2, #64	; 0x40
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b40      	cmp	r3, #64	; 0x40
 80040c8:	d10f      	bne.n	80040ea <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	2240      	movs	r2, #64	; 0x40
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b40      	cmp	r3, #64	; 0x40
 80040d6:	d108      	bne.n	80040ea <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2241      	movs	r2, #65	; 0x41
 80040de:	4252      	negs	r2, r2
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 f9d5 	bl	8004494 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2220      	movs	r2, #32
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d10f      	bne.n	8004118 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	4013      	ands	r3, r2
 8004102:	2b20      	cmp	r3, #32
 8004104:	d108      	bne.n	8004118 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2221      	movs	r2, #33	; 0x21
 800410c:	4252      	negs	r2, r2
 800410e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	0018      	movs	r0, r3
 8004114:	f000 fd2a 	bl	8004b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800412c:	2317      	movs	r3, #23
 800412e:	18fb      	adds	r3, r7, r3
 8004130:	2200      	movs	r2, #0
 8004132:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	223c      	movs	r2, #60	; 0x3c
 8004138:	5c9b      	ldrb	r3, [r3, r2]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x22>
 800413e:	2302      	movs	r3, #2
 8004140:	e0ad      	b.n	800429e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	223c      	movs	r2, #60	; 0x3c
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d100      	bne.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004150:	e076      	b.n	8004240 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0c      	cmp	r3, #12
 8004156:	d900      	bls.n	800415a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004158:	e095      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x166>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b08      	cmp	r3, #8
 800415e:	d04e      	beq.n	80041fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b08      	cmp	r3, #8
 8004164:	d900      	bls.n	8004168 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004166:	e08e      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_PWM_ConfigChannel+0x56>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b04      	cmp	r3, #4
 8004172:	d021      	beq.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004174:	e087      	b.n	8004286 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f000 fa06 	bl	8004590 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2108      	movs	r1, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2104      	movs	r1, #4
 80041a0:	438a      	bics	r2, r1
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
      break;
 80041b6:	e06b      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	0011      	movs	r1, r2
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fa6d 	bl	80046a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699a      	ldr	r2, [r3, #24]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	0109      	lsls	r1, r1, #4
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4931      	ldr	r1, [pc, #196]	; (80042a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
      break;
 80041fc:	e048      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0011      	movs	r1, r2
 8004206:	0018      	movs	r0, r3
 8004208:	f000 face 	bl	80047a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2108      	movs	r1, #8
 8004218:	430a      	orrs	r2, r1
 800421a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69da      	ldr	r2, [r3, #28]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2104      	movs	r1, #4
 8004228:	438a      	bics	r2, r1
 800422a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69d9      	ldr	r1, [r3, #28]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	61da      	str	r2, [r3, #28]
      break;
 800423e:	e027      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	0011      	movs	r1, r2
 8004248:	0018      	movs	r0, r3
 800424a:	f000 fb33 	bl	80048b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	69da      	ldr	r2, [r3, #28]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0109      	lsls	r1, r1, #4
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69da      	ldr	r2, [r3, #28]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	490f      	ldr	r1, [pc, #60]	; (80042a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800426c:	400a      	ands	r2, r1
 800426e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	69d9      	ldr	r1, [r3, #28]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	021a      	lsls	r2, r3, #8
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	61da      	str	r2, [r3, #28]
      break;
 8004284:	e004      	b.n	8004290 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004286:	2317      	movs	r3, #23
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
      break;
 800428e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	223c      	movs	r2, #60	; 0x3c
 8004294:	2100      	movs	r1, #0
 8004296:	5499      	strb	r1, [r3, r2]

  return status;
 8004298:	2317      	movs	r3, #23
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	781b      	ldrb	r3, [r3, #0]
}
 800429e:	0018      	movs	r0, r3
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b006      	add	sp, #24
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			; (mov r8, r8)
 80042a8:	fffffbff 	.word	0xfffffbff

080042ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	230f      	movs	r3, #15
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	223c      	movs	r2, #60	; 0x3c
 80042c2:	5c9b      	ldrb	r3, [r3, r2]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x20>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0bc      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x19a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	223c      	movs	r2, #60	; 0x3c
 80042d0:	2101      	movs	r1, #1
 80042d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	223d      	movs	r2, #61	; 0x3d
 80042d8:	2102      	movs	r1, #2
 80042da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2277      	movs	r2, #119	; 0x77
 80042e8:	4393      	bics	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4a58      	ldr	r2, [pc, #352]	; (8004450 <HAL_TIM_ConfigClockSource+0x1a4>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	0192      	lsls	r2, r2, #6
 8004304:	4293      	cmp	r3, r2
 8004306:	d040      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xde>
 8004308:	2280      	movs	r2, #128	; 0x80
 800430a:	0192      	lsls	r2, r2, #6
 800430c:	4293      	cmp	r3, r2
 800430e:	d900      	bls.n	8004312 <HAL_TIM_ConfigClockSource+0x66>
 8004310:	e088      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 8004312:	2280      	movs	r2, #128	; 0x80
 8004314:	0152      	lsls	r2, r2, #5
 8004316:	4293      	cmp	r3, r2
 8004318:	d100      	bne.n	800431c <HAL_TIM_ConfigClockSource+0x70>
 800431a:	e088      	b.n	800442e <HAL_TIM_ConfigClockSource+0x182>
 800431c:	2280      	movs	r2, #128	; 0x80
 800431e:	0152      	lsls	r2, r2, #5
 8004320:	4293      	cmp	r3, r2
 8004322:	d900      	bls.n	8004326 <HAL_TIM_ConfigClockSource+0x7a>
 8004324:	e07e      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 8004326:	2b70      	cmp	r3, #112	; 0x70
 8004328:	d018      	beq.n	800435c <HAL_TIM_ConfigClockSource+0xb0>
 800432a:	d900      	bls.n	800432e <HAL_TIM_ConfigClockSource+0x82>
 800432c:	e07a      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 800432e:	2b60      	cmp	r3, #96	; 0x60
 8004330:	d04f      	beq.n	80043d2 <HAL_TIM_ConfigClockSource+0x126>
 8004332:	d900      	bls.n	8004336 <HAL_TIM_ConfigClockSource+0x8a>
 8004334:	e076      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 8004336:	2b50      	cmp	r3, #80	; 0x50
 8004338:	d03b      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0x106>
 800433a:	d900      	bls.n	800433e <HAL_TIM_ConfigClockSource+0x92>
 800433c:	e072      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d057      	beq.n	80043f2 <HAL_TIM_ConfigClockSource+0x146>
 8004342:	d900      	bls.n	8004346 <HAL_TIM_ConfigClockSource+0x9a>
 8004344:	e06e      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 8004346:	2b30      	cmp	r3, #48	; 0x30
 8004348:	d063      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x166>
 800434a:	d86b      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d060      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x166>
 8004350:	d868      	bhi.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
 8004352:	2b00      	cmp	r3, #0
 8004354:	d05d      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x166>
 8004356:	2b10      	cmp	r3, #16
 8004358:	d05b      	beq.n	8004412 <HAL_TIM_ConfigClockSource+0x166>
 800435a:	e063      	b.n	8004424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f000 fb86 	bl	8004a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2277      	movs	r2, #119	; 0x77
 800437c:	4313      	orrs	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e052      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f000 fb6f 	bl	8004a7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	01c9      	lsls	r1, r1, #7
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e03e      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6859      	ldr	r1, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	001a      	movs	r2, r3
 80043c0:	f000 fae2 	bl	8004988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2150      	movs	r1, #80	; 0x50
 80043ca:	0018      	movs	r0, r3
 80043cc:	f000 fb3c 	bl	8004a48 <TIM_ITRx_SetConfig>
      break;
 80043d0:	e02e      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6859      	ldr	r1, [r3, #4]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	001a      	movs	r2, r3
 80043e0:	f000 fb00 	bl	80049e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2160      	movs	r1, #96	; 0x60
 80043ea:	0018      	movs	r0, r3
 80043ec:	f000 fb2c 	bl	8004a48 <TIM_ITRx_SetConfig>
      break;
 80043f0:	e01e      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	6859      	ldr	r1, [r3, #4]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	001a      	movs	r2, r3
 8004400:	f000 fac2 	bl	8004988 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2140      	movs	r1, #64	; 0x40
 800440a:	0018      	movs	r0, r3
 800440c:	f000 fb1c 	bl	8004a48 <TIM_ITRx_SetConfig>
      break;
 8004410:	e00e      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0019      	movs	r1, r3
 800441c:	0010      	movs	r0, r2
 800441e:	f000 fb13 	bl	8004a48 <TIM_ITRx_SetConfig>
      break;
 8004422:	e005      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004424:	230f      	movs	r3, #15
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
      break;
 800442c:	e000      	b.n	8004430 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800442e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	223d      	movs	r2, #61	; 0x3d
 8004434:	2101      	movs	r1, #1
 8004436:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	223c      	movs	r2, #60	; 0x3c
 800443c:	2100      	movs	r1, #0
 800443e:	5499      	strb	r1, [r3, r2]

  return status;
 8004440:	230f      	movs	r3, #15
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	ffff00ff 	.word	0xffff00ff

08004454 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449c:	46c0      	nop			; (mov r8, r8)
 800449e:	46bd      	mov	sp, r7
 80044a0:	b002      	add	sp, #8
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <TIM_Base_SetConfig+0xd0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0x20>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <TIM_Base_SetConfig+0xd4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2270      	movs	r2, #112	; 0x70
 80044c8:	4393      	bics	r3, r2
 80044ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a26      	ldr	r2, [pc, #152]	; (8004574 <TIM_Base_SetConfig+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a25      	ldr	r2, [pc, #148]	; (8004578 <TIM_Base_SetConfig+0xd4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a24      	ldr	r2, [pc, #144]	; (800457c <TIM_Base_SetConfig+0xd8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a23      	ldr	r2, [pc, #140]	; (8004580 <TIM_Base_SetConfig+0xdc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a22      	ldr	r2, [pc, #136]	; (8004584 <TIM_Base_SetConfig+0xe0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_Base_SetConfig+0x62>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a21      	ldr	r2, [pc, #132]	; (8004588 <TIM_Base_SetConfig+0xe4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a20      	ldr	r2, [pc, #128]	; (800458c <TIM_Base_SetConfig+0xe8>)
 800450a:	4013      	ands	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2280      	movs	r2, #128	; 0x80
 800451c:	4393      	bics	r3, r2
 800451e:	001a      	movs	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a0c      	ldr	r2, [pc, #48]	; (8004574 <TIM_Base_SetConfig+0xd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00b      	beq.n	800455e <TIM_Base_SetConfig+0xba>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <TIM_Base_SetConfig+0xdc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d007      	beq.n	800455e <TIM_Base_SetConfig+0xba>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <TIM_Base_SetConfig+0xe0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0xba>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a0b      	ldr	r2, [pc, #44]	; (8004588 <TIM_Base_SetConfig+0xe4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d103      	bne.n	8004566 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	615a      	str	r2, [r3, #20]
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b004      	add	sp, #16
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40000400 	.word	0x40000400
 800457c:	40002000 	.word	0x40002000
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800
 800458c:	fffffcff 	.word	0xfffffcff

08004590 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	2201      	movs	r2, #1
 80045a0:	4393      	bics	r3, r2
 80045a2:	001a      	movs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2270      	movs	r2, #112	; 0x70
 80045be:	4393      	bics	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2203      	movs	r2, #3
 80045c6:	4393      	bics	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2202      	movs	r2, #2
 80045d8:	4393      	bics	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <TIM_OC1_SetConfig+0xf8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_OC1_SetConfig+0x76>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a26      	ldr	r2, [pc, #152]	; (800468c <TIM_OC1_SetConfig+0xfc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_OC1_SetConfig+0x76>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a25      	ldr	r2, [pc, #148]	; (8004690 <TIM_OC1_SetConfig+0x100>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_OC1_SetConfig+0x76>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a24      	ldr	r2, [pc, #144]	; (8004694 <TIM_OC1_SetConfig+0x104>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d10c      	bne.n	8004620 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2208      	movs	r2, #8
 800460a:	4393      	bics	r3, r2
 800460c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2204      	movs	r2, #4
 800461c:	4393      	bics	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a19      	ldr	r2, [pc, #100]	; (8004688 <TIM_OC1_SetConfig+0xf8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d00b      	beq.n	8004640 <TIM_OC1_SetConfig+0xb0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a18      	ldr	r2, [pc, #96]	; (800468c <TIM_OC1_SetConfig+0xfc>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC1_SetConfig+0xb0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <TIM_OC1_SetConfig+0x100>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC1_SetConfig+0xb0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	; (8004694 <TIM_OC1_SetConfig+0x104>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d111      	bne.n	8004664 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4a15      	ldr	r2, [pc, #84]	; (8004698 <TIM_OC1_SetConfig+0x108>)
 8004644:	4013      	ands	r3, r2
 8004646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4a14      	ldr	r2, [pc, #80]	; (800469c <TIM_OC1_SetConfig+0x10c>)
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b006      	add	sp, #24
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	fffffeff 	.word	0xfffffeff
 800469c:	fffffdff 	.word	0xfffffdff

080046a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	2210      	movs	r2, #16
 80046b0:	4393      	bics	r3, r2
 80046b2:	001a      	movs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <TIM_OC2_SetConfig+0xe8>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4a2d      	ldr	r2, [pc, #180]	; (800478c <TIM_OC2_SetConfig+0xec>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	021b      	lsls	r3, r3, #8
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2220      	movs	r2, #32
 80046ea:	4393      	bics	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a24      	ldr	r2, [pc, #144]	; (8004790 <TIM_OC2_SetConfig+0xf0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10d      	bne.n	800471e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	4393      	bics	r3, r2
 8004708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2240      	movs	r2, #64	; 0x40
 800471a:	4393      	bics	r3, r2
 800471c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1b      	ldr	r2, [pc, #108]	; (8004790 <TIM_OC2_SetConfig+0xf0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d00b      	beq.n	800473e <TIM_OC2_SetConfig+0x9e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <TIM_OC2_SetConfig+0xf4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d007      	beq.n	800473e <TIM_OC2_SetConfig+0x9e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <TIM_OC2_SetConfig+0xf8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d003      	beq.n	800473e <TIM_OC2_SetConfig+0x9e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <TIM_OC2_SetConfig+0xfc>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d113      	bne.n	8004766 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <TIM_OC2_SetConfig+0x100>)
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4a16      	ldr	r2, [pc, #88]	; (80047a4 <TIM_OC2_SetConfig+0x104>)
 800474a:	4013      	ands	r3, r2
 800474c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b006      	add	sp, #24
 8004786:	bd80      	pop	{r7, pc}
 8004788:	ffff8fff 	.word	0xffff8fff
 800478c:	fffffcff 	.word	0xfffffcff
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	40014800 	.word	0x40014800
 80047a0:	fffffbff 	.word	0xfffffbff
 80047a4:	fffff7ff 	.word	0xfffff7ff

080047a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	4a35      	ldr	r2, [pc, #212]	; (800488c <TIM_OC3_SetConfig+0xe4>)
 80047b8:	401a      	ands	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2270      	movs	r2, #112	; 0x70
 80047d4:	4393      	bics	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2203      	movs	r2, #3
 80047dc:	4393      	bics	r3, r2
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	4a28      	ldr	r2, [pc, #160]	; (8004890 <TIM_OC3_SetConfig+0xe8>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a24      	ldr	r2, [pc, #144]	; (8004894 <TIM_OC3_SetConfig+0xec>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10d      	bne.n	8004822 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4a23      	ldr	r2, [pc, #140]	; (8004898 <TIM_OC3_SetConfig+0xf0>)
 800480a:	4013      	ands	r3, r2
 800480c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4a1f      	ldr	r2, [pc, #124]	; (800489c <TIM_OC3_SetConfig+0xf4>)
 800481e:	4013      	ands	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <TIM_OC3_SetConfig+0xec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00b      	beq.n	8004842 <TIM_OC3_SetConfig+0x9a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a1c      	ldr	r2, [pc, #112]	; (80048a0 <TIM_OC3_SetConfig+0xf8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <TIM_OC3_SetConfig+0x9a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a1b      	ldr	r2, [pc, #108]	; (80048a4 <TIM_OC3_SetConfig+0xfc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d003      	beq.n	8004842 <TIM_OC3_SetConfig+0x9a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <TIM_OC3_SetConfig+0x100>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d113      	bne.n	800486a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4a19      	ldr	r2, [pc, #100]	; (80048ac <TIM_OC3_SetConfig+0x104>)
 8004846:	4013      	ands	r3, r2
 8004848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <TIM_OC3_SetConfig+0x108>)
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	621a      	str	r2, [r3, #32]
}
 8004884:	46c0      	nop			; (mov r8, r8)
 8004886:	46bd      	mov	sp, r7
 8004888:	b006      	add	sp, #24
 800488a:	bd80      	pop	{r7, pc}
 800488c:	fffffeff 	.word	0xfffffeff
 8004890:	fffffdff 	.word	0xfffffdff
 8004894:	40012c00 	.word	0x40012c00
 8004898:	fffff7ff 	.word	0xfffff7ff
 800489c:	fffffbff 	.word	0xfffffbff
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800
 80048ac:	ffffefff 	.word	0xffffefff
 80048b0:	ffffdfff 	.word	0xffffdfff

080048b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a28      	ldr	r2, [pc, #160]	; (8004964 <TIM_OC4_SetConfig+0xb0>)
 80048c4:	401a      	ands	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a22      	ldr	r2, [pc, #136]	; (8004968 <TIM_OC4_SetConfig+0xb4>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4a21      	ldr	r2, [pc, #132]	; (800496c <TIM_OC4_SetConfig+0xb8>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <TIM_OC4_SetConfig+0xbc>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	031b      	lsls	r3, r3, #12
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a19      	ldr	r2, [pc, #100]	; (8004974 <TIM_OC4_SetConfig+0xc0>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d00b      	beq.n	800492c <TIM_OC4_SetConfig+0x78>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <TIM_OC4_SetConfig+0xc4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d007      	beq.n	800492c <TIM_OC4_SetConfig+0x78>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <TIM_OC4_SetConfig+0xc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d003      	beq.n	800492c <TIM_OC4_SetConfig+0x78>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a16      	ldr	r2, [pc, #88]	; (8004980 <TIM_OC4_SetConfig+0xcc>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d109      	bne.n	8004940 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <TIM_OC4_SetConfig+0xd0>)
 8004930:	4013      	ands	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	693a      	ldr	r2, [r7, #16]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	b006      	add	sp, #24
 8004960:	bd80      	pop	{r7, pc}
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	ffffefff 	.word	0xffffefff
 8004968:	ffff8fff 	.word	0xffff8fff
 800496c:	fffffcff 	.word	0xfffffcff
 8004970:	ffffdfff 	.word	0xffffdfff
 8004974:	40012c00 	.word	0x40012c00
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800
 8004984:	ffffbfff 	.word	0xffffbfff

08004988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	2201      	movs	r2, #1
 80049a0:	4393      	bics	r3, r2
 80049a2:	001a      	movs	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	22f0      	movs	r2, #240	; 0xf0
 80049b2:	4393      	bics	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	220a      	movs	r2, #10
 80049c4:	4393      	bics	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	46bd      	mov	sp, r7
 80049e0:	b006      	add	sp, #24
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	2210      	movs	r2, #16
 80049f6:	4393      	bics	r3, r2
 80049f8:	001a      	movs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <TIM_TI2_ConfigInputStage+0x60>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	031b      	lsls	r3, r3, #12
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	22a0      	movs	r2, #160	; 0xa0
 8004a20:	4393      	bics	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	621a      	str	r2, [r3, #32]
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b006      	add	sp, #24
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	ffff0fff 	.word	0xffff0fff

08004a48 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2270      	movs	r2, #112	; 0x70
 8004a5c:	4393      	bics	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	2207      	movs	r2, #7
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	609a      	str	r2, [r3, #8]
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <TIM_ETR_SetConfig+0x3c>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	609a      	str	r2, [r3, #8]
}
 8004ab0:	46c0      	nop			; (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b006      	add	sp, #24
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	ffff00ff 	.word	0xffff00ff

08004abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	223c      	movs	r2, #60	; 0x3c
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e041      	b.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223c      	movs	r2, #60	; 0x3c
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223d      	movs	r2, #61	; 0x3d
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2270      	movs	r2, #112	; 0x70
 8004af8:	4393      	bics	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d009      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a10      	ldr	r2, [pc, #64]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10c      	bne.n	8004b46 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	4393      	bics	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	223d      	movs	r2, #61	; 0x3d
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	223c      	movs	r2, #60	; 0x3c
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b004      	add	sp, #16
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40012c00 	.word	0x40012c00
 8004b64:	40000400 	.word	0x40000400
 8004b68:	40014000 	.word	0x40014000

08004b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b84:	46c0      	nop			; (mov r8, r8)
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b002      	add	sp, #8
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e044      	b.n	8004c28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d107      	bne.n	8004bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2274      	movs	r2, #116	; 0x74
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fb ff27 	bl	8000a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2224      	movs	r2, #36	; 0x24
 8004bba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	438a      	bics	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f000 fb0c 	bl	80051ec <UART_SetConfig>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e024      	b.n	8004c28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 fc57 	bl	800549c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	490d      	ldr	r1, [pc, #52]	; (8004c30 <HAL_UART_Init+0xa4>)
 8004bfa:	400a      	ands	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2108      	movs	r1, #8
 8004c0a:	438a      	bics	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	0018      	movs	r0, r3
 8004c22:	f000 fcef 	bl	8005604 <UART_CheckIdleState>
 8004c26:	0003      	movs	r3, r0
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	fffff7ff 	.word	0xfffff7ff

08004c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b0ab      	sub	sp, #172	; 0xac
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	22a4      	movs	r2, #164	; 0xa4
 8004c44:	18b9      	adds	r1, r7, r2
 8004c46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	20a0      	movs	r0, #160	; 0xa0
 8004c50:	1839      	adds	r1, r7, r0
 8004c52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	219c      	movs	r1, #156	; 0x9c
 8004c5c:	1879      	adds	r1, r7, r1
 8004c5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004c60:	0011      	movs	r1, r2
 8004c62:	18bb      	adds	r3, r7, r2
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a99      	ldr	r2, [pc, #612]	; (8004ecc <HAL_UART_IRQHandler+0x298>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2298      	movs	r2, #152	; 0x98
 8004c6c:	18bc      	adds	r4, r7, r2
 8004c6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004c70:	18bb      	adds	r3, r7, r2
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d114      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004c82:	183b      	adds	r3, r7, r0
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2220      	movs	r2, #32
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d100      	bne.n	8004c96 <HAL_UART_IRQHandler+0x62>
 8004c94:	e27e      	b.n	8005194 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	0010      	movs	r0, r2
 8004c9e:	4798      	blx	r3
      }
      return;
 8004ca0:	e278      	b.n	8005194 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004ca2:	2398      	movs	r3, #152	; 0x98
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d100      	bne.n	8004cae <HAL_UART_IRQHandler+0x7a>
 8004cac:	e114      	b.n	8004ed8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004cae:	239c      	movs	r3, #156	; 0x9c
 8004cb0:	18fb      	adds	r3, r7, r3
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	d106      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004cba:	23a0      	movs	r3, #160	; 0xa0
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a83      	ldr	r2, [pc, #524]	; (8004ed0 <HAL_UART_IRQHandler+0x29c>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d100      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x94>
 8004cc6:	e107      	b.n	8004ed8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004cc8:	23a4      	movs	r3, #164	; 0xa4
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d012      	beq.n	8004cfa <HAL_UART_IRQHandler+0xc6>
 8004cd4:	23a0      	movs	r3, #160	; 0xa0
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2280      	movs	r2, #128	; 0x80
 8004cee:	589b      	ldr	r3, [r3, r2]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2180      	movs	r1, #128	; 0x80
 8004cf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004cfa:	23a4      	movs	r3, #164	; 0xa4
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2202      	movs	r2, #2
 8004d02:	4013      	ands	r3, r2
 8004d04:	d011      	beq.n	8004d2a <HAL_UART_IRQHandler+0xf6>
 8004d06:	239c      	movs	r3, #156	; 0x9c
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2202      	movs	r2, #2
 8004d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2280      	movs	r2, #128	; 0x80
 8004d1e:	589b      	ldr	r3, [r3, r2]
 8004d20:	2204      	movs	r2, #4
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d2a:	23a4      	movs	r3, #164	; 0xa4
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2204      	movs	r2, #4
 8004d32:	4013      	ands	r3, r2
 8004d34:	d011      	beq.n	8004d5a <HAL_UART_IRQHandler+0x126>
 8004d36:	239c      	movs	r3, #156	; 0x9c
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2204      	movs	r2, #4
 8004d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2280      	movs	r2, #128	; 0x80
 8004d4e:	589b      	ldr	r3, [r3, r2]
 8004d50:	2202      	movs	r2, #2
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2180      	movs	r1, #128	; 0x80
 8004d58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d5a:	23a4      	movs	r3, #164	; 0xa4
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2208      	movs	r2, #8
 8004d62:	4013      	ands	r3, r2
 8004d64:	d017      	beq.n	8004d96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d66:	23a0      	movs	r3, #160	; 0xa0
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d105      	bne.n	8004d7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004d72:	239c      	movs	r3, #156	; 0x9c
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004d7c:	d00b      	beq.n	8004d96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2208      	movs	r2, #8
 8004d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2280      	movs	r2, #128	; 0x80
 8004d8a:	589b      	ldr	r3, [r3, r2]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2180      	movs	r1, #128	; 0x80
 8004d94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d96:	23a4      	movs	r3, #164	; 0xa4
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	2380      	movs	r3, #128	; 0x80
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	4013      	ands	r3, r2
 8004da2:	d013      	beq.n	8004dcc <HAL_UART_IRQHandler+0x198>
 8004da4:	23a0      	movs	r3, #160	; 0xa0
 8004da6:	18fb      	adds	r3, r7, r3
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	04db      	lsls	r3, r3, #19
 8004dae:	4013      	ands	r3, r2
 8004db0:	d00c      	beq.n	8004dcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2280      	movs	r2, #128	; 0x80
 8004db8:	0112      	lsls	r2, r2, #4
 8004dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	589b      	ldr	r3, [r3, r2]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2280      	movs	r2, #128	; 0x80
 8004dd0:	589b      	ldr	r3, [r3, r2]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d100      	bne.n	8004dd8 <HAL_UART_IRQHandler+0x1a4>
 8004dd6:	e1df      	b.n	8005198 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004dd8:	23a4      	movs	r3, #164	; 0xa4
 8004dda:	18fb      	adds	r3, r7, r3
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2220      	movs	r2, #32
 8004de0:	4013      	ands	r3, r2
 8004de2:	d00e      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004de4:	23a0      	movs	r3, #160	; 0xa0
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2220      	movs	r2, #32
 8004dec:	4013      	ands	r3, r2
 8004dee:	d008      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	0010      	movs	r0, r2
 8004e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2280      	movs	r2, #128	; 0x80
 8004e06:	589b      	ldr	r3, [r3, r2]
 8004e08:	2194      	movs	r1, #148	; 0x94
 8004e0a:	187a      	adds	r2, r7, r1
 8004e0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b40      	cmp	r3, #64	; 0x40
 8004e1a:	d004      	beq.n	8004e26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e1c:	187b      	adds	r3, r7, r1
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2228      	movs	r2, #40	; 0x28
 8004e22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e24:	d047      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 fcf7 	bl	800581c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d137      	bne.n	8004eac <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e44:	2090      	movs	r0, #144	; 0x90
 8004e46:	183a      	adds	r2, r7, r0
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e50:	f383 8810 	msr	PRIMASK, r3
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2140      	movs	r1, #64	; 0x40
 8004e62:	438a      	bics	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	183b      	adds	r3, r7, r0
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e6e:	f383 8810 	msr	PRIMASK, r3
}
 8004e72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d012      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <HAL_UART_IRQHandler+0x2a0>)
 8004e82:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fc f8df 	bl	800104c <HAL_DMA_Abort_IT>
 8004e8e:	1e03      	subs	r3, r0, #0
 8004e90:	d01a      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e012      	b.n	8004ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f000 f98d 	bl	80051c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eaa:	e00d      	b.n	8004ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f000 f988 	bl	80051c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e008      	b.n	8004ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f983 	bl	80051c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2280      	movs	r2, #128	; 0x80
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ec6:	e167      	b.n	8005198 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	46c0      	nop			; (mov r8, r8)
    return;
 8004eca:	e165      	b.n	8005198 <HAL_UART_IRQHandler+0x564>
 8004ecc:	0000080f 	.word	0x0000080f
 8004ed0:	04000120 	.word	0x04000120
 8004ed4:	080058e1 	.word	0x080058e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d000      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x2ae>
 8004ee0:	e131      	b.n	8005146 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004ee2:	23a4      	movs	r3, #164	; 0xa4
 8004ee4:	18fb      	adds	r3, r7, r3
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	4013      	ands	r3, r2
 8004eec:	d100      	bne.n	8004ef0 <HAL_UART_IRQHandler+0x2bc>
 8004eee:	e12a      	b.n	8005146 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ef0:	23a0      	movs	r3, #160	; 0xa0
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d100      	bne.n	8004efe <HAL_UART_IRQHandler+0x2ca>
 8004efc:	e123      	b.n	8005146 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2210      	movs	r2, #16
 8004f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2240      	movs	r2, #64	; 0x40
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d000      	beq.n	8004f16 <HAL_UART_IRQHandler+0x2e2>
 8004f14:	e09b      	b.n	800504e <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	217e      	movs	r1, #126	; 0x7e
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d100      	bne.n	8004f2e <HAL_UART_IRQHandler+0x2fa>
 8004f2c:	e136      	b.n	800519c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2258      	movs	r2, #88	; 0x58
 8004f32:	5a9b      	ldrh	r3, [r3, r2]
 8004f34:	187a      	adds	r2, r7, r1
 8004f36:	8812      	ldrh	r2, [r2, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d300      	bcc.n	8004f3e <HAL_UART_IRQHandler+0x30a>
 8004f3c:	e12e      	b.n	800519c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	187a      	adds	r2, r7, r1
 8004f42:	215a      	movs	r1, #90	; 0x5a
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d06e      	beq.n	8005030 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f52:	f3ef 8310 	mrs	r3, PRIMASK
 8004f56:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f62:	f383 8810 	msr	PRIMASK, r3
}
 8004f66:	46c0      	nop			; (mov r8, r8)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	498e      	ldr	r1, [pc, #568]	; (80051ac <HAL_UART_IRQHandler+0x578>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	f383 8810 	msr	PRIMASK, r3
}
 8004f82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f84:	f3ef 8310 	mrs	r3, PRIMASK
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8004f8e:	2301      	movs	r3, #1
 8004f90:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f94:	f383 8810 	msr	PRIMASK, r3
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	438a      	bics	r2, r1
 8004fa8:	609a      	str	r2, [r3, #8]
 8004faa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fac:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb0:	f383 8810 	msr	PRIMASK, r3
}
 8004fb4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fba:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc6:	f383 8810 	msr	PRIMASK, r3
}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2140      	movs	r1, #64	; 0x40
 8004fd8:	438a      	bics	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fde:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe2:	f383 8810 	msr	PRIMASK, r3
}
 8004fe6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff8:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ffe:	2301      	movs	r3, #1
 8005000:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005004:	f383 8810 	msr	PRIMASK, r3
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2110      	movs	r1, #16
 8005016:	438a      	bics	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005020:	f383 8810 	msr	PRIMASK, r3
}
 8005024:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	0018      	movs	r0, r3
 800502c:	f7fb ffd6 	bl	8000fdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2258      	movs	r2, #88	; 0x58
 8005034:	5a9a      	ldrh	r2, [r3, r2]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	215a      	movs	r1, #90	; 0x5a
 800503a:	5a5b      	ldrh	r3, [r3, r1]
 800503c:	b29b      	uxth	r3, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	0011      	movs	r1, r2
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f8c4 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800504c:	e0a6      	b.n	800519c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2258      	movs	r2, #88	; 0x58
 8005052:	5a99      	ldrh	r1, [r3, r2]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	225a      	movs	r2, #90	; 0x5a
 8005058:	5a9b      	ldrh	r3, [r3, r2]
 800505a:	b29a      	uxth	r2, r3
 800505c:	208e      	movs	r0, #142	; 0x8e
 800505e:	183b      	adds	r3, r7, r0
 8005060:	1a8a      	subs	r2, r1, r2
 8005062:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	225a      	movs	r2, #90	; 0x5a
 8005068:	5a9b      	ldrh	r3, [r3, r2]
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d100      	bne.n	8005072 <HAL_UART_IRQHandler+0x43e>
 8005070:	e096      	b.n	80051a0 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 8005072:	183b      	adds	r3, r7, r0
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d100      	bne.n	800507c <HAL_UART_IRQHandler+0x448>
 800507a:	e091      	b.n	80051a0 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800507c:	f3ef 8310 	mrs	r3, PRIMASK
 8005080:	60fb      	str	r3, [r7, #12]
  return(result);
 8005082:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005084:	2488      	movs	r4, #136	; 0x88
 8005086:	193a      	adds	r2, r7, r4
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	2301      	movs	r3, #1
 800508c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4943      	ldr	r1, [pc, #268]	; (80051b0 <HAL_UART_IRQHandler+0x57c>)
 80050a2:	400a      	ands	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	193b      	adds	r3, r7, r4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f383 8810 	msr	PRIMASK, r3
}
 80050b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80050ba:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	2484      	movs	r4, #132	; 0x84
 80050be:	193a      	adds	r2, r7, r4
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	2301      	movs	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	438a      	bics	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]
 80050de:	193b      	adds	r3, r7, r4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	f383 8810 	msr	PRIMASK, r3
}
 80050ea:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005106:	2480      	movs	r4, #128	; 0x80
 8005108:	193a      	adds	r2, r7, r4
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	2301      	movs	r3, #1
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2110      	movs	r1, #16
 8005124:	438a      	bics	r2, r1
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	193b      	adds	r3, r7, r4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	f383 8810 	msr	PRIMASK, r3
}
 8005134:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005136:	183b      	adds	r3, r7, r0
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0011      	movs	r1, r2
 800513e:	0018      	movs	r0, r3
 8005140:	f000 f848 	bl	80051d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005144:	e02c      	b.n	80051a0 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005146:	23a4      	movs	r3, #164	; 0xa4
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2280      	movs	r2, #128	; 0x80
 800514e:	4013      	ands	r3, r2
 8005150:	d00f      	beq.n	8005172 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005152:	23a0      	movs	r3, #160	; 0xa0
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2280      	movs	r2, #128	; 0x80
 800515a:	4013      	ands	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01e      	beq.n	80051a4 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	0010      	movs	r0, r2
 800516e:	4798      	blx	r3
    }
    return;
 8005170:	e018      	b.n	80051a4 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005172:	23a4      	movs	r3, #164	; 0xa4
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2240      	movs	r2, #64	; 0x40
 800517a:	4013      	ands	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_UART_IRQHandler+0x572>
 800517e:	23a0      	movs	r3, #160	; 0xa0
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2240      	movs	r2, #64	; 0x40
 8005186:	4013      	ands	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 fbbe 	bl	800590e <UART_EndTransmit_IT>
    return;
 8005192:	e008      	b.n	80051a6 <HAL_UART_IRQHandler+0x572>
      return;
 8005194:	46c0      	nop			; (mov r8, r8)
 8005196:	e006      	b.n	80051a6 <HAL_UART_IRQHandler+0x572>
    return;
 8005198:	46c0      	nop			; (mov r8, r8)
 800519a:	e004      	b.n	80051a6 <HAL_UART_IRQHandler+0x572>
      return;
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	e002      	b.n	80051a6 <HAL_UART_IRQHandler+0x572>
      return;
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	e000      	b.n	80051a6 <HAL_UART_IRQHandler+0x572>
    return;
 80051a4:	46c0      	nop			; (mov r8, r8)
  }

}
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b02b      	add	sp, #172	; 0xac
 80051aa:	bd90      	pop	{r4, r7, pc}
 80051ac:	fffffeff 	.word	0xfffffeff
 80051b0:	fffffedf 	.word	0xfffffedf

080051b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	b002      	add	sp, #8
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b002      	add	sp, #8
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	000a      	movs	r2, r1
 80051de:	1cbb      	adds	r3, r7, #2
 80051e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	46bd      	mov	sp, r7
 80051e6:	b002      	add	sp, #8
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f4:	231e      	movs	r3, #30
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a97      	ldr	r2, [pc, #604]	; (8005478 <UART_SetConfig+0x28c>)
 800521c:	4013      	ands	r3, r2
 800521e:	0019      	movs	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	430a      	orrs	r2, r1
 8005228:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a92      	ldr	r2, [pc, #584]	; (800547c <UART_SetConfig+0x290>)
 8005232:	4013      	ands	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4a89      	ldr	r2, [pc, #548]	; (8005480 <UART_SetConfig+0x294>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	430a      	orrs	r2, r1
 8005266:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a85      	ldr	r2, [pc, #532]	; (8005484 <UART_SetConfig+0x298>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d127      	bne.n	80052c2 <UART_SetConfig+0xd6>
 8005272:	4b85      	ldr	r3, [pc, #532]	; (8005488 <UART_SetConfig+0x29c>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	2203      	movs	r2, #3
 8005278:	4013      	ands	r3, r2
 800527a:	2b03      	cmp	r3, #3
 800527c:	d00d      	beq.n	800529a <UART_SetConfig+0xae>
 800527e:	d81b      	bhi.n	80052b8 <UART_SetConfig+0xcc>
 8005280:	2b02      	cmp	r3, #2
 8005282:	d014      	beq.n	80052ae <UART_SetConfig+0xc2>
 8005284:	d818      	bhi.n	80052b8 <UART_SetConfig+0xcc>
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <UART_SetConfig+0xa4>
 800528a:	2b01      	cmp	r3, #1
 800528c:	d00a      	beq.n	80052a4 <UART_SetConfig+0xb8>
 800528e:	e013      	b.n	80052b8 <UART_SetConfig+0xcc>
 8005290:	231f      	movs	r3, #31
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e035      	b.n	8005306 <UART_SetConfig+0x11a>
 800529a:	231f      	movs	r3, #31
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e030      	b.n	8005306 <UART_SetConfig+0x11a>
 80052a4:	231f      	movs	r3, #31
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	2204      	movs	r2, #4
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e02b      	b.n	8005306 <UART_SetConfig+0x11a>
 80052ae:	231f      	movs	r3, #31
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	2208      	movs	r2, #8
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e026      	b.n	8005306 <UART_SetConfig+0x11a>
 80052b8:	231f      	movs	r3, #31
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	2210      	movs	r2, #16
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e021      	b.n	8005306 <UART_SetConfig+0x11a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a71      	ldr	r2, [pc, #452]	; (800548c <UART_SetConfig+0x2a0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d104      	bne.n	80052d6 <UART_SetConfig+0xea>
 80052cc:	231f      	movs	r3, #31
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e017      	b.n	8005306 <UART_SetConfig+0x11a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a6d      	ldr	r2, [pc, #436]	; (8005490 <UART_SetConfig+0x2a4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d104      	bne.n	80052ea <UART_SetConfig+0xfe>
 80052e0:	231f      	movs	r3, #31
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	2200      	movs	r2, #0
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e00d      	b.n	8005306 <UART_SetConfig+0x11a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a69      	ldr	r2, [pc, #420]	; (8005494 <UART_SetConfig+0x2a8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d104      	bne.n	80052fe <UART_SetConfig+0x112>
 80052f4:	231f      	movs	r3, #31
 80052f6:	18fb      	adds	r3, r7, r3
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e003      	b.n	8005306 <UART_SetConfig+0x11a>
 80052fe:	231f      	movs	r3, #31
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	2210      	movs	r2, #16
 8005304:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	69da      	ldr	r2, [r3, #28]
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	429a      	cmp	r2, r3
 8005310:	d15d      	bne.n	80053ce <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8005312:	231f      	movs	r3, #31
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d015      	beq.n	8005348 <UART_SetConfig+0x15c>
 800531c:	dc18      	bgt.n	8005350 <UART_SetConfig+0x164>
 800531e:	2b04      	cmp	r3, #4
 8005320:	d00d      	beq.n	800533e <UART_SetConfig+0x152>
 8005322:	dc15      	bgt.n	8005350 <UART_SetConfig+0x164>
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <UART_SetConfig+0x142>
 8005328:	2b02      	cmp	r3, #2
 800532a:	d005      	beq.n	8005338 <UART_SetConfig+0x14c>
 800532c:	e010      	b.n	8005350 <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7fe fc45 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8005332:	0003      	movs	r3, r0
 8005334:	61bb      	str	r3, [r7, #24]
        break;
 8005336:	e012      	b.n	800535e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005338:	4b57      	ldr	r3, [pc, #348]	; (8005498 <UART_SetConfig+0x2ac>)
 800533a:	61bb      	str	r3, [r7, #24]
        break;
 800533c:	e00f      	b.n	800535e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7fe fbcd 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8005342:	0003      	movs	r3, r0
 8005344:	61bb      	str	r3, [r7, #24]
        break;
 8005346:	e00a      	b.n	800535e <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	61bb      	str	r3, [r7, #24]
        break;
 800534e:	e006      	b.n	800535e <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005354:	231e      	movs	r3, #30
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
        break;
 800535c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d100      	bne.n	8005366 <UART_SetConfig+0x17a>
 8005364:	e07b      	b.n	800545e <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	005a      	lsls	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	18d2      	adds	r2, r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	0019      	movs	r1, r3
 8005378:	0010      	movs	r0, r2
 800537a:	f7fa fec5 	bl	8000108 <__udivsi3>
 800537e:	0003      	movs	r3, r0
 8005380:	b29b      	uxth	r3, r3
 8005382:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d91c      	bls.n	80053c4 <UART_SetConfig+0x1d8>
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	2380      	movs	r3, #128	; 0x80
 800538e:	025b      	lsls	r3, r3, #9
 8005390:	429a      	cmp	r2, r3
 8005392:	d217      	bcs.n	80053c4 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	b29a      	uxth	r2, r3
 8005398:	200e      	movs	r0, #14
 800539a:	183b      	adds	r3, r7, r0
 800539c:	210f      	movs	r1, #15
 800539e:	438a      	bics	r2, r1
 80053a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	085b      	lsrs	r3, r3, #1
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	2207      	movs	r2, #7
 80053aa:	4013      	ands	r3, r2
 80053ac:	b299      	uxth	r1, r3
 80053ae:	183b      	adds	r3, r7, r0
 80053b0:	183a      	adds	r2, r7, r0
 80053b2:	8812      	ldrh	r2, [r2, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	183a      	adds	r2, r7, r0
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	e04c      	b.n	800545e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 80053c4:	231e      	movs	r3, #30
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e047      	b.n	800545e <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ce:	231f      	movs	r3, #31
 80053d0:	18fb      	adds	r3, r7, r3
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d015      	beq.n	8005404 <UART_SetConfig+0x218>
 80053d8:	dc18      	bgt.n	800540c <UART_SetConfig+0x220>
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d00d      	beq.n	80053fa <UART_SetConfig+0x20e>
 80053de:	dc15      	bgt.n	800540c <UART_SetConfig+0x220>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <UART_SetConfig+0x1fe>
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d005      	beq.n	80053f4 <UART_SetConfig+0x208>
 80053e8:	e010      	b.n	800540c <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ea:	f7fe fbe7 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 80053ee:	0003      	movs	r3, r0
 80053f0:	61bb      	str	r3, [r7, #24]
        break;
 80053f2:	e012      	b.n	800541a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053f4:	4b28      	ldr	r3, [pc, #160]	; (8005498 <UART_SetConfig+0x2ac>)
 80053f6:	61bb      	str	r3, [r7, #24]
        break;
 80053f8:	e00f      	b.n	800541a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053fa:	f7fe fb6f 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]
        break;
 8005402:	e00a      	b.n	800541a <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005404:	2380      	movs	r3, #128	; 0x80
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	61bb      	str	r3, [r7, #24]
        break;
 800540a:	e006      	b.n	800541a <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005410:	231e      	movs	r3, #30
 8005412:	18fb      	adds	r3, r7, r3
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
        break;
 8005418:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01e      	beq.n	800545e <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	085a      	lsrs	r2, r3, #1
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	18d2      	adds	r2, r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	0019      	movs	r1, r3
 8005430:	0010      	movs	r0, r2
 8005432:	f7fa fe69 	bl	8000108 <__udivsi3>
 8005436:	0003      	movs	r3, r0
 8005438:	b29b      	uxth	r3, r3
 800543a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	d909      	bls.n	8005456 <UART_SetConfig+0x26a>
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	025b      	lsls	r3, r3, #9
 8005448:	429a      	cmp	r2, r3
 800544a:	d204      	bcs.n	8005456 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	e003      	b.n	800545e <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8005456:	231e      	movs	r3, #30
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800546a:	231e      	movs	r3, #30
 800546c:	18fb      	adds	r3, r7, r3
 800546e:	781b      	ldrb	r3, [r3, #0]
}
 8005470:	0018      	movs	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	b008      	add	sp, #32
 8005476:	bd80      	pop	{r7, pc}
 8005478:	efff69f3 	.word	0xefff69f3
 800547c:	ffffcfff 	.word	0xffffcfff
 8005480:	fffff4ff 	.word	0xfffff4ff
 8005484:	40013800 	.word	0x40013800
 8005488:	40021000 	.word	0x40021000
 800548c:	40004400 	.word	0x40004400
 8005490:	40004800 	.word	0x40004800
 8005494:	40004c00 	.word	0x40004c00
 8005498:	007a1200 	.word	0x007a1200

0800549c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2201      	movs	r2, #1
 80054aa:	4013      	ands	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a4a      	ldr	r2, [pc, #296]	; (80055e0 <UART_AdvFeatureConfig+0x144>)
 80054b6:	4013      	ands	r3, r2
 80054b8:	0019      	movs	r1, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	2202      	movs	r2, #2
 80054cc:	4013      	ands	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	4a43      	ldr	r2, [pc, #268]	; (80055e4 <UART_AdvFeatureConfig+0x148>)
 80054d8:	4013      	ands	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	2204      	movs	r2, #4
 80054ee:	4013      	ands	r3, r2
 80054f0:	d00b      	beq.n	800550a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a3b      	ldr	r2, [pc, #236]	; (80055e8 <UART_AdvFeatureConfig+0x14c>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	0019      	movs	r1, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2208      	movs	r2, #8
 8005510:	4013      	ands	r3, r2
 8005512:	d00b      	beq.n	800552c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	4a34      	ldr	r2, [pc, #208]	; (80055ec <UART_AdvFeatureConfig+0x150>)
 800551c:	4013      	ands	r3, r2
 800551e:	0019      	movs	r1, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	2210      	movs	r2, #16
 8005532:	4013      	ands	r3, r2
 8005534:	d00b      	beq.n	800554e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4a2c      	ldr	r2, [pc, #176]	; (80055f0 <UART_AdvFeatureConfig+0x154>)
 800553e:	4013      	ands	r3, r2
 8005540:	0019      	movs	r1, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005552:	2220      	movs	r2, #32
 8005554:	4013      	ands	r3, r2
 8005556:	d00b      	beq.n	8005570 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	4a25      	ldr	r2, [pc, #148]	; (80055f4 <UART_AdvFeatureConfig+0x158>)
 8005560:	4013      	ands	r3, r2
 8005562:	0019      	movs	r1, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	2240      	movs	r2, #64	; 0x40
 8005576:	4013      	ands	r3, r2
 8005578:	d01d      	beq.n	80055b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	4a1d      	ldr	r2, [pc, #116]	; (80055f8 <UART_AdvFeatureConfig+0x15c>)
 8005582:	4013      	ands	r3, r2
 8005584:	0019      	movs	r1, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005596:	2380      	movs	r3, #128	; 0x80
 8005598:	035b      	lsls	r3, r3, #13
 800559a:	429a      	cmp	r2, r3
 800559c:	d10b      	bne.n	80055b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <UART_AdvFeatureConfig+0x160>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	0019      	movs	r1, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	2280      	movs	r2, #128	; 0x80
 80055bc:	4013      	ands	r3, r2
 80055be:	d00b      	beq.n	80055d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	4a0e      	ldr	r2, [pc, #56]	; (8005600 <UART_AdvFeatureConfig+0x164>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	0019      	movs	r1, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	605a      	str	r2, [r3, #4]
  }
}
 80055d8:	46c0      	nop			; (mov r8, r8)
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	fffdffff 	.word	0xfffdffff
 80055e4:	fffeffff 	.word	0xfffeffff
 80055e8:	fffbffff 	.word	0xfffbffff
 80055ec:	ffff7fff 	.word	0xffff7fff
 80055f0:	ffffefff 	.word	0xffffefff
 80055f4:	ffffdfff 	.word	0xffffdfff
 80055f8:	ffefffff 	.word	0xffefffff
 80055fc:	ff9fffff 	.word	0xff9fffff
 8005600:	fff7ffff 	.word	0xfff7ffff

08005604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af02      	add	r7, sp, #8
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2280      	movs	r2, #128	; 0x80
 8005610:	2100      	movs	r1, #0
 8005612:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005614:	f7fb fbfa 	bl	8000e0c <HAL_GetTick>
 8005618:	0003      	movs	r3, r0
 800561a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2208      	movs	r2, #8
 8005624:	4013      	ands	r3, r2
 8005626:	2b08      	cmp	r3, #8
 8005628:	d10c      	bne.n	8005644 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	0391      	lsls	r1, r2, #14
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <UART_CheckIdleState+0x8c>)
 8005634:	9200      	str	r2, [sp, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	f000 f82c 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d001      	beq.n	8005644 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e021      	b.n	8005688 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2204      	movs	r2, #4
 800564c:	4013      	ands	r3, r2
 800564e:	2b04      	cmp	r3, #4
 8005650:	d10c      	bne.n	800566c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2280      	movs	r2, #128	; 0x80
 8005656:	03d1      	lsls	r1, r2, #15
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4a0d      	ldr	r2, [pc, #52]	; (8005690 <UART_CheckIdleState+0x8c>)
 800565c:	9200      	str	r2, [sp, #0]
 800565e:	2200      	movs	r2, #0
 8005660:	f000 f818 	bl	8005694 <UART_WaitOnFlagUntilTimeout>
 8005664:	1e03      	subs	r3, r0, #0
 8005666:	d001      	beq.n	800566c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e00d      	b.n	8005688 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2274      	movs	r2, #116	; 0x74
 8005682:	2100      	movs	r1, #0
 8005684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	0018      	movs	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	b004      	add	sp, #16
 800568e:	bd80      	pop	{r7, pc}
 8005690:	01ffffff 	.word	0x01ffffff

08005694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b094      	sub	sp, #80	; 0x50
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	1dfb      	adds	r3, r7, #7
 80056a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	e0a3      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a8:	3301      	adds	r3, #1
 80056aa:	d100      	bne.n	80056ae <UART_WaitOnFlagUntilTimeout+0x1a>
 80056ac:	e09f      	b.n	80057ee <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ae:	f7fb fbad 	bl	8000e0c <HAL_GetTick>
 80056b2:	0002      	movs	r2, r0
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d302      	bcc.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d13d      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c4:	f3ef 8310 	mrs	r3, PRIMASK
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056cc:	647b      	str	r3, [r7, #68]	; 0x44
 80056ce:	2301      	movs	r3, #1
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	f383 8810 	msr	PRIMASK, r3
}
 80056d8:	46c0      	nop			; (mov r8, r8)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	494c      	ldr	r1, [pc, #304]	; (8005818 <UART_WaitOnFlagUntilTimeout+0x184>)
 80056e6:	400a      	ands	r2, r1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ec:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f6:	f3ef 8310 	mrs	r3, PRIMASK
 80056fa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fe:	643b      	str	r3, [r7, #64]	; 0x40
 8005700:	2301      	movs	r3, #1
 8005702:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	f383 8810 	msr	PRIMASK, r3
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689a      	ldr	r2, [r3, #8]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2101      	movs	r1, #1
 8005718:	438a      	bics	r2, r1
 800571a:	609a      	str	r2, [r3, #8]
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005722:	f383 8810 	msr	PRIMASK, r3
}
 8005726:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2274      	movs	r2, #116	; 0x74
 8005738:	2100      	movs	r1, #0
 800573a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e067      	b.n	8005810 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2204      	movs	r2, #4
 8005748:	4013      	ands	r3, r2
 800574a:	d050      	beq.n	80057ee <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69da      	ldr	r2, [r3, #28]
 8005752:	2380      	movs	r3, #128	; 0x80
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	401a      	ands	r2, r3
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	429a      	cmp	r2, r3
 800575e:	d146      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2280      	movs	r2, #128	; 0x80
 8005766:	0112      	lsls	r2, r2, #4
 8005768:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576a:	f3ef 8310 	mrs	r3, PRIMASK
 800576e:	613b      	str	r3, [r7, #16]
  return(result);
 8005770:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005772:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4923      	ldr	r1, [pc, #140]	; (8005818 <UART_WaitOnFlagUntilTimeout+0x184>)
 800578c:	400a      	ands	r2, r1
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005792:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	f383 8810 	msr	PRIMASK, r3
}
 800579a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800579c:	f3ef 8310 	mrs	r3, PRIMASK
 80057a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80057a2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a6:	2301      	movs	r3, #1
 80057a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	f383 8810 	msr	PRIMASK, r3
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2101      	movs	r1, #1
 80057be:	438a      	bics	r2, r1
 80057c0:	609a      	str	r2, [r3, #8]
 80057c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	f383 8810 	msr	PRIMASK, r3
}
 80057cc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2220      	movs	r2, #32
 80057d2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	2120      	movs	r1, #32
 80057e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2274      	movs	r2, #116	; 0x74
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e010      	b.n	8005810 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4013      	ands	r3, r2
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	425a      	negs	r2, r3
 80057fe:	4153      	adcs	r3, r2
 8005800:	b2db      	uxtb	r3, r3
 8005802:	001a      	movs	r2, r3
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d100      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x17a>
 800580c:	e74b      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b014      	add	sp, #80	; 0x50
 8005816:	bd80      	pop	{r7, pc}
 8005818:	fffffe5f 	.word	0xfffffe5f

0800581c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08e      	sub	sp, #56	; 0x38
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005824:	f3ef 8310 	mrs	r3, PRIMASK
 8005828:	617b      	str	r3, [r7, #20]
  return(result);
 800582a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
 800582e:	2301      	movs	r3, #1
 8005830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f383 8810 	msr	PRIMASK, r3
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4925      	ldr	r1, [pc, #148]	; (80058dc <UART_EndRxTransfer+0xc0>)
 8005846:	400a      	ands	r2, r1
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f383 8810 	msr	PRIMASK, r3
}
 8005854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005856:	f3ef 8310 	mrs	r3, PRIMASK
 800585a:	623b      	str	r3, [r7, #32]
  return(result);
 800585c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	f383 8810 	msr	PRIMASK, r3
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2101      	movs	r1, #1
 8005878:	438a      	bics	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	f383 8810 	msr	PRIMASK, r3
}
 8005886:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800588c:	2b01      	cmp	r3, #1
 800588e:	d118      	bne.n	80058c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005890:	f3ef 8310 	mrs	r3, PRIMASK
 8005894:	60bb      	str	r3, [r7, #8]
  return(result);
 8005896:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589a:	2301      	movs	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f383 8810 	msr	PRIMASK, r3
}
 80058a4:	46c0      	nop			; (mov r8, r8)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2110      	movs	r1, #16
 80058b2:	438a      	bics	r2, r1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f383 8810 	msr	PRIMASK, r3
}
 80058c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2220      	movs	r2, #32
 80058c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b00e      	add	sp, #56	; 0x38
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	fffffedf 	.word	0xfffffedf

080058e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	225a      	movs	r2, #90	; 0x5a
 80058f2:	2100      	movs	r1, #0
 80058f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2252      	movs	r2, #82	; 0x52
 80058fa:	2100      	movs	r1, #0
 80058fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff fc5f 	bl	80051c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b004      	add	sp, #16
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b086      	sub	sp, #24
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005916:	f3ef 8310 	mrs	r3, PRIMASK
 800591a:	60bb      	str	r3, [r7, #8]
  return(result);
 800591c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	2301      	movs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f383 8810 	msr	PRIMASK, r3
}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	438a      	bics	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f383 8810 	msr	PRIMASK, r3
}
 8005946:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	0018      	movs	r0, r3
 8005958:	f7ff fc2c 	bl	80051b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b006      	add	sp, #24
 8005962:	bd80      	pop	{r7, pc}

08005964 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2244      	movs	r2, #68	; 0x44
 8005970:	2100      	movs	r1, #0
 8005972:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <USB_EnableGlobalInt+0x28>)
 8005976:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	b299      	uxth	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2240      	movs	r2, #64	; 0x40
 8005980:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b004      	add	sp, #16
 800598a:	bd80      	pop	{r7, pc}
 800598c:	0000bf80 	.word	0x0000bf80

08005990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <USB_DisableGlobalInt+0x30>)
 800599a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2240      	movs	r2, #64	; 0x40
 80059a0:	5a9b      	ldrh	r3, [r3, r2]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	b292      	uxth	r2, r2
 80059a8:	43d2      	mvns	r2, r2
 80059aa:	b292      	uxth	r2, r2
 80059ac:	4013      	ands	r3, r2
 80059ae:	b299      	uxth	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2240      	movs	r2, #64	; 0x40
 80059b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	0018      	movs	r0, r3
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b004      	add	sp, #16
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	0000bf80 	.word	0x0000bf80

080059c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059c4:	b084      	sub	sp, #16
 80059c6:	b590      	push	{r4, r7, lr}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	2004      	movs	r0, #4
 80059d0:	2410      	movs	r4, #16
 80059d2:	1900      	adds	r0, r0, r4
 80059d4:	2408      	movs	r4, #8
 80059d6:	46a4      	mov	ip, r4
 80059d8:	44bc      	add	ip, r7
 80059da:	4460      	add	r0, ip
 80059dc:	6001      	str	r1, [r0, #0]
 80059de:	6042      	str	r2, [r0, #4]
 80059e0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2240      	movs	r2, #64	; 0x40
 80059e6:	2101      	movs	r1, #1
 80059e8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2240      	movs	r2, #64	; 0x40
 80059ee:	2100      	movs	r1, #0
 80059f0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2244      	movs	r2, #68	; 0x44
 80059f6:	2100      	movs	r1, #0
 80059f8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2250      	movs	r2, #80	; 0x50
 80059fe:	2100      	movs	r1, #0
 8005a00:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b003      	add	sp, #12
 8005a0a:	bc90      	pop	{r4, r7}
 8005a0c:	bc08      	pop	{r3}
 8005a0e:	b004      	add	sp, #16
 8005a10:	4718      	bx	r3
	...

08005a14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b09c      	sub	sp, #112	; 0x70
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a1e:	236f      	movs	r3, #111	; 0x6f
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	18d3      	adds	r3, r2, r3
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	236c      	movs	r3, #108	; 0x6c
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	49cf      	ldr	r1, [pc, #828]	; (8005d78 <USB_ActivateEndpoint+0x364>)
 8005a3a:	400a      	ands	r2, r1
 8005a3c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	78db      	ldrb	r3, [r3, #3]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d017      	beq.n	8005a76 <USB_ActivateEndpoint+0x62>
 8005a46:	dc28      	bgt.n	8005a9a <USB_ActivateEndpoint+0x86>
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d00e      	beq.n	8005a6a <USB_ActivateEndpoint+0x56>
 8005a4c:	dc25      	bgt.n	8005a9a <USB_ActivateEndpoint+0x86>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <USB_ActivateEndpoint+0x44>
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d018      	beq.n	8005a88 <USB_ActivateEndpoint+0x74>
 8005a56:	e020      	b.n	8005a9a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005a58:	226c      	movs	r2, #108	; 0x6c
 8005a5a:	18bb      	adds	r3, r7, r2
 8005a5c:	18ba      	adds	r2, r7, r2
 8005a5e:	8812      	ldrh	r2, [r2, #0]
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	0089      	lsls	r1, r1, #2
 8005a64:	430a      	orrs	r2, r1
 8005a66:	801a      	strh	r2, [r3, #0]
      break;
 8005a68:	e01c      	b.n	8005aa4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8005a6a:	226c      	movs	r2, #108	; 0x6c
 8005a6c:	18bb      	adds	r3, r7, r2
 8005a6e:	18ba      	adds	r2, r7, r2
 8005a70:	8812      	ldrh	r2, [r2, #0]
 8005a72:	801a      	strh	r2, [r3, #0]
      break;
 8005a74:	e016      	b.n	8005aa4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005a76:	226c      	movs	r2, #108	; 0x6c
 8005a78:	18bb      	adds	r3, r7, r2
 8005a7a:	18ba      	adds	r2, r7, r2
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	21c0      	movs	r1, #192	; 0xc0
 8005a80:	00c9      	lsls	r1, r1, #3
 8005a82:	430a      	orrs	r2, r1
 8005a84:	801a      	strh	r2, [r3, #0]
      break;
 8005a86:	e00d      	b.n	8005aa4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005a88:	226c      	movs	r2, #108	; 0x6c
 8005a8a:	18bb      	adds	r3, r7, r2
 8005a8c:	18ba      	adds	r2, r7, r2
 8005a8e:	8812      	ldrh	r2, [r2, #0]
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	00c9      	lsls	r1, r1, #3
 8005a94:	430a      	orrs	r2, r1
 8005a96:	801a      	strh	r2, [r3, #0]
      break;
 8005a98:	e004      	b.n	8005aa4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8005a9a:	236f      	movs	r3, #111	; 0x6f
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
      break;
 8005aa2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	226c      	movs	r2, #108	; 0x6c
 8005ab0:	18ba      	adds	r2, r7, r2
 8005ab2:	8812      	ldrh	r2, [r2, #0]
 8005ab4:	49b1      	ldr	r1, [pc, #708]	; (8005d7c <USB_ActivateEndpoint+0x368>)
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	b292      	uxth	r2, r2
 8005aba:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	b21b      	sxth	r3, r3
 8005acc:	4aac      	ldr	r2, [pc, #688]	; (8005d80 <USB_ActivateEndpoint+0x36c>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	b21a      	sxth	r2, r3
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	b21b      	sxth	r3, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b21a      	sxth	r2, r3
 8005adc:	2166      	movs	r1, #102	; 0x66
 8005ade:	187b      	adds	r3, r7, r1
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	18d3      	adds	r3, r2, r3
 8005aec:	187a      	adds	r2, r7, r1
 8005aee:	8812      	ldrh	r2, [r2, #0]
 8005af0:	49a2      	ldr	r1, [pc, #648]	; (8005d7c <USB_ActivateEndpoint+0x368>)
 8005af2:	430a      	orrs	r2, r1
 8005af4:	b292      	uxth	r2, r2
 8005af6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	7b1b      	ldrb	r3, [r3, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d000      	beq.n	8005b02 <USB_ActivateEndpoint+0xee>
 8005b00:	e150      	b.n	8005da4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d100      	bne.n	8005b0c <USB_ActivateEndpoint+0xf8>
 8005b0a:	e07a      	b.n	8005c02 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2250      	movs	r2, #80	; 0x50
 8005b14:	5a9b      	ldrh	r3, [r3, r2]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	001a      	movs	r2, r3
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	189b      	adds	r3, r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	00da      	lsls	r2, r3, #3
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	18d3      	adds	r3, r2, r3
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	00d2      	lsls	r2, r2, #3
 8005b2e:	4694      	mov	ip, r2
 8005b30:	4463      	add	r3, ip
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	88db      	ldrh	r3, [r3, #6]
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	18db      	adds	r3, r3, r3
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	18d2      	adds	r2, r2, r3
 8005b4e:	2112      	movs	r1, #18
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	8812      	ldrh	r2, [r2, #0]
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	187b      	adds	r3, r7, r1
 8005b58:	881b      	ldrh	r3, [r3, #0]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d016      	beq.n	8005b8e <USB_ActivateEndpoint+0x17a>
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	18d3      	adds	r3, r2, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	2010      	movs	r0, #16
 8005b70:	183b      	adds	r3, r7, r0
 8005b72:	4983      	ldr	r1, [pc, #524]	; (8005d80 <USB_ActivateEndpoint+0x36c>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	183a      	adds	r2, r7, r0
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	497f      	ldr	r1, [pc, #508]	; (8005d84 <USB_ActivateEndpoint+0x370>)
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	b292      	uxth	r2, r2
 8005b8c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	78db      	ldrb	r3, [r3, #3]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d01d      	beq.n	8005bd2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	18d3      	adds	r3, r2, r3
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	200c      	movs	r0, #12
 8005ba6:	183b      	adds	r3, r7, r0
 8005ba8:	4977      	ldr	r1, [pc, #476]	; (8005d88 <USB_ActivateEndpoint+0x374>)
 8005baa:	400a      	ands	r2, r1
 8005bac:	801a      	strh	r2, [r3, #0]
 8005bae:	183b      	adds	r3, r7, r0
 8005bb0:	183a      	adds	r2, r7, r0
 8005bb2:	8812      	ldrh	r2, [r2, #0]
 8005bb4:	2120      	movs	r1, #32
 8005bb6:	404a      	eors	r2, r1
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	18d3      	adds	r3, r2, r3
 8005bc4:	183a      	adds	r2, r7, r0
 8005bc6:	8812      	ldrh	r2, [r2, #0]
 8005bc8:	496c      	ldr	r1, [pc, #432]	; (8005d7c <USB_ActivateEndpoint+0x368>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	b292      	uxth	r2, r2
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	e27a      	b.n	80060c8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	18d3      	adds	r3, r2, r3
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	200e      	movs	r0, #14
 8005be2:	183b      	adds	r3, r7, r0
 8005be4:	4968      	ldr	r1, [pc, #416]	; (8005d88 <USB_ActivateEndpoint+0x374>)
 8005be6:	400a      	ands	r2, r1
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	18d3      	adds	r3, r2, r3
 8005bf4:	183a      	adds	r2, r7, r0
 8005bf6:	8812      	ldrh	r2, [r2, #0]
 8005bf8:	4960      	ldr	r1, [pc, #384]	; (8005d7c <USB_ActivateEndpoint+0x368>)
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	b292      	uxth	r2, r2
 8005bfe:	801a      	strh	r2, [r3, #0]
 8005c00:	e262      	b.n	80060c8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2250      	movs	r2, #80	; 0x50
 8005c0a:	5a9b      	ldrh	r3, [r3, r2]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	001a      	movs	r2, r3
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	633b      	str	r3, [r7, #48]	; 0x30
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	00da      	lsls	r2, r3, #3
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	18d3      	adds	r3, r2, r3
 8005c20:	4a5a      	ldr	r2, [pc, #360]	; (8005d8c <USB_ActivateEndpoint+0x378>)
 8005c22:	4694      	mov	ip, r2
 8005c24:	4463      	add	r3, ip
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	88db      	ldrh	r3, [r3, #6]
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	18db      	adds	r3, r3, r3
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2250      	movs	r2, #80	; 0x50
 8005c40:	5a9b      	ldrh	r3, [r3, r2]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	001a      	movs	r2, r3
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	189b      	adds	r3, r3, r2
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	00da      	lsls	r2, r3, #3
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	18d3      	adds	r3, r2, r3
 8005c56:	4a4e      	ldr	r2, [pc, #312]	; (8005d90 <USB_ActivateEndpoint+0x37c>)
 8005c58:	4694      	mov	ip, r2
 8005c5a:	4463      	add	r3, ip
 8005c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d110      	bne.n	8005c88 <USB_ActivateEndpoint+0x274>
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4a49      	ldr	r2, [pc, #292]	; (8005d94 <USB_ActivateEndpoint+0x380>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	801a      	strh	r2, [r3, #0]
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	881b      	ldrh	r3, [r3, #0]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	4a46      	ldr	r2, [pc, #280]	; (8005d98 <USB_ActivateEndpoint+0x384>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e02b      	b.n	8005ce0 <USB_ActivateEndpoint+0x2cc>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c8e:	d812      	bhi.n	8005cb6 <USB_ActivateEndpoint+0x2a2>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d002      	beq.n	8005ca8 <USB_ActivateEndpoint+0x294>
 8005ca2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e014      	b.n	8005ce0 <USB_ActivateEndpoint+0x2cc>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	221f      	movs	r2, #31
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	d102      	bne.n	8005cce <USB_ActivateEndpoint+0x2ba>
 8005cc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	029b      	lsls	r3, r3, #10
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	4a30      	ldr	r2, [pc, #192]	; (8005d98 <USB_ActivateEndpoint+0x384>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	18d2      	adds	r2, r2, r3
 8005cea:	2122      	movs	r1, #34	; 0x22
 8005cec:	187b      	adds	r3, r7, r1
 8005cee:	8812      	ldrh	r2, [r2, #0]
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	187b      	adds	r3, r7, r1
 8005cf4:	881a      	ldrh	r2, [r3, #0]
 8005cf6:	2380      	movs	r3, #128	; 0x80
 8005cf8:	01db      	lsls	r3, r3, #7
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d016      	beq.n	8005d2c <USB_ActivateEndpoint+0x318>
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	18d3      	adds	r3, r2, r3
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	2020      	movs	r0, #32
 8005d0e:	183b      	adds	r3, r7, r0
 8005d10:	491b      	ldr	r1, [pc, #108]	; (8005d80 <USB_ActivateEndpoint+0x36c>)
 8005d12:	400a      	ands	r2, r1
 8005d14:	801a      	strh	r2, [r3, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	18d3      	adds	r3, r2, r3
 8005d20:	183a      	adds	r2, r7, r0
 8005d22:	8812      	ldrh	r2, [r2, #0]
 8005d24:	491d      	ldr	r1, [pc, #116]	; (8005d9c <USB_ActivateEndpoint+0x388>)
 8005d26:	430a      	orrs	r2, r1
 8005d28:	b292      	uxth	r2, r2
 8005d2a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	18d3      	adds	r3, r2, r3
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	201e      	movs	r0, #30
 8005d3c:	183b      	adds	r3, r7, r0
 8005d3e:	4918      	ldr	r1, [pc, #96]	; (8005da0 <USB_ActivateEndpoint+0x38c>)
 8005d40:	400a      	ands	r2, r1
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	183b      	adds	r3, r7, r0
 8005d46:	183a      	adds	r2, r7, r0
 8005d48:	8812      	ldrh	r2, [r2, #0]
 8005d4a:	2180      	movs	r1, #128	; 0x80
 8005d4c:	0149      	lsls	r1, r1, #5
 8005d4e:	404a      	eors	r2, r1
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	183b      	adds	r3, r7, r0
 8005d54:	183a      	adds	r2, r7, r0
 8005d56:	8812      	ldrh	r2, [r2, #0]
 8005d58:	2180      	movs	r1, #128	; 0x80
 8005d5a:	0189      	lsls	r1, r1, #6
 8005d5c:	404a      	eors	r2, r1
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	183a      	adds	r2, r7, r0
 8005d6c:	8812      	ldrh	r2, [r2, #0]
 8005d6e:	4903      	ldr	r1, [pc, #12]	; (8005d7c <USB_ActivateEndpoint+0x368>)
 8005d70:	430a      	orrs	r2, r1
 8005d72:	b292      	uxth	r2, r2
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e1a7      	b.n	80060c8 <USB_ActivateEndpoint+0x6b4>
 8005d78:	ffff898f 	.word	0xffff898f
 8005d7c:	ffff8080 	.word	0xffff8080
 8005d80:	ffff8f8f 	.word	0xffff8f8f
 8005d84:	ffff80c0 	.word	0xffff80c0
 8005d88:	ffff8fbf 	.word	0xffff8fbf
 8005d8c:	00000404 	.word	0x00000404
 8005d90:	00000406 	.word	0x00000406
 8005d94:	ffff83ff 	.word	0xffff83ff
 8005d98:	ffff8000 	.word	0xffff8000
 8005d9c:	ffffc080 	.word	0xffffc080
 8005da0:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	78db      	ldrb	r3, [r3, #3]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d117      	bne.n	8005ddc <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	18d3      	adds	r3, r2, r3
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	2062      	movs	r0, #98	; 0x62
 8005dbc:	183b      	adds	r3, r7, r0
 8005dbe:	49c6      	ldr	r1, [pc, #792]	; (80060d8 <USB_ActivateEndpoint+0x6c4>)
 8005dc0:	400a      	ands	r2, r1
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	18d3      	adds	r3, r2, r3
 8005dce:	183a      	adds	r2, r7, r0
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	49c2      	ldr	r1, [pc, #776]	; (80060dc <USB_ActivateEndpoint+0x6c8>)
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e016      	b.n	8005e0a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	18d3      	adds	r3, r2, r3
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	2064      	movs	r0, #100	; 0x64
 8005dec:	183b      	adds	r3, r7, r0
 8005dee:	49bc      	ldr	r1, [pc, #752]	; (80060e0 <USB_ActivateEndpoint+0x6cc>)
 8005df0:	400a      	ands	r2, r1
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	18d3      	adds	r3, r2, r3
 8005dfe:	183a      	adds	r2, r7, r0
 8005e00:	8812      	ldrh	r2, [r2, #0]
 8005e02:	49b8      	ldr	r1, [pc, #736]	; (80060e4 <USB_ActivateEndpoint+0x6d0>)
 8005e04:	430a      	orrs	r2, r1
 8005e06:	b292      	uxth	r2, r2
 8005e08:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2250      	movs	r2, #80	; 0x50
 8005e12:	5a9b      	ldrh	r3, [r3, r2]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	001a      	movs	r2, r3
 8005e18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	00da      	lsls	r2, r3, #3
 8005e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e26:	18d3      	adds	r3, r2, r3
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	00d2      	lsls	r2, r2, #3
 8005e2c:	4694      	mov	ip, r2
 8005e2e:	4463      	add	r3, ip
 8005e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	891b      	ldrh	r3, [r3, #8]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	18db      	adds	r3, r3, r3
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	657b      	str	r3, [r7, #84]	; 0x54
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2250      	movs	r2, #80	; 0x50
 8005e4a:	5a9b      	ldrh	r3, [r3, r2]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	001a      	movs	r2, r3
 8005e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	657b      	str	r3, [r7, #84]	; 0x54
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	00da      	lsls	r2, r3, #3
 8005e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e5e:	18d3      	adds	r3, r2, r3
 8005e60:	4aa1      	ldr	r2, [pc, #644]	; (80060e8 <USB_ActivateEndpoint+0x6d4>)
 8005e62:	4694      	mov	ip, r2
 8005e64:	4463      	add	r3, ip
 8005e66:	653b      	str	r3, [r7, #80]	; 0x50
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	895b      	ldrh	r3, [r3, #10]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	18db      	adds	r3, r3, r3
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d000      	beq.n	8005e82 <USB_ActivateEndpoint+0x46e>
 8005e80:	e087      	b.n	8005f92 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	18d2      	adds	r2, r2, r3
 8005e8c:	2140      	movs	r1, #64	; 0x40
 8005e8e:	187b      	adds	r3, r7, r1
 8005e90:	8812      	ldrh	r2, [r2, #0]
 8005e92:	801a      	strh	r2, [r3, #0]
 8005e94:	187b      	adds	r3, r7, r1
 8005e96:	881a      	ldrh	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	01db      	lsls	r3, r3, #7
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d016      	beq.n	8005ece <USB_ActivateEndpoint+0x4ba>
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	18d3      	adds	r3, r2, r3
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	203e      	movs	r0, #62	; 0x3e
 8005eb0:	183b      	adds	r3, r7, r0
 8005eb2:	4989      	ldr	r1, [pc, #548]	; (80060d8 <USB_ActivateEndpoint+0x6c4>)
 8005eb4:	400a      	ands	r2, r1
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	18d3      	adds	r3, r2, r3
 8005ec2:	183a      	adds	r2, r7, r0
 8005ec4:	8812      	ldrh	r2, [r2, #0]
 8005ec6:	4989      	ldr	r1, [pc, #548]	; (80060ec <USB_ActivateEndpoint+0x6d8>)
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	b292      	uxth	r2, r2
 8005ecc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	18d2      	adds	r2, r2, r3
 8005ed8:	213c      	movs	r1, #60	; 0x3c
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	8812      	ldrh	r2, [r2, #0]
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	2240      	movs	r2, #64	; 0x40
 8005ee6:	4013      	ands	r3, r2
 8005ee8:	d016      	beq.n	8005f18 <USB_ActivateEndpoint+0x504>
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	203a      	movs	r0, #58	; 0x3a
 8005efa:	183b      	adds	r3, r7, r0
 8005efc:	4976      	ldr	r1, [pc, #472]	; (80060d8 <USB_ActivateEndpoint+0x6c4>)
 8005efe:	400a      	ands	r2, r1
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	18d3      	adds	r3, r2, r3
 8005f0c:	183a      	adds	r2, r7, r0
 8005f0e:	8812      	ldrh	r2, [r2, #0]
 8005f10:	4977      	ldr	r1, [pc, #476]	; (80060f0 <USB_ActivateEndpoint+0x6dc>)
 8005f12:	430a      	orrs	r2, r1
 8005f14:	b292      	uxth	r2, r2
 8005f16:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	18d3      	adds	r3, r2, r3
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	2038      	movs	r0, #56	; 0x38
 8005f28:	183b      	adds	r3, r7, r0
 8005f2a:	4972      	ldr	r1, [pc, #456]	; (80060f4 <USB_ActivateEndpoint+0x6e0>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	183b      	adds	r3, r7, r0
 8005f32:	183a      	adds	r2, r7, r0
 8005f34:	8812      	ldrh	r2, [r2, #0]
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	0149      	lsls	r1, r1, #5
 8005f3a:	404a      	eors	r2, r1
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	183b      	adds	r3, r7, r0
 8005f40:	183a      	adds	r2, r7, r0
 8005f42:	8812      	ldrh	r2, [r2, #0]
 8005f44:	2180      	movs	r1, #128	; 0x80
 8005f46:	0189      	lsls	r1, r1, #6
 8005f48:	404a      	eors	r2, r1
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	18d3      	adds	r3, r2, r3
 8005f56:	183a      	adds	r2, r7, r0
 8005f58:	8812      	ldrh	r2, [r2, #0]
 8005f5a:	4962      	ldr	r1, [pc, #392]	; (80060e4 <USB_ActivateEndpoint+0x6d0>)
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	18d3      	adds	r3, r2, r3
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	2036      	movs	r0, #54	; 0x36
 8005f72:	183b      	adds	r3, r7, r0
 8005f74:	4960      	ldr	r1, [pc, #384]	; (80060f8 <USB_ActivateEndpoint+0x6e4>)
 8005f76:	400a      	ands	r2, r1
 8005f78:	801a      	strh	r2, [r3, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	183a      	adds	r2, r7, r0
 8005f86:	8812      	ldrh	r2, [r2, #0]
 8005f88:	4956      	ldr	r1, [pc, #344]	; (80060e4 <USB_ActivateEndpoint+0x6d0>)
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	b292      	uxth	r2, r2
 8005f8e:	801a      	strh	r2, [r3, #0]
 8005f90:	e09a      	b.n	80060c8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	18d2      	adds	r2, r2, r3
 8005f9c:	214e      	movs	r1, #78	; 0x4e
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	8812      	ldrh	r2, [r2, #0]
 8005fa2:	801a      	strh	r2, [r3, #0]
 8005fa4:	187b      	adds	r3, r7, r1
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	01db      	lsls	r3, r3, #7
 8005fac:	4013      	ands	r3, r2
 8005fae:	d016      	beq.n	8005fde <USB_ActivateEndpoint+0x5ca>
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	18d3      	adds	r3, r2, r3
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	204c      	movs	r0, #76	; 0x4c
 8005fc0:	183b      	adds	r3, r7, r0
 8005fc2:	4945      	ldr	r1, [pc, #276]	; (80060d8 <USB_ActivateEndpoint+0x6c4>)
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	18d3      	adds	r3, r2, r3
 8005fd2:	183a      	adds	r2, r7, r0
 8005fd4:	8812      	ldrh	r2, [r2, #0]
 8005fd6:	4945      	ldr	r1, [pc, #276]	; (80060ec <USB_ActivateEndpoint+0x6d8>)
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	b292      	uxth	r2, r2
 8005fdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	18d2      	adds	r2, r2, r3
 8005fe8:	214a      	movs	r1, #74	; 0x4a
 8005fea:	187b      	adds	r3, r7, r1
 8005fec:	8812      	ldrh	r2, [r2, #0]
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	2240      	movs	r2, #64	; 0x40
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	d016      	beq.n	8006028 <USB_ActivateEndpoint+0x614>
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	18d3      	adds	r3, r2, r3
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29a      	uxth	r2, r3
 8006008:	2048      	movs	r0, #72	; 0x48
 800600a:	183b      	adds	r3, r7, r0
 800600c:	4932      	ldr	r1, [pc, #200]	; (80060d8 <USB_ActivateEndpoint+0x6c4>)
 800600e:	400a      	ands	r2, r1
 8006010:	801a      	strh	r2, [r3, #0]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	18d3      	adds	r3, r2, r3
 800601c:	183a      	adds	r2, r7, r0
 800601e:	8812      	ldrh	r2, [r2, #0]
 8006020:	4933      	ldr	r1, [pc, #204]	; (80060f0 <USB_ActivateEndpoint+0x6dc>)
 8006022:	430a      	orrs	r2, r1
 8006024:	b292      	uxth	r2, r2
 8006026:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d01d      	beq.n	800606c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29a      	uxth	r2, r3
 800603e:	2044      	movs	r0, #68	; 0x44
 8006040:	183b      	adds	r3, r7, r0
 8006042:	492d      	ldr	r1, [pc, #180]	; (80060f8 <USB_ActivateEndpoint+0x6e4>)
 8006044:	400a      	ands	r2, r1
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	183b      	adds	r3, r7, r0
 800604a:	183a      	adds	r2, r7, r0
 800604c:	8812      	ldrh	r2, [r2, #0]
 800604e:	2120      	movs	r1, #32
 8006050:	404a      	eors	r2, r1
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	18d3      	adds	r3, r2, r3
 800605e:	183a      	adds	r2, r7, r0
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	4920      	ldr	r1, [pc, #128]	; (80060e4 <USB_ActivateEndpoint+0x6d0>)
 8006064:	430a      	orrs	r2, r1
 8006066:	b292      	uxth	r2, r2
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e016      	b.n	800609a <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	18d3      	adds	r3, r2, r3
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29a      	uxth	r2, r3
 800607a:	2046      	movs	r0, #70	; 0x46
 800607c:	183b      	adds	r3, r7, r0
 800607e:	491e      	ldr	r1, [pc, #120]	; (80060f8 <USB_ActivateEndpoint+0x6e4>)
 8006080:	400a      	ands	r2, r1
 8006082:	801a      	strh	r2, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	18d3      	adds	r3, r2, r3
 800608e:	183a      	adds	r2, r7, r0
 8006090:	8812      	ldrh	r2, [r2, #0]
 8006092:	4914      	ldr	r1, [pc, #80]	; (80060e4 <USB_ActivateEndpoint+0x6d0>)
 8006094:	430a      	orrs	r2, r1
 8006096:	b292      	uxth	r2, r2
 8006098:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	18d3      	adds	r3, r2, r3
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	2042      	movs	r0, #66	; 0x42
 80060aa:	183b      	adds	r3, r7, r0
 80060ac:	4911      	ldr	r1, [pc, #68]	; (80060f4 <USB_ActivateEndpoint+0x6e0>)
 80060ae:	400a      	ands	r2, r1
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	18d3      	adds	r3, r2, r3
 80060bc:	183a      	adds	r2, r7, r0
 80060be:	8812      	ldrh	r2, [r2, #0]
 80060c0:	4908      	ldr	r1, [pc, #32]	; (80060e4 <USB_ActivateEndpoint+0x6d0>)
 80060c2:	430a      	orrs	r2, r1
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80060c8:	236f      	movs	r3, #111	; 0x6f
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	781b      	ldrb	r3, [r3, #0]
}
 80060ce:	0018      	movs	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	b01c      	add	sp, #112	; 0x70
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	46c0      	nop			; (mov r8, r8)
 80060d8:	ffff8f8f 	.word	0xffff8f8f
 80060dc:	ffff8180 	.word	0xffff8180
 80060e0:	ffff8e8f 	.word	0xffff8e8f
 80060e4:	ffff8080 	.word	0xffff8080
 80060e8:	00000404 	.word	0x00000404
 80060ec:	ffffc080 	.word	0xffffc080
 80060f0:	ffff80c0 	.word	0xffff80c0
 80060f4:	ffffbf8f 	.word	0xffffbf8f
 80060f8:	ffff8fbf 	.word	0xffff8fbf

080060fc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	; 0x30
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	7b1b      	ldrb	r3, [r3, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d000      	beq.n	8006110 <USB_DeactivateEndpoint+0x14>
 800610e:	e07e      	b.n	800620e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	785b      	ldrb	r3, [r3, #1]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d03c      	beq.n	8006192 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	18d2      	adds	r2, r2, r3
 8006122:	210c      	movs	r1, #12
 8006124:	187b      	adds	r3, r7, r1
 8006126:	8812      	ldrh	r2, [r2, #0]
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	187b      	adds	r3, r7, r1
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	2240      	movs	r2, #64	; 0x40
 8006130:	4013      	ands	r3, r2
 8006132:	d016      	beq.n	8006162 <USB_DeactivateEndpoint+0x66>
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	18d3      	adds	r3, r2, r3
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29a      	uxth	r2, r3
 8006142:	200a      	movs	r0, #10
 8006144:	183b      	adds	r3, r7, r0
 8006146:	49c7      	ldr	r1, [pc, #796]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 8006148:	400a      	ands	r2, r1
 800614a:	801a      	strh	r2, [r3, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	18d3      	adds	r3, r2, r3
 8006156:	183a      	adds	r2, r7, r0
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	49c3      	ldr	r1, [pc, #780]	; (8006468 <USB_DeactivateEndpoint+0x36c>)
 800615c:	430a      	orrs	r2, r1
 800615e:	b292      	uxth	r2, r2
 8006160:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	18d3      	adds	r3, r2, r3
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29a      	uxth	r2, r3
 8006170:	2008      	movs	r0, #8
 8006172:	183b      	adds	r3, r7, r0
 8006174:	49bd      	ldr	r1, [pc, #756]	; (800646c <USB_DeactivateEndpoint+0x370>)
 8006176:	400a      	ands	r2, r1
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	18d3      	adds	r3, r2, r3
 8006184:	183a      	adds	r2, r7, r0
 8006186:	8812      	ldrh	r2, [r2, #0]
 8006188:	49b9      	ldr	r1, [pc, #740]	; (8006470 <USB_DeactivateEndpoint+0x374>)
 800618a:	430a      	orrs	r2, r1
 800618c:	b292      	uxth	r2, r2
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e163      	b.n	800645a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	18d2      	adds	r2, r2, r3
 800619c:	2112      	movs	r1, #18
 800619e:	187b      	adds	r3, r7, r1
 80061a0:	8812      	ldrh	r2, [r2, #0]
 80061a2:	801a      	strh	r2, [r3, #0]
 80061a4:	187b      	adds	r3, r7, r1
 80061a6:	881a      	ldrh	r2, [r3, #0]
 80061a8:	2380      	movs	r3, #128	; 0x80
 80061aa:	01db      	lsls	r3, r3, #7
 80061ac:	4013      	ands	r3, r2
 80061ae:	d016      	beq.n	80061de <USB_DeactivateEndpoint+0xe2>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	18d3      	adds	r3, r2, r3
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29a      	uxth	r2, r3
 80061be:	2010      	movs	r0, #16
 80061c0:	183b      	adds	r3, r7, r0
 80061c2:	49a8      	ldr	r1, [pc, #672]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 80061c4:	400a      	ands	r2, r1
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	18d3      	adds	r3, r2, r3
 80061d2:	183a      	adds	r2, r7, r0
 80061d4:	8812      	ldrh	r2, [r2, #0]
 80061d6:	49a7      	ldr	r1, [pc, #668]	; (8006474 <USB_DeactivateEndpoint+0x378>)
 80061d8:	430a      	orrs	r2, r1
 80061da:	b292      	uxth	r2, r2
 80061dc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	18d3      	adds	r3, r2, r3
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	200e      	movs	r0, #14
 80061ee:	183b      	adds	r3, r7, r0
 80061f0:	49a1      	ldr	r1, [pc, #644]	; (8006478 <USB_DeactivateEndpoint+0x37c>)
 80061f2:	400a      	ands	r2, r1
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	18d3      	adds	r3, r2, r3
 8006200:	183a      	adds	r2, r7, r0
 8006202:	8812      	ldrh	r2, [r2, #0]
 8006204:	499a      	ldr	r1, [pc, #616]	; (8006470 <USB_DeactivateEndpoint+0x374>)
 8006206:	430a      	orrs	r2, r1
 8006208:	b292      	uxth	r2, r2
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	e125      	b.n	800645a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d000      	beq.n	8006218 <USB_DeactivateEndpoint+0x11c>
 8006216:	e090      	b.n	800633a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	18d2      	adds	r2, r2, r3
 8006222:	2120      	movs	r1, #32
 8006224:	187b      	adds	r3, r7, r1
 8006226:	8812      	ldrh	r2, [r2, #0]
 8006228:	801a      	strh	r2, [r3, #0]
 800622a:	187b      	adds	r3, r7, r1
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	01db      	lsls	r3, r3, #7
 8006232:	4013      	ands	r3, r2
 8006234:	d016      	beq.n	8006264 <USB_DeactivateEndpoint+0x168>
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	18d3      	adds	r3, r2, r3
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29a      	uxth	r2, r3
 8006244:	201e      	movs	r0, #30
 8006246:	183b      	adds	r3, r7, r0
 8006248:	4986      	ldr	r1, [pc, #536]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 800624a:	400a      	ands	r2, r1
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	18d3      	adds	r3, r2, r3
 8006258:	183a      	adds	r2, r7, r0
 800625a:	8812      	ldrh	r2, [r2, #0]
 800625c:	4985      	ldr	r1, [pc, #532]	; (8006474 <USB_DeactivateEndpoint+0x378>)
 800625e:	430a      	orrs	r2, r1
 8006260:	b292      	uxth	r2, r2
 8006262:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	18d2      	adds	r2, r2, r3
 800626e:	211c      	movs	r1, #28
 8006270:	187b      	adds	r3, r7, r1
 8006272:	8812      	ldrh	r2, [r2, #0]
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	187b      	adds	r3, r7, r1
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	2240      	movs	r2, #64	; 0x40
 800627c:	4013      	ands	r3, r2
 800627e:	d016      	beq.n	80062ae <USB_DeactivateEndpoint+0x1b2>
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	18d3      	adds	r3, r2, r3
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29a      	uxth	r2, r3
 800628e:	201a      	movs	r0, #26
 8006290:	183b      	adds	r3, r7, r0
 8006292:	4974      	ldr	r1, [pc, #464]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 8006294:	400a      	ands	r2, r1
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	18d3      	adds	r3, r2, r3
 80062a2:	183a      	adds	r2, r7, r0
 80062a4:	8812      	ldrh	r2, [r2, #0]
 80062a6:	4970      	ldr	r1, [pc, #448]	; (8006468 <USB_DeactivateEndpoint+0x36c>)
 80062a8:	430a      	orrs	r2, r1
 80062aa:	b292      	uxth	r2, r2
 80062ac:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	18d3      	adds	r3, r2, r3
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	2018      	movs	r0, #24
 80062be:	183b      	adds	r3, r7, r0
 80062c0:	4968      	ldr	r1, [pc, #416]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 80062c2:	400a      	ands	r2, r1
 80062c4:	801a      	strh	r2, [r3, #0]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	18d3      	adds	r3, r2, r3
 80062d0:	183a      	adds	r2, r7, r0
 80062d2:	8812      	ldrh	r2, [r2, #0]
 80062d4:	4964      	ldr	r1, [pc, #400]	; (8006468 <USB_DeactivateEndpoint+0x36c>)
 80062d6:	430a      	orrs	r2, r1
 80062d8:	b292      	uxth	r2, r2
 80062da:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	2016      	movs	r0, #22
 80062ec:	183b      	adds	r3, r7, r0
 80062ee:	4962      	ldr	r1, [pc, #392]	; (8006478 <USB_DeactivateEndpoint+0x37c>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	18d3      	adds	r3, r2, r3
 80062fe:	183a      	adds	r2, r7, r0
 8006300:	8812      	ldrh	r2, [r2, #0]
 8006302:	495b      	ldr	r1, [pc, #364]	; (8006470 <USB_DeactivateEndpoint+0x374>)
 8006304:	430a      	orrs	r2, r1
 8006306:	b292      	uxth	r2, r2
 8006308:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	18d3      	adds	r3, r2, r3
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29a      	uxth	r2, r3
 8006318:	2014      	movs	r0, #20
 800631a:	183b      	adds	r3, r7, r0
 800631c:	4953      	ldr	r1, [pc, #332]	; (800646c <USB_DeactivateEndpoint+0x370>)
 800631e:	400a      	ands	r2, r1
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	18d3      	adds	r3, r2, r3
 800632c:	183a      	adds	r2, r7, r0
 800632e:	8812      	ldrh	r2, [r2, #0]
 8006330:	494f      	ldr	r1, [pc, #316]	; (8006470 <USB_DeactivateEndpoint+0x374>)
 8006332:	430a      	orrs	r2, r1
 8006334:	b292      	uxth	r2, r2
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	e08f      	b.n	800645a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	18d2      	adds	r2, r2, r3
 8006344:	212e      	movs	r1, #46	; 0x2e
 8006346:	187b      	adds	r3, r7, r1
 8006348:	8812      	ldrh	r2, [r2, #0]
 800634a:	801a      	strh	r2, [r3, #0]
 800634c:	187b      	adds	r3, r7, r1
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	01db      	lsls	r3, r3, #7
 8006354:	4013      	ands	r3, r2
 8006356:	d016      	beq.n	8006386 <USB_DeactivateEndpoint+0x28a>
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	18d3      	adds	r3, r2, r3
 8006362:	881b      	ldrh	r3, [r3, #0]
 8006364:	b29a      	uxth	r2, r3
 8006366:	202c      	movs	r0, #44	; 0x2c
 8006368:	183b      	adds	r3, r7, r0
 800636a:	493e      	ldr	r1, [pc, #248]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 800636c:	400a      	ands	r2, r1
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	18d3      	adds	r3, r2, r3
 800637a:	183a      	adds	r2, r7, r0
 800637c:	8812      	ldrh	r2, [r2, #0]
 800637e:	493d      	ldr	r1, [pc, #244]	; (8006474 <USB_DeactivateEndpoint+0x378>)
 8006380:	430a      	orrs	r2, r1
 8006382:	b292      	uxth	r2, r2
 8006384:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	18d2      	adds	r2, r2, r3
 8006390:	212a      	movs	r1, #42	; 0x2a
 8006392:	187b      	adds	r3, r7, r1
 8006394:	8812      	ldrh	r2, [r2, #0]
 8006396:	801a      	strh	r2, [r3, #0]
 8006398:	187b      	adds	r3, r7, r1
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	2240      	movs	r2, #64	; 0x40
 800639e:	4013      	ands	r3, r2
 80063a0:	d016      	beq.n	80063d0 <USB_DeactivateEndpoint+0x2d4>
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	18d3      	adds	r3, r2, r3
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	2028      	movs	r0, #40	; 0x28
 80063b2:	183b      	adds	r3, r7, r0
 80063b4:	492b      	ldr	r1, [pc, #172]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	18d3      	adds	r3, r2, r3
 80063c4:	183a      	adds	r2, r7, r0
 80063c6:	8812      	ldrh	r2, [r2, #0]
 80063c8:	4927      	ldr	r1, [pc, #156]	; (8006468 <USB_DeactivateEndpoint+0x36c>)
 80063ca:	430a      	orrs	r2, r1
 80063cc:	b292      	uxth	r2, r2
 80063ce:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	18d3      	adds	r3, r2, r3
 80063da:	881b      	ldrh	r3, [r3, #0]
 80063dc:	b29a      	uxth	r2, r3
 80063de:	2026      	movs	r0, #38	; 0x26
 80063e0:	183b      	adds	r3, r7, r0
 80063e2:	4920      	ldr	r1, [pc, #128]	; (8006464 <USB_DeactivateEndpoint+0x368>)
 80063e4:	400a      	ands	r2, r1
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	18d3      	adds	r3, r2, r3
 80063f2:	183a      	adds	r2, r7, r0
 80063f4:	8812      	ldrh	r2, [r2, #0]
 80063f6:	491f      	ldr	r1, [pc, #124]	; (8006474 <USB_DeactivateEndpoint+0x378>)
 80063f8:	430a      	orrs	r2, r1
 80063fa:	b292      	uxth	r2, r2
 80063fc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	18d3      	adds	r3, r2, r3
 8006408:	881b      	ldrh	r3, [r3, #0]
 800640a:	b29a      	uxth	r2, r3
 800640c:	2024      	movs	r0, #36	; 0x24
 800640e:	183b      	adds	r3, r7, r0
 8006410:	4916      	ldr	r1, [pc, #88]	; (800646c <USB_DeactivateEndpoint+0x370>)
 8006412:	400a      	ands	r2, r1
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	18d3      	adds	r3, r2, r3
 8006420:	183a      	adds	r2, r7, r0
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	4912      	ldr	r1, [pc, #72]	; (8006470 <USB_DeactivateEndpoint+0x374>)
 8006426:	430a      	orrs	r2, r1
 8006428:	b292      	uxth	r2, r2
 800642a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	18d3      	adds	r3, r2, r3
 8006436:	881b      	ldrh	r3, [r3, #0]
 8006438:	b29a      	uxth	r2, r3
 800643a:	2022      	movs	r0, #34	; 0x22
 800643c:	183b      	adds	r3, r7, r0
 800643e:	490e      	ldr	r1, [pc, #56]	; (8006478 <USB_DeactivateEndpoint+0x37c>)
 8006440:	400a      	ands	r2, r1
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	18d3      	adds	r3, r2, r3
 800644e:	183a      	adds	r2, r7, r0
 8006450:	8812      	ldrh	r2, [r2, #0]
 8006452:	4907      	ldr	r1, [pc, #28]	; (8006470 <USB_DeactivateEndpoint+0x374>)
 8006454:	430a      	orrs	r2, r1
 8006456:	b292      	uxth	r2, r2
 8006458:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b00c      	add	sp, #48	; 0x30
 8006462:	bd80      	pop	{r7, pc}
 8006464:	ffff8f8f 	.word	0xffff8f8f
 8006468:	ffff80c0 	.word	0xffff80c0
 800646c:	ffff8fbf 	.word	0xffff8fbf
 8006470:	ffff8080 	.word	0xffff8080
 8006474:	ffffc080 	.word	0xffffc080
 8006478:	ffffbf8f 	.word	0xffffbf8f

0800647c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b0c3      	sub	sp, #268	; 0x10c
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	785b      	ldrb	r3, [r3, #1]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d001      	beq.n	8006492 <USB_EPStartXfer+0x16>
 800648e:	f000 fcef 	bl	8006e70 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	429a      	cmp	r2, r3
 800649c:	d905      	bls.n	80064aa <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	1d7a      	adds	r2, r7, #5
 80064a4:	32ff      	adds	r2, #255	; 0xff
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e004      	b.n	80064b4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	1d7a      	adds	r2, r7, #5
 80064b0:	32ff      	adds	r2, #255	; 0xff
 80064b2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d125      	bne.n	8006508 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	6959      	ldr	r1, [r3, #20]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	88da      	ldrh	r2, [r3, #6]
 80064c4:	1d7b      	adds	r3, r7, #5
 80064c6:	33ff      	adds	r3, #255	; 0xff
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f001 f9c9 	bl	8007864 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	613b      	str	r3, [r7, #16]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2250      	movs	r2, #80	; 0x50
 80064da:	5a9b      	ldrh	r3, [r3, r2]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	001a      	movs	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	00da      	lsls	r2, r3, #3
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	18d3      	adds	r3, r2, r3
 80064f0:	4acc      	ldr	r2, [pc, #816]	; (8006824 <USB_EPStartXfer+0x3a8>)
 80064f2:	4694      	mov	ip, r2
 80064f4:	4463      	add	r3, ip
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	1d7b      	adds	r3, r7, #5
 80064fa:	33ff      	adds	r3, #255	; 0xff
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	f000 fc8f 	bl	8006e26 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	78db      	ldrb	r3, [r3, #3]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d000      	beq.n	8006512 <USB_EPStartXfer+0x96>
 8006510:	e33a      	b.n	8006b88 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	429a      	cmp	r2, r3
 800651c:	d800      	bhi.n	8006520 <USB_EPStartXfer+0xa4>
 800651e:	e2df      	b.n	8006ae0 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	18d3      	adds	r3, r2, r3
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29a      	uxth	r2, r3
 800652e:	2056      	movs	r0, #86	; 0x56
 8006530:	183b      	adds	r3, r7, r0
 8006532:	49bd      	ldr	r1, [pc, #756]	; (8006828 <USB_EPStartXfer+0x3ac>)
 8006534:	400a      	ands	r2, r1
 8006536:	801a      	strh	r2, [r3, #0]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18d3      	adds	r3, r2, r3
 8006542:	183a      	adds	r2, r7, r0
 8006544:	8812      	ldrh	r2, [r2, #0]
 8006546:	49b9      	ldr	r1, [pc, #740]	; (800682c <USB_EPStartXfer+0x3b0>)
 8006548:	430a      	orrs	r2, r1
 800654a:	b292      	uxth	r2, r2
 800654c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6a1a      	ldr	r2, [r3, #32]
 8006552:	1d7b      	adds	r3, r7, #5
 8006554:	33ff      	adds	r3, #255	; 0xff
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	1ad2      	subs	r2, r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	18d3      	adds	r3, r2, r3
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	001a      	movs	r2, r3
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	4013      	ands	r3, r2
 8006572:	d100      	bne.n	8006576 <USB_EPStartXfer+0xfa>
 8006574:	e162      	b.n	800683c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	633b      	str	r3, [r7, #48]	; 0x30
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d16a      	bne.n	8006658 <USB_EPStartXfer+0x1dc>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	62bb      	str	r3, [r7, #40]	; 0x28
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2250      	movs	r2, #80	; 0x50
 800658a:	5a9b      	ldrh	r3, [r3, r2]
 800658c:	b29b      	uxth	r3, r3
 800658e:	001a      	movs	r2, r3
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	189b      	adds	r3, r3, r2
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	00da      	lsls	r2, r3, #3
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	18d3      	adds	r3, r2, r3
 80065a0:	4aa3      	ldr	r2, [pc, #652]	; (8006830 <USB_EPStartXfer+0x3b4>)
 80065a2:	4694      	mov	ip, r2
 80065a4:	4463      	add	r3, ip
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
 80065a8:	1d7b      	adds	r3, r7, #5
 80065aa:	33ff      	adds	r3, #255	; 0xff
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d110      	bne.n	80065d4 <USB_EPStartXfer+0x158>
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	881b      	ldrh	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	4a9e      	ldr	r2, [pc, #632]	; (8006834 <USB_EPStartXfer+0x3b8>)
 80065ba:	4013      	ands	r3, r2
 80065bc:	b29a      	uxth	r2, r3
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	4a9b      	ldr	r2, [pc, #620]	; (8006838 <USB_EPStartXfer+0x3bc>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e05c      	b.n	800668e <USB_EPStartXfer+0x212>
 80065d4:	1d7b      	adds	r3, r7, #5
 80065d6:	33ff      	adds	r3, #255	; 0xff
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b3e      	cmp	r3, #62	; 0x3e
 80065dc:	d81c      	bhi.n	8006618 <USB_EPStartXfer+0x19c>
 80065de:	1d7b      	adds	r3, r7, #5
 80065e0:	33ff      	adds	r3, #255	; 0xff
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	1c7a      	adds	r2, r7, #1
 80065e8:	32ff      	adds	r2, #255	; 0xff
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	1d7b      	adds	r3, r7, #5
 80065ee:	33ff      	adds	r3, #255	; 0xff
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2201      	movs	r2, #1
 80065f4:	4013      	ands	r3, r2
 80065f6:	d006      	beq.n	8006606 <USB_EPStartXfer+0x18a>
 80065f8:	1c7b      	adds	r3, r7, #1
 80065fa:	33ff      	adds	r3, #255	; 0xff
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	1c7a      	adds	r2, r7, #1
 8006602:	32ff      	adds	r2, #255	; 0xff
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	1c7b      	adds	r3, r7, #1
 8006608:	33ff      	adds	r3, #255	; 0xff
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	b29a      	uxth	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	e03a      	b.n	800668e <USB_EPStartXfer+0x212>
 8006618:	1d7b      	adds	r3, r7, #5
 800661a:	33ff      	adds	r3, #255	; 0xff
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	1c7a      	adds	r2, r7, #1
 8006622:	32ff      	adds	r2, #255	; 0xff
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	1d7b      	adds	r3, r7, #5
 8006628:	33ff      	adds	r3, #255	; 0xff
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	221f      	movs	r2, #31
 800662e:	4013      	ands	r3, r2
 8006630:	d106      	bne.n	8006640 <USB_EPStartXfer+0x1c4>
 8006632:	1c7b      	adds	r3, r7, #1
 8006634:	33ff      	adds	r3, #255	; 0xff
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3b01      	subs	r3, #1
 800663a:	1c7a      	adds	r2, r7, #1
 800663c:	32ff      	adds	r2, #255	; 0xff
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	1c7b      	adds	r3, r7, #1
 8006642:	33ff      	adds	r3, #255	; 0xff
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29b      	uxth	r3, r3
 800664c:	4a7a      	ldr	r2, [pc, #488]	; (8006838 <USB_EPStartXfer+0x3bc>)
 800664e:	4313      	orrs	r3, r2
 8006650:	b29a      	uxth	r2, r3
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e01a      	b.n	800668e <USB_EPStartXfer+0x212>
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d116      	bne.n	800668e <USB_EPStartXfer+0x212>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2250      	movs	r2, #80	; 0x50
 8006664:	5a9b      	ldrh	r3, [r3, r2]
 8006666:	b29b      	uxth	r3, r3
 8006668:	001a      	movs	r2, r3
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	189b      	adds	r3, r3, r2
 800666e:	633b      	str	r3, [r7, #48]	; 0x30
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	00da      	lsls	r2, r3, #3
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	18d3      	adds	r3, r2, r3
 800667a:	4a6d      	ldr	r2, [pc, #436]	; (8006830 <USB_EPStartXfer+0x3b4>)
 800667c:	4694      	mov	ip, r2
 800667e:	4463      	add	r3, ip
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006682:	1d7b      	adds	r3, r7, #5
 8006684:	33ff      	adds	r3, #255	; 0xff
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	b29a      	uxth	r2, r3
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800668e:	2076      	movs	r0, #118	; 0x76
 8006690:	183b      	adds	r3, r7, r0
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	8952      	ldrh	r2, [r2, #10]
 8006696:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	6959      	ldr	r1, [r3, #20]
 800669c:	1d7b      	adds	r3, r7, #5
 800669e:	33ff      	adds	r3, #255	; 0xff
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	b29c      	uxth	r4, r3
 80066a4:	183b      	adds	r3, r7, r0
 80066a6:	881a      	ldrh	r2, [r3, #0]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	0023      	movs	r3, r4
 80066ac:	f001 f8da 	bl	8007864 <USB_WritePMA>
            ep->xfer_buff += len;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	1d7b      	adds	r3, r7, #5
 80066b6:	33ff      	adds	r3, #255	; 0xff
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	18d2      	adds	r2, r2, r3
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6a1a      	ldr	r2, [r3, #32]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d908      	bls.n	80066de <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	1d7b      	adds	r3, r7, #5
 80066d2:	33ff      	adds	r3, #255	; 0xff
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	621a      	str	r2, [r3, #32]
 80066dc:	e007      	b.n	80066ee <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	1d7a      	adds	r2, r7, #5
 80066e4:	32ff      	adds	r2, #255	; 0xff
 80066e6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2200      	movs	r2, #0
 80066ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	785b      	ldrb	r3, [r3, #1]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d166      	bne.n	80067c4 <USB_EPStartXfer+0x348>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2250      	movs	r2, #80	; 0x50
 80066fe:	5a9b      	ldrh	r3, [r3, r2]
 8006700:	b29b      	uxth	r3, r3
 8006702:	001a      	movs	r2, r3
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	189b      	adds	r3, r3, r2
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	00da      	lsls	r2, r3, #3
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	18d3      	adds	r3, r2, r3
 8006714:	4a43      	ldr	r2, [pc, #268]	; (8006824 <USB_EPStartXfer+0x3a8>)
 8006716:	4694      	mov	ip, r2
 8006718:	4463      	add	r3, ip
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	1d7b      	adds	r3, r7, #5
 800671e:	33ff      	adds	r3, #255	; 0xff
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d110      	bne.n	8006748 <USB_EPStartXfer+0x2cc>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	4a41      	ldr	r2, [pc, #260]	; (8006834 <USB_EPStartXfer+0x3b8>)
 800672e:	4013      	ands	r3, r2
 8006730:	b29a      	uxth	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	4a3e      	ldr	r2, [pc, #248]	; (8006838 <USB_EPStartXfer+0x3bc>)
 800673e:	4313      	orrs	r3, r2
 8006740:	b29a      	uxth	r2, r3
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	801a      	strh	r2, [r3, #0]
 8006746:	e05a      	b.n	80067fe <USB_EPStartXfer+0x382>
 8006748:	1d7b      	adds	r3, r7, #5
 800674a:	33ff      	adds	r3, #255	; 0xff
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b3e      	cmp	r3, #62	; 0x3e
 8006750:	d81a      	bhi.n	8006788 <USB_EPStartXfer+0x30c>
 8006752:	1d7b      	adds	r3, r7, #5
 8006754:	33ff      	adds	r3, #255	; 0xff
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	085b      	lsrs	r3, r3, #1
 800675a:	21fc      	movs	r1, #252	; 0xfc
 800675c:	187a      	adds	r2, r7, r1
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	1d7b      	adds	r3, r7, #5
 8006762:	33ff      	adds	r3, #255	; 0xff
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2201      	movs	r2, #1
 8006768:	4013      	ands	r3, r2
 800676a:	d004      	beq.n	8006776 <USB_EPStartXfer+0x2fa>
 800676c:	187b      	adds	r3, r7, r1
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3301      	adds	r3, #1
 8006772:	187a      	adds	r2, r7, r1
 8006774:	6013      	str	r3, [r2, #0]
 8006776:	23fc      	movs	r3, #252	; 0xfc
 8006778:	18fb      	adds	r3, r7, r3
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	029b      	lsls	r3, r3, #10
 8006780:	b29a      	uxth	r2, r3
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e03a      	b.n	80067fe <USB_EPStartXfer+0x382>
 8006788:	1d7b      	adds	r3, r7, #5
 800678a:	33ff      	adds	r3, #255	; 0xff
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	21fc      	movs	r1, #252	; 0xfc
 8006792:	187a      	adds	r2, r7, r1
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	1d7b      	adds	r3, r7, #5
 8006798:	33ff      	adds	r3, #255	; 0xff
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	221f      	movs	r2, #31
 800679e:	4013      	ands	r3, r2
 80067a0:	d104      	bne.n	80067ac <USB_EPStartXfer+0x330>
 80067a2:	187b      	adds	r3, r7, r1
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	187a      	adds	r2, r7, r1
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	23fc      	movs	r3, #252	; 0xfc
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	4a1f      	ldr	r2, [pc, #124]	; (8006838 <USB_EPStartXfer+0x3bc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b29a      	uxth	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	801a      	strh	r2, [r3, #0]
 80067c2:	e01c      	b.n	80067fe <USB_EPStartXfer+0x382>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d118      	bne.n	80067fe <USB_EPStartXfer+0x382>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2250      	movs	r2, #80	; 0x50
 80067d4:	5a9b      	ldrh	r3, [r3, r2]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	001a      	movs	r2, r3
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	189b      	adds	r3, r3, r2
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00da      	lsls	r2, r3, #3
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	18d3      	adds	r3, r2, r3
 80067ea:	4a0e      	ldr	r2, [pc, #56]	; (8006824 <USB_EPStartXfer+0x3a8>)
 80067ec:	4694      	mov	ip, r2
 80067ee:	4463      	add	r3, ip
 80067f0:	61fb      	str	r3, [r7, #28]
 80067f2:	1d7b      	adds	r3, r7, #5
 80067f4:	33ff      	adds	r3, #255	; 0xff
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067fe:	2076      	movs	r0, #118	; 0x76
 8006800:	183b      	adds	r3, r7, r0
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	8912      	ldrh	r2, [r2, #8]
 8006806:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	6959      	ldr	r1, [r3, #20]
 800680c:	1d7b      	adds	r3, r7, #5
 800680e:	33ff      	adds	r3, #255	; 0xff
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	b29c      	uxth	r4, r3
 8006814:	183b      	adds	r3, r7, r0
 8006816:	881a      	ldrh	r2, [r3, #0]
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	0023      	movs	r3, r4
 800681c:	f001 f822 	bl	8007864 <USB_WritePMA>
 8006820:	e301      	b.n	8006e26 <USB_EPStartXfer+0x9aa>
 8006822:	46c0      	nop			; (mov r8, r8)
 8006824:	00000402 	.word	0x00000402
 8006828:	ffff8f8f 	.word	0xffff8f8f
 800682c:	ffff8180 	.word	0xffff8180
 8006830:	00000406 	.word	0x00000406
 8006834:	ffff83ff 	.word	0xffff83ff
 8006838:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d166      	bne.n	8006912 <USB_EPStartXfer+0x496>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2250      	movs	r2, #80	; 0x50
 800684c:	5a9b      	ldrh	r3, [r3, r2]
 800684e:	b29b      	uxth	r3, r3
 8006850:	001a      	movs	r2, r3
 8006852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006854:	189b      	adds	r3, r3, r2
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	00da      	lsls	r2, r3, #3
 800685e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006860:	18d3      	adds	r3, r2, r3
 8006862:	4ac3      	ldr	r2, [pc, #780]	; (8006b70 <USB_EPStartXfer+0x6f4>)
 8006864:	4694      	mov	ip, r2
 8006866:	4463      	add	r3, ip
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
 800686a:	1d7b      	adds	r3, r7, #5
 800686c:	33ff      	adds	r3, #255	; 0xff
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d110      	bne.n	8006896 <USB_EPStartXfer+0x41a>
 8006874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	4abe      	ldr	r2, [pc, #760]	; (8006b74 <USB_EPStartXfer+0x6f8>)
 800687c:	4013      	ands	r3, r2
 800687e:	b29a      	uxth	r2, r3
 8006880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006882:	801a      	strh	r2, [r3, #0]
 8006884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	4abb      	ldr	r2, [pc, #748]	; (8006b78 <USB_EPStartXfer+0x6fc>)
 800688c:	4313      	orrs	r3, r2
 800688e:	b29a      	uxth	r2, r3
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	e05a      	b.n	800694c <USB_EPStartXfer+0x4d0>
 8006896:	1d7b      	adds	r3, r7, #5
 8006898:	33ff      	adds	r3, #255	; 0xff
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b3e      	cmp	r3, #62	; 0x3e
 800689e:	d81a      	bhi.n	80068d6 <USB_EPStartXfer+0x45a>
 80068a0:	1d7b      	adds	r3, r7, #5
 80068a2:	33ff      	adds	r3, #255	; 0xff
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	21f8      	movs	r1, #248	; 0xf8
 80068aa:	187a      	adds	r2, r7, r1
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	1d7b      	adds	r3, r7, #5
 80068b0:	33ff      	adds	r3, #255	; 0xff
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2201      	movs	r2, #1
 80068b6:	4013      	ands	r3, r2
 80068b8:	d004      	beq.n	80068c4 <USB_EPStartXfer+0x448>
 80068ba:	187b      	adds	r3, r7, r1
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	187a      	adds	r2, r7, r1
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	23f8      	movs	r3, #248	; 0xf8
 80068c6:	18fb      	adds	r3, r7, r3
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	029b      	lsls	r3, r3, #10
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e03a      	b.n	800694c <USB_EPStartXfer+0x4d0>
 80068d6:	1d7b      	adds	r3, r7, #5
 80068d8:	33ff      	adds	r3, #255	; 0xff
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	21f8      	movs	r1, #248	; 0xf8
 80068e0:	187a      	adds	r2, r7, r1
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	1d7b      	adds	r3, r7, #5
 80068e6:	33ff      	adds	r3, #255	; 0xff
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	221f      	movs	r2, #31
 80068ec:	4013      	ands	r3, r2
 80068ee:	d104      	bne.n	80068fa <USB_EPStartXfer+0x47e>
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3b01      	subs	r3, #1
 80068f6:	187a      	adds	r2, r7, r1
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	23f8      	movs	r3, #248	; 0xf8
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	029b      	lsls	r3, r3, #10
 8006904:	b29b      	uxth	r3, r3
 8006906:	4a9c      	ldr	r2, [pc, #624]	; (8006b78 <USB_EPStartXfer+0x6fc>)
 8006908:	4313      	orrs	r3, r2
 800690a:	b29a      	uxth	r2, r3
 800690c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690e:	801a      	strh	r2, [r3, #0]
 8006910:	e01c      	b.n	800694c <USB_EPStartXfer+0x4d0>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	785b      	ldrb	r3, [r3, #1]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d118      	bne.n	800694c <USB_EPStartXfer+0x4d0>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	653b      	str	r3, [r7, #80]	; 0x50
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2250      	movs	r2, #80	; 0x50
 8006922:	5a9b      	ldrh	r3, [r3, r2]
 8006924:	b29b      	uxth	r3, r3
 8006926:	001a      	movs	r2, r3
 8006928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692a:	189b      	adds	r3, r3, r2
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	00da      	lsls	r2, r3, #3
 8006934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006936:	18d3      	adds	r3, r2, r3
 8006938:	4a8d      	ldr	r2, [pc, #564]	; (8006b70 <USB_EPStartXfer+0x6f4>)
 800693a:	4694      	mov	ip, r2
 800693c:	4463      	add	r3, ip
 800693e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006940:	1d7b      	adds	r3, r7, #5
 8006942:	33ff      	adds	r3, #255	; 0xff
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	b29a      	uxth	r2, r3
 8006948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800694c:	2076      	movs	r0, #118	; 0x76
 800694e:	183b      	adds	r3, r7, r0
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	8912      	ldrh	r2, [r2, #8]
 8006954:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6959      	ldr	r1, [r3, #20]
 800695a:	1d7b      	adds	r3, r7, #5
 800695c:	33ff      	adds	r3, #255	; 0xff
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	b29c      	uxth	r4, r3
 8006962:	183b      	adds	r3, r7, r0
 8006964:	881a      	ldrh	r2, [r3, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	0023      	movs	r3, r4
 800696a:	f000 ff7b 	bl	8007864 <USB_WritePMA>
            ep->xfer_buff += len;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	695a      	ldr	r2, [r3, #20]
 8006972:	1d7b      	adds	r3, r7, #5
 8006974:	33ff      	adds	r3, #255	; 0xff
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	18d2      	adds	r2, r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6a1a      	ldr	r2, [r3, #32]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	429a      	cmp	r2, r3
 8006988:	d908      	bls.n	800699c <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6a1a      	ldr	r2, [r3, #32]
 800698e:	1d7b      	adds	r3, r7, #5
 8006990:	33ff      	adds	r3, #255	; 0xff
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	621a      	str	r2, [r3, #32]
 800699a:	e007      	b.n	80069ac <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	1d7a      	adds	r2, r7, #5
 80069a2:	32ff      	adds	r2, #255	; 0xff
 80069a4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2200      	movs	r2, #0
 80069aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	643b      	str	r3, [r7, #64]	; 0x40
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d166      	bne.n	8006a86 <USB_EPStartXfer+0x60a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2250      	movs	r2, #80	; 0x50
 80069c0:	5a9b      	ldrh	r3, [r3, r2]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	001a      	movs	r2, r3
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	189b      	adds	r3, r3, r2
 80069ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	00da      	lsls	r2, r3, #3
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	4a69      	ldr	r2, [pc, #420]	; (8006b7c <USB_EPStartXfer+0x700>)
 80069d8:	4694      	mov	ip, r2
 80069da:	4463      	add	r3, ip
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
 80069de:	1d7b      	adds	r3, r7, #5
 80069e0:	33ff      	adds	r3, #255	; 0xff
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d110      	bne.n	8006a0a <USB_EPStartXfer+0x58e>
 80069e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4a61      	ldr	r2, [pc, #388]	; (8006b74 <USB_EPStartXfer+0x6f8>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	801a      	strh	r2, [r3, #0]
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4a5e      	ldr	r2, [pc, #376]	; (8006b78 <USB_EPStartXfer+0x6fc>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	e058      	b.n	8006abc <USB_EPStartXfer+0x640>
 8006a0a:	1d7b      	adds	r3, r7, #5
 8006a0c:	33ff      	adds	r3, #255	; 0xff
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b3e      	cmp	r3, #62	; 0x3e
 8006a12:	d81a      	bhi.n	8006a4a <USB_EPStartXfer+0x5ce>
 8006a14:	1d7b      	adds	r3, r7, #5
 8006a16:	33ff      	adds	r3, #255	; 0xff
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	085b      	lsrs	r3, r3, #1
 8006a1c:	21f4      	movs	r1, #244	; 0xf4
 8006a1e:	187a      	adds	r2, r7, r1
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	1d7b      	adds	r3, r7, #5
 8006a24:	33ff      	adds	r3, #255	; 0xff
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <USB_EPStartXfer+0x5bc>
 8006a2e:	187b      	adds	r3, r7, r1
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3301      	adds	r3, #1
 8006a34:	187a      	adds	r2, r7, r1
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	23f4      	movs	r3, #244	; 0xf4
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	029b      	lsls	r3, r3, #10
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e038      	b.n	8006abc <USB_EPStartXfer+0x640>
 8006a4a:	1d7b      	adds	r3, r7, #5
 8006a4c:	33ff      	adds	r3, #255	; 0xff
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	21f4      	movs	r1, #244	; 0xf4
 8006a54:	187a      	adds	r2, r7, r1
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	1d7b      	adds	r3, r7, #5
 8006a5a:	33ff      	adds	r3, #255	; 0xff
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	221f      	movs	r2, #31
 8006a60:	4013      	ands	r3, r2
 8006a62:	d104      	bne.n	8006a6e <USB_EPStartXfer+0x5f2>
 8006a64:	187b      	adds	r3, r7, r1
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	187a      	adds	r2, r7, r1
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	23f4      	movs	r3, #244	; 0xf4
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	029b      	lsls	r3, r3, #10
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	4a3f      	ldr	r2, [pc, #252]	; (8006b78 <USB_EPStartXfer+0x6fc>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a82:	801a      	strh	r2, [r3, #0]
 8006a84:	e01a      	b.n	8006abc <USB_EPStartXfer+0x640>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d116      	bne.n	8006abc <USB_EPStartXfer+0x640>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2250      	movs	r2, #80	; 0x50
 8006a92:	5a9b      	ldrh	r3, [r3, r2]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	001a      	movs	r2, r3
 8006a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a9a:	189b      	adds	r3, r3, r2
 8006a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	00da      	lsls	r2, r3, #3
 8006aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa6:	18d3      	adds	r3, r2, r3
 8006aa8:	4a34      	ldr	r2, [pc, #208]	; (8006b7c <USB_EPStartXfer+0x700>)
 8006aaa:	4694      	mov	ip, r2
 8006aac:	4463      	add	r3, ip
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab0:	1d7b      	adds	r3, r7, #5
 8006ab2:	33ff      	adds	r3, #255	; 0xff
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006abc:	2076      	movs	r0, #118	; 0x76
 8006abe:	183b      	adds	r3, r7, r0
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	8952      	ldrh	r2, [r2, #10]
 8006ac4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6959      	ldr	r1, [r3, #20]
 8006aca:	1d7b      	adds	r3, r7, #5
 8006acc:	33ff      	adds	r3, #255	; 0xff
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	b29c      	uxth	r4, r3
 8006ad2:	183b      	adds	r3, r7, r0
 8006ad4:	881a      	ldrh	r2, [r3, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	0023      	movs	r3, r4
 8006ada:	f000 fec3 	bl	8007864 <USB_WritePMA>
 8006ade:	e1a2      	b.n	8006e26 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	1d7a      	adds	r2, r7, #5
 8006ae6:	32ff      	adds	r2, #255	; 0xff
 8006ae8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	18d3      	adds	r3, r2, r3
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	2062      	movs	r0, #98	; 0x62
 8006afa:	183b      	adds	r3, r7, r0
 8006afc:	4920      	ldr	r1, [pc, #128]	; (8006b80 <USB_EPStartXfer+0x704>)
 8006afe:	400a      	ands	r2, r1
 8006b00:	801a      	strh	r2, [r3, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	18d3      	adds	r3, r2, r3
 8006b0c:	183a      	adds	r2, r7, r0
 8006b0e:	8812      	ldrh	r2, [r2, #0]
 8006b10:	491c      	ldr	r1, [pc, #112]	; (8006b84 <USB_EPStartXfer+0x708>)
 8006b12:	430a      	orrs	r2, r1
 8006b14:	b292      	uxth	r2, r2
 8006b16:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2250      	movs	r2, #80	; 0x50
 8006b20:	5a9b      	ldrh	r3, [r3, r2]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	001a      	movs	r2, r3
 8006b26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b28:	189b      	adds	r3, r3, r2
 8006b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	00da      	lsls	r2, r3, #3
 8006b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b34:	18d3      	adds	r3, r2, r3
 8006b36:	4a0e      	ldr	r2, [pc, #56]	; (8006b70 <USB_EPStartXfer+0x6f4>)
 8006b38:	4694      	mov	ip, r2
 8006b3a:	4463      	add	r3, ip
 8006b3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b3e:	1d7b      	adds	r3, r7, #5
 8006b40:	33ff      	adds	r3, #255	; 0xff
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b48:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b4a:	2076      	movs	r0, #118	; 0x76
 8006b4c:	183b      	adds	r3, r7, r0
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	8912      	ldrh	r2, [r2, #8]
 8006b52:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6959      	ldr	r1, [r3, #20]
 8006b58:	1d7b      	adds	r3, r7, #5
 8006b5a:	33ff      	adds	r3, #255	; 0xff
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	b29c      	uxth	r4, r3
 8006b60:	183b      	adds	r3, r7, r0
 8006b62:	881a      	ldrh	r2, [r3, #0]
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	0023      	movs	r3, r4
 8006b68:	f000 fe7c 	bl	8007864 <USB_WritePMA>
 8006b6c:	e15b      	b.n	8006e26 <USB_EPStartXfer+0x9aa>
 8006b6e:	46c0      	nop			; (mov r8, r8)
 8006b70:	00000402 	.word	0x00000402
 8006b74:	ffff83ff 	.word	0xffff83ff
 8006b78:	ffff8000 	.word	0xffff8000
 8006b7c:	00000406 	.word	0x00000406
 8006b80:	ffff8e8f 	.word	0xffff8e8f
 8006b84:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6a1a      	ldr	r2, [r3, #32]
 8006b8c:	1d7b      	adds	r3, r7, #5
 8006b8e:	33ff      	adds	r3, #255	; 0xff
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	1ad2      	subs	r2, r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	18d3      	adds	r3, r2, r3
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	001a      	movs	r2, r3
 8006ba8:	2340      	movs	r3, #64	; 0x40
 8006baa:	4013      	ands	r3, r2
 8006bac:	d100      	bne.n	8006bb0 <USB_EPStartXfer+0x734>
 8006bae:	e099      	b.n	8006ce4 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	673b      	str	r3, [r7, #112]	; 0x70
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	785b      	ldrb	r3, [r3, #1]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d166      	bne.n	8006c8a <USB_EPStartXfer+0x80e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2250      	movs	r2, #80	; 0x50
 8006bc4:	5a9b      	ldrh	r3, [r3, r2]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	001a      	movs	r2, r3
 8006bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bcc:	189b      	adds	r3, r3, r2
 8006bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	00da      	lsls	r2, r3, #3
 8006bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006bd8:	18d3      	adds	r3, r2, r3
 8006bda:	4ad0      	ldr	r2, [pc, #832]	; (8006f1c <USB_EPStartXfer+0xaa0>)
 8006bdc:	4694      	mov	ip, r2
 8006bde:	4463      	add	r3, ip
 8006be0:	667b      	str	r3, [r7, #100]	; 0x64
 8006be2:	1d7b      	adds	r3, r7, #5
 8006be4:	33ff      	adds	r3, #255	; 0xff
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d110      	bne.n	8006c0e <USB_EPStartXfer+0x792>
 8006bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4acb      	ldr	r2, [pc, #812]	; (8006f20 <USB_EPStartXfer+0xaa4>)
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfa:	801a      	strh	r2, [r3, #0]
 8006bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	4ac8      	ldr	r2, [pc, #800]	; (8006f24 <USB_EPStartXfer+0xaa8>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0a:	801a      	strh	r2, [r3, #0]
 8006c0c:	e058      	b.n	8006cc0 <USB_EPStartXfer+0x844>
 8006c0e:	1d7b      	adds	r3, r7, #5
 8006c10:	33ff      	adds	r3, #255	; 0xff
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b3e      	cmp	r3, #62	; 0x3e
 8006c16:	d81a      	bhi.n	8006c4e <USB_EPStartXfer+0x7d2>
 8006c18:	1d7b      	adds	r3, r7, #5
 8006c1a:	33ff      	adds	r3, #255	; 0xff
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	085b      	lsrs	r3, r3, #1
 8006c20:	21f0      	movs	r1, #240	; 0xf0
 8006c22:	187a      	adds	r2, r7, r1
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	1d7b      	adds	r3, r7, #5
 8006c28:	33ff      	adds	r3, #255	; 0xff
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d004      	beq.n	8006c3c <USB_EPStartXfer+0x7c0>
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	3301      	adds	r3, #1
 8006c38:	187a      	adds	r2, r7, r1
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	23f0      	movs	r3, #240	; 0xf0
 8006c3e:	18fb      	adds	r3, r7, r3
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	029b      	lsls	r3, r3, #10
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4a:	801a      	strh	r2, [r3, #0]
 8006c4c:	e038      	b.n	8006cc0 <USB_EPStartXfer+0x844>
 8006c4e:	1d7b      	adds	r3, r7, #5
 8006c50:	33ff      	adds	r3, #255	; 0xff
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	21f0      	movs	r1, #240	; 0xf0
 8006c58:	187a      	adds	r2, r7, r1
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	1d7b      	adds	r3, r7, #5
 8006c5e:	33ff      	adds	r3, #255	; 0xff
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	221f      	movs	r2, #31
 8006c64:	4013      	ands	r3, r2
 8006c66:	d104      	bne.n	8006c72 <USB_EPStartXfer+0x7f6>
 8006c68:	187b      	adds	r3, r7, r1
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	187a      	adds	r2, r7, r1
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	23f0      	movs	r3, #240	; 0xf0
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	029b      	lsls	r3, r3, #10
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	4aa9      	ldr	r2, [pc, #676]	; (8006f24 <USB_EPStartXfer+0xaa8>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	e01a      	b.n	8006cc0 <USB_EPStartXfer+0x844>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	785b      	ldrb	r3, [r3, #1]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d116      	bne.n	8006cc0 <USB_EPStartXfer+0x844>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2250      	movs	r2, #80	; 0x50
 8006c96:	5a9b      	ldrh	r3, [r3, r2]
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	001a      	movs	r2, r3
 8006c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c9e:	189b      	adds	r3, r3, r2
 8006ca0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	00da      	lsls	r2, r3, #3
 8006ca8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006caa:	18d3      	adds	r3, r2, r3
 8006cac:	4a9b      	ldr	r2, [pc, #620]	; (8006f1c <USB_EPStartXfer+0xaa0>)
 8006cae:	4694      	mov	ip, r2
 8006cb0:	4463      	add	r3, ip
 8006cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cb4:	1d7b      	adds	r3, r7, #5
 8006cb6:	33ff      	adds	r3, #255	; 0xff
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006cc0:	2076      	movs	r0, #118	; 0x76
 8006cc2:	183b      	adds	r3, r7, r0
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	8952      	ldrh	r2, [r2, #10]
 8006cc8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6959      	ldr	r1, [r3, #20]
 8006cce:	1d7b      	adds	r3, r7, #5
 8006cd0:	33ff      	adds	r3, #255	; 0xff
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	b29c      	uxth	r4, r3
 8006cd6:	183b      	adds	r3, r7, r0
 8006cd8:	881a      	ldrh	r2, [r3, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	0023      	movs	r3, r4
 8006cde:	f000 fdc1 	bl	8007864 <USB_WritePMA>
 8006ce2:	e0a0      	b.n	8006e26 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	785b      	ldrb	r3, [r3, #1]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d166      	bne.n	8006dba <USB_EPStartXfer+0x93e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2250      	movs	r2, #80	; 0x50
 8006cf4:	5a9b      	ldrh	r3, [r3, r2]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	001a      	movs	r2, r3
 8006cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cfc:	189b      	adds	r3, r3, r2
 8006cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d08:	18d3      	adds	r3, r2, r3
 8006d0a:	4a87      	ldr	r2, [pc, #540]	; (8006f28 <USB_EPStartXfer+0xaac>)
 8006d0c:	4694      	mov	ip, r2
 8006d0e:	4463      	add	r3, ip
 8006d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d12:	1d7b      	adds	r3, r7, #5
 8006d14:	33ff      	adds	r3, #255	; 0xff
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d110      	bne.n	8006d3e <USB_EPStartXfer+0x8c2>
 8006d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1e:	881b      	ldrh	r3, [r3, #0]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4a7f      	ldr	r2, [pc, #508]	; (8006f20 <USB_EPStartXfer+0xaa4>)
 8006d24:	4013      	ands	r3, r2
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2a:	801a      	strh	r2, [r3, #0]
 8006d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	4a7c      	ldr	r2, [pc, #496]	; (8006f24 <USB_EPStartXfer+0xaa8>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d3a:	801a      	strh	r2, [r3, #0]
 8006d3c:	e062      	b.n	8006e04 <USB_EPStartXfer+0x988>
 8006d3e:	1d7b      	adds	r3, r7, #5
 8006d40:	33ff      	adds	r3, #255	; 0xff
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b3e      	cmp	r3, #62	; 0x3e
 8006d46:	d81a      	bhi.n	8006d7e <USB_EPStartXfer+0x902>
 8006d48:	1d7b      	adds	r3, r7, #5
 8006d4a:	33ff      	adds	r3, #255	; 0xff
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	21ec      	movs	r1, #236	; 0xec
 8006d52:	187a      	adds	r2, r7, r1
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	1d7b      	adds	r3, r7, #5
 8006d58:	33ff      	adds	r3, #255	; 0xff
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d004      	beq.n	8006d6c <USB_EPStartXfer+0x8f0>
 8006d62:	187b      	adds	r3, r7, r1
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	3301      	adds	r3, #1
 8006d68:	187a      	adds	r2, r7, r1
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	23ec      	movs	r3, #236	; 0xec
 8006d6e:	18fb      	adds	r3, r7, r3
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	029b      	lsls	r3, r3, #10
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e042      	b.n	8006e04 <USB_EPStartXfer+0x988>
 8006d7e:	1d7b      	adds	r3, r7, #5
 8006d80:	33ff      	adds	r3, #255	; 0xff
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	21ec      	movs	r1, #236	; 0xec
 8006d88:	187a      	adds	r2, r7, r1
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	1d7b      	adds	r3, r7, #5
 8006d8e:	33ff      	adds	r3, #255	; 0xff
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	221f      	movs	r2, #31
 8006d94:	4013      	ands	r3, r2
 8006d96:	d104      	bne.n	8006da2 <USB_EPStartXfer+0x926>
 8006d98:	187b      	adds	r3, r7, r1
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	187a      	adds	r2, r7, r1
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	23ec      	movs	r3, #236	; 0xec
 8006da4:	18fb      	adds	r3, r7, r3
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	029b      	lsls	r3, r3, #10
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	4a5d      	ldr	r2, [pc, #372]	; (8006f24 <USB_EPStartXfer+0xaa8>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e024      	b.n	8006e04 <USB_EPStartXfer+0x988>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d120      	bne.n	8006e04 <USB_EPStartXfer+0x988>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2184      	movs	r1, #132	; 0x84
 8006dc6:	187a      	adds	r2, r7, r1
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2250      	movs	r2, #80	; 0x50
 8006dce:	5a9b      	ldrh	r3, [r3, r2]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	189b      	adds	r3, r3, r2
 8006dda:	187a      	adds	r2, r7, r1
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	00da      	lsls	r2, r3, #3
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	18d3      	adds	r3, r2, r3
 8006dea:	4a4f      	ldr	r2, [pc, #316]	; (8006f28 <USB_EPStartXfer+0xaac>)
 8006dec:	4694      	mov	ip, r2
 8006dee:	4463      	add	r3, ip
 8006df0:	2180      	movs	r1, #128	; 0x80
 8006df2:	187a      	adds	r2, r7, r1
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	1d7b      	adds	r3, r7, #5
 8006df8:	33ff      	adds	r3, #255	; 0xff
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	187b      	adds	r3, r7, r1
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006e04:	2076      	movs	r0, #118	; 0x76
 8006e06:	183b      	adds	r3, r7, r0
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	8912      	ldrh	r2, [r2, #8]
 8006e0c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	1d7b      	adds	r3, r7, #5
 8006e14:	33ff      	adds	r3, #255	; 0xff
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	b29c      	uxth	r4, r3
 8006e1a:	183b      	adds	r3, r7, r0
 8006e1c:	881a      	ldrh	r2, [r3, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	0023      	movs	r3, r4
 8006e22:	f000 fd1f 	bl	8007864 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	18d3      	adds	r3, r2, r3
 8006e30:	881b      	ldrh	r3, [r3, #0]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	200a      	movs	r0, #10
 8006e36:	183b      	adds	r3, r7, r0
 8006e38:	493c      	ldr	r1, [pc, #240]	; (8006f2c <USB_EPStartXfer+0xab0>)
 8006e3a:	400a      	ands	r2, r1
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	183b      	adds	r3, r7, r0
 8006e40:	183a      	adds	r2, r7, r0
 8006e42:	8812      	ldrh	r2, [r2, #0]
 8006e44:	2110      	movs	r1, #16
 8006e46:	404a      	eors	r2, r1
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	183b      	adds	r3, r7, r0
 8006e4c:	183a      	adds	r2, r7, r0
 8006e4e:	8812      	ldrh	r2, [r2, #0]
 8006e50:	2120      	movs	r1, #32
 8006e52:	404a      	eors	r2, r1
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	18d3      	adds	r3, r2, r3
 8006e60:	183a      	adds	r2, r7, r0
 8006e62:	8812      	ldrh	r2, [r2, #0]
 8006e64:	4932      	ldr	r1, [pc, #200]	; (8006f30 <USB_EPStartXfer+0xab4>)
 8006e66:	430a      	orrs	r2, r1
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	801a      	strh	r2, [r3, #0]
 8006e6c:	f000 fbaf 	bl	80075ce <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	7b1b      	ldrb	r3, [r3, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d000      	beq.n	8006e7a <USB_EPStartXfer+0x9fe>
 8006e78:	e09e      	b.n	8006fb8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d90d      	bls.n	8006ea2 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	1d7a      	adds	r2, r7, #5
 8006e8c:	32ff      	adds	r2, #255	; 0xff
 8006e8e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699a      	ldr	r2, [r3, #24]
 8006e94:	1d7b      	adds	r3, r7, #5
 8006e96:	33ff      	adds	r3, #255	; 0xff
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	1ad2      	subs	r2, r2, r3
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	619a      	str	r2, [r3, #24]
 8006ea0:	e007      	b.n	8006eb2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	1d7a      	adds	r2, r7, #5
 8006ea8:	32ff      	adds	r2, #255	; 0xff
 8006eaa:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2190      	movs	r1, #144	; 0x90
 8006eb6:	187a      	adds	r2, r7, r1
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2250      	movs	r2, #80	; 0x50
 8006ebe:	5a9b      	ldrh	r3, [r3, r2]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	001a      	movs	r2, r3
 8006ec4:	187b      	adds	r3, r7, r1
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	189b      	adds	r3, r3, r2
 8006eca:	187a      	adds	r2, r7, r1
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	00da      	lsls	r2, r3, #3
 8006ed4:	187b      	adds	r3, r7, r1
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	18d3      	adds	r3, r2, r3
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <USB_EPStartXfer+0xaa0>)
 8006edc:	4694      	mov	ip, r2
 8006ede:	4463      	add	r3, ip
 8006ee0:	218c      	movs	r1, #140	; 0x8c
 8006ee2:	187a      	adds	r2, r7, r1
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	1d7b      	adds	r3, r7, #5
 8006ee8:	33ff      	adds	r3, #255	; 0xff
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d121      	bne.n	8006f34 <USB_EPStartXfer+0xab8>
 8006ef0:	187b      	adds	r3, r7, r1
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <USB_EPStartXfer+0xaa4>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	187b      	adds	r3, r7, r1
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	187b      	adds	r3, r7, r1
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	4a05      	ldr	r2, [pc, #20]	; (8006f24 <USB_EPStartXfer+0xaa8>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	187b      	adds	r3, r7, r1
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e334      	b.n	8007584 <USB_EPStartXfer+0x1108>
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	00000406 	.word	0x00000406
 8006f20:	ffff83ff 	.word	0xffff83ff
 8006f24:	ffff8000 	.word	0xffff8000
 8006f28:	00000402 	.word	0x00000402
 8006f2c:	ffff8fbf 	.word	0xffff8fbf
 8006f30:	ffff8080 	.word	0xffff8080
 8006f34:	1d7b      	adds	r3, r7, #5
 8006f36:	33ff      	adds	r3, #255	; 0xff
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f3c:	d81c      	bhi.n	8006f78 <USB_EPStartXfer+0xafc>
 8006f3e:	1d7b      	adds	r3, r7, #5
 8006f40:	33ff      	adds	r3, #255	; 0xff
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	085b      	lsrs	r3, r3, #1
 8006f46:	21e8      	movs	r1, #232	; 0xe8
 8006f48:	187a      	adds	r2, r7, r1
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	1d7b      	adds	r3, r7, #5
 8006f4e:	33ff      	adds	r3, #255	; 0xff
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2201      	movs	r2, #1
 8006f54:	4013      	ands	r3, r2
 8006f56:	d004      	beq.n	8006f62 <USB_EPStartXfer+0xae6>
 8006f58:	187b      	adds	r3, r7, r1
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	187a      	adds	r2, r7, r1
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	23e8      	movs	r3, #232	; 0xe8
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	238c      	movs	r3, #140	; 0x8c
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e305      	b.n	8007584 <USB_EPStartXfer+0x1108>
 8006f78:	1d7b      	adds	r3, r7, #5
 8006f7a:	33ff      	adds	r3, #255	; 0xff
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	21e8      	movs	r1, #232	; 0xe8
 8006f82:	187a      	adds	r2, r7, r1
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	1d7b      	adds	r3, r7, #5
 8006f88:	33ff      	adds	r3, #255	; 0xff
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	221f      	movs	r2, #31
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d104      	bne.n	8006f9c <USB_EPStartXfer+0xb20>
 8006f92:	187b      	adds	r3, r7, r1
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	187a      	adds	r2, r7, r1
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	23e8      	movs	r3, #232	; 0xe8
 8006f9e:	18fb      	adds	r3, r7, r3
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	4aca      	ldr	r2, [pc, #808]	; (80072d4 <USB_EPStartXfer+0xe58>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	238c      	movs	r3, #140	; 0x8c
 8006fb0:	18fb      	adds	r3, r7, r3
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	801a      	strh	r2, [r3, #0]
 8006fb6:	e2e5      	b.n	8007584 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	78db      	ldrb	r3, [r3, #3]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d000      	beq.n	8006fc2 <USB_EPStartXfer+0xb46>
 8006fc0:	e16f      	b.n	80072a2 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	785b      	ldrb	r3, [r3, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d16f      	bne.n	80070aa <USB_EPStartXfer+0xc2e>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	21ac      	movs	r1, #172	; 0xac
 8006fce:	187a      	adds	r2, r7, r1
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2250      	movs	r2, #80	; 0x50
 8006fd6:	5a9b      	ldrh	r3, [r3, r2]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	001a      	movs	r2, r3
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	189b      	adds	r3, r3, r2
 8006fe2:	187a      	adds	r2, r7, r1
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	00da      	lsls	r2, r3, #3
 8006fec:	187b      	adds	r3, r7, r1
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	18d3      	adds	r3, r2, r3
 8006ff2:	4ab9      	ldr	r2, [pc, #740]	; (80072d8 <USB_EPStartXfer+0xe5c>)
 8006ff4:	4694      	mov	ip, r2
 8006ff6:	4463      	add	r3, ip
 8006ff8:	21a8      	movs	r1, #168	; 0xa8
 8006ffa:	187a      	adds	r2, r7, r1
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d114      	bne.n	8007030 <USB_EPStartXfer+0xbb4>
 8007006:	187b      	adds	r3, r7, r1
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	b29b      	uxth	r3, r3
 800700e:	4ab3      	ldr	r2, [pc, #716]	; (80072dc <USB_EPStartXfer+0xe60>)
 8007010:	4013      	ands	r3, r2
 8007012:	b29a      	uxth	r2, r3
 8007014:	187b      	adds	r3, r7, r1
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	801a      	strh	r2, [r3, #0]
 800701a:	187b      	adds	r3, r7, r1
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	4aac      	ldr	r2, [pc, #688]	; (80072d4 <USB_EPStartXfer+0xe58>)
 8007024:	4313      	orrs	r3, r2
 8007026:	b29a      	uxth	r2, r3
 8007028:	187b      	adds	r3, r7, r1
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	801a      	strh	r2, [r3, #0]
 800702e:	e060      	b.n	80070f2 <USB_EPStartXfer+0xc76>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b3e      	cmp	r3, #62	; 0x3e
 8007036:	d81a      	bhi.n	800706e <USB_EPStartXfer+0xbf2>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	085b      	lsrs	r3, r3, #1
 800703e:	21e4      	movs	r1, #228	; 0xe4
 8007040:	187a      	adds	r2, r7, r1
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2201      	movs	r2, #1
 800704a:	4013      	ands	r3, r2
 800704c:	d004      	beq.n	8007058 <USB_EPStartXfer+0xbdc>
 800704e:	187b      	adds	r3, r7, r1
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3301      	adds	r3, #1
 8007054:	187a      	adds	r2, r7, r1
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	23e4      	movs	r3, #228	; 0xe4
 800705a:	18fb      	adds	r3, r7, r3
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29a      	uxth	r2, r3
 8007064:	23a8      	movs	r3, #168	; 0xa8
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	e041      	b.n	80070f2 <USB_EPStartXfer+0xc76>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	21e4      	movs	r1, #228	; 0xe4
 8007076:	187a      	adds	r2, r7, r1
 8007078:	6013      	str	r3, [r2, #0]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	221f      	movs	r2, #31
 8007080:	4013      	ands	r3, r2
 8007082:	d104      	bne.n	800708e <USB_EPStartXfer+0xc12>
 8007084:	187b      	adds	r3, r7, r1
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3b01      	subs	r3, #1
 800708a:	187a      	adds	r2, r7, r1
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	23e4      	movs	r3, #228	; 0xe4
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	029b      	lsls	r3, r3, #10
 8007098:	b29b      	uxth	r3, r3
 800709a:	4a8e      	ldr	r2, [pc, #568]	; (80072d4 <USB_EPStartXfer+0xe58>)
 800709c:	4313      	orrs	r3, r2
 800709e:	b29a      	uxth	r2, r3
 80070a0:	23a8      	movs	r3, #168	; 0xa8
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e023      	b.n	80070f2 <USB_EPStartXfer+0xc76>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d11f      	bne.n	80070f2 <USB_EPStartXfer+0xc76>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	21b4      	movs	r1, #180	; 0xb4
 80070b6:	187a      	adds	r2, r7, r1
 80070b8:	6013      	str	r3, [r2, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2250      	movs	r2, #80	; 0x50
 80070be:	5a9b      	ldrh	r3, [r3, r2]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	001a      	movs	r2, r3
 80070c4:	187b      	adds	r3, r7, r1
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	189b      	adds	r3, r3, r2
 80070ca:	187a      	adds	r2, r7, r1
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	00da      	lsls	r2, r3, #3
 80070d4:	187b      	adds	r3, r7, r1
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	18d3      	adds	r3, r2, r3
 80070da:	4a7f      	ldr	r2, [pc, #508]	; (80072d8 <USB_EPStartXfer+0xe5c>)
 80070dc:	4694      	mov	ip, r2
 80070de:	4463      	add	r3, ip
 80070e0:	21b0      	movs	r1, #176	; 0xb0
 80070e2:	187a      	adds	r2, r7, r1
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	801a      	strh	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	22a4      	movs	r2, #164	; 0xa4
 80070f6:	18ba      	adds	r2, r7, r2
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d16f      	bne.n	80071e2 <USB_EPStartXfer+0xd66>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	219c      	movs	r1, #156	; 0x9c
 8007106:	187a      	adds	r2, r7, r1
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2250      	movs	r2, #80	; 0x50
 800710e:	5a9b      	ldrh	r3, [r3, r2]
 8007110:	b29b      	uxth	r3, r3
 8007112:	001a      	movs	r2, r3
 8007114:	187b      	adds	r3, r7, r1
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	189b      	adds	r3, r3, r2
 800711a:	187a      	adds	r2, r7, r1
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	00da      	lsls	r2, r3, #3
 8007124:	187b      	adds	r3, r7, r1
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	18d3      	adds	r3, r2, r3
 800712a:	4a6d      	ldr	r2, [pc, #436]	; (80072e0 <USB_EPStartXfer+0xe64>)
 800712c:	4694      	mov	ip, r2
 800712e:	4463      	add	r3, ip
 8007130:	2198      	movs	r1, #152	; 0x98
 8007132:	187a      	adds	r2, r7, r1
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d114      	bne.n	8007168 <USB_EPStartXfer+0xcec>
 800713e:	187b      	adds	r3, r7, r1
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	4a65      	ldr	r2, [pc, #404]	; (80072dc <USB_EPStartXfer+0xe60>)
 8007148:	4013      	ands	r3, r2
 800714a:	b29a      	uxth	r2, r3
 800714c:	187b      	adds	r3, r7, r1
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	801a      	strh	r2, [r3, #0]
 8007152:	187b      	adds	r3, r7, r1
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	4a5e      	ldr	r2, [pc, #376]	; (80072d4 <USB_EPStartXfer+0xe58>)
 800715c:	4313      	orrs	r3, r2
 800715e:	b29a      	uxth	r2, r3
 8007160:	187b      	adds	r3, r7, r1
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	801a      	strh	r2, [r3, #0]
 8007166:	e05d      	b.n	8007224 <USB_EPStartXfer+0xda8>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	2b3e      	cmp	r3, #62	; 0x3e
 800716e:	d81a      	bhi.n	80071a6 <USB_EPStartXfer+0xd2a>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	21e0      	movs	r1, #224	; 0xe0
 8007178:	187a      	adds	r2, r7, r1
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	2201      	movs	r2, #1
 8007182:	4013      	ands	r3, r2
 8007184:	d004      	beq.n	8007190 <USB_EPStartXfer+0xd14>
 8007186:	187b      	adds	r3, r7, r1
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	187a      	adds	r2, r7, r1
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	23e0      	movs	r3, #224	; 0xe0
 8007192:	18fb      	adds	r3, r7, r3
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	029b      	lsls	r3, r3, #10
 800719a:	b29a      	uxth	r2, r3
 800719c:	2398      	movs	r3, #152	; 0x98
 800719e:	18fb      	adds	r3, r7, r3
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	e03e      	b.n	8007224 <USB_EPStartXfer+0xda8>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	21e0      	movs	r1, #224	; 0xe0
 80071ae:	187a      	adds	r2, r7, r1
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	221f      	movs	r2, #31
 80071b8:	4013      	ands	r3, r2
 80071ba:	d104      	bne.n	80071c6 <USB_EPStartXfer+0xd4a>
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	187a      	adds	r2, r7, r1
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	23e0      	movs	r3, #224	; 0xe0
 80071c8:	18fb      	adds	r3, r7, r3
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	029b      	lsls	r3, r3, #10
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4a40      	ldr	r2, [pc, #256]	; (80072d4 <USB_EPStartXfer+0xe58>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	2398      	movs	r3, #152	; 0x98
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	801a      	strh	r2, [r3, #0]
 80071e0:	e020      	b.n	8007224 <USB_EPStartXfer+0xda8>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11c      	bne.n	8007224 <USB_EPStartXfer+0xda8>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2250      	movs	r2, #80	; 0x50
 80071ee:	5a9b      	ldrh	r3, [r3, r2]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	001a      	movs	r2, r3
 80071f4:	21a4      	movs	r1, #164	; 0xa4
 80071f6:	187b      	adds	r3, r7, r1
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	189b      	adds	r3, r3, r2
 80071fc:	187a      	adds	r2, r7, r1
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	00da      	lsls	r2, r3, #3
 8007206:	187b      	adds	r3, r7, r1
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	18d3      	adds	r3, r2, r3
 800720c:	4a34      	ldr	r2, [pc, #208]	; (80072e0 <USB_EPStartXfer+0xe64>)
 800720e:	4694      	mov	ip, r2
 8007210:	4463      	add	r3, ip
 8007212:	21a0      	movs	r1, #160	; 0xa0
 8007214:	187a      	adds	r2, r7, r1
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	b29a      	uxth	r2, r3
 800721e:	187b      	adds	r3, r7, r1
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	69db      	ldr	r3, [r3, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d100      	bne.n	800722e <USB_EPStartXfer+0xdb2>
 800722c:	e1aa      	b.n	8007584 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	18d2      	adds	r2, r2, r3
 8007238:	2196      	movs	r1, #150	; 0x96
 800723a:	187b      	adds	r3, r7, r1
 800723c:	8812      	ldrh	r2, [r2, #0]
 800723e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007240:	187b      	adds	r3, r7, r1
 8007242:	881a      	ldrh	r2, [r3, #0]
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	01db      	lsls	r3, r3, #7
 8007248:	4013      	ands	r3, r2
 800724a:	d004      	beq.n	8007256 <USB_EPStartXfer+0xdda>
 800724c:	187b      	adds	r3, r7, r1
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	4013      	ands	r3, r2
 8007254:	d10d      	bne.n	8007272 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007256:	2196      	movs	r1, #150	; 0x96
 8007258:	187b      	adds	r3, r7, r1
 800725a:	881a      	ldrh	r2, [r3, #0]
 800725c:	2380      	movs	r3, #128	; 0x80
 800725e:	01db      	lsls	r3, r3, #7
 8007260:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007262:	d000      	beq.n	8007266 <USB_EPStartXfer+0xdea>
 8007264:	e18e      	b.n	8007584 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007266:	187b      	adds	r3, r7, r1
 8007268:	881b      	ldrh	r3, [r3, #0]
 800726a:	2240      	movs	r2, #64	; 0x40
 800726c:	4013      	ands	r3, r2
 800726e:	d000      	beq.n	8007272 <USB_EPStartXfer+0xdf6>
 8007270:	e188      	b.n	8007584 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	18d3      	adds	r3, r2, r3
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	b29a      	uxth	r2, r3
 8007280:	2094      	movs	r0, #148	; 0x94
 8007282:	183b      	adds	r3, r7, r0
 8007284:	4917      	ldr	r1, [pc, #92]	; (80072e4 <USB_EPStartXfer+0xe68>)
 8007286:	400a      	ands	r2, r1
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	18d3      	adds	r3, r2, r3
 8007294:	183a      	adds	r2, r7, r0
 8007296:	8812      	ldrh	r2, [r2, #0]
 8007298:	4913      	ldr	r1, [pc, #76]	; (80072e8 <USB_EPStartXfer+0xe6c>)
 800729a:	430a      	orrs	r2, r1
 800729c:	b292      	uxth	r2, r2
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	e170      	b.n	8007584 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	78db      	ldrb	r3, [r3, #3]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d000      	beq.n	80072ac <USB_EPStartXfer+0xe30>
 80072aa:	e169      	b.n	8007580 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	699a      	ldr	r2, [r3, #24]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d919      	bls.n	80072ec <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	1d7a      	adds	r2, r7, #5
 80072be:	32ff      	adds	r2, #255	; 0xff
 80072c0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	699a      	ldr	r2, [r3, #24]
 80072c6:	1d7b      	adds	r3, r7, #5
 80072c8:	33ff      	adds	r3, #255	; 0xff
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	1ad2      	subs	r2, r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	619a      	str	r2, [r3, #24]
 80072d2:	e013      	b.n	80072fc <USB_EPStartXfer+0xe80>
 80072d4:	ffff8000 	.word	0xffff8000
 80072d8:	00000402 	.word	0x00000402
 80072dc:	ffff83ff 	.word	0xffff83ff
 80072e0:	00000406 	.word	0x00000406
 80072e4:	ffff8f8f 	.word	0xffff8f8f
 80072e8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	1d7a      	adds	r2, r7, #5
 80072f2:	32ff      	adds	r2, #255	; 0xff
 80072f4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2200      	movs	r2, #0
 80072fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	785b      	ldrb	r3, [r3, #1]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d000      	beq.n	8007306 <USB_EPStartXfer+0xe8a>
 8007304:	e075      	b.n	80073f2 <USB_EPStartXfer+0xf76>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	21cc      	movs	r1, #204	; 0xcc
 800730a:	187a      	adds	r2, r7, r1
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2250      	movs	r2, #80	; 0x50
 8007312:	5a9b      	ldrh	r3, [r3, r2]
 8007314:	b29b      	uxth	r3, r3
 8007316:	001a      	movs	r2, r3
 8007318:	187b      	adds	r3, r7, r1
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	189b      	adds	r3, r3, r2
 800731e:	187a      	adds	r2, r7, r1
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	00da      	lsls	r2, r3, #3
 8007328:	187b      	adds	r3, r7, r1
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	18d3      	adds	r3, r2, r3
 800732e:	4aaa      	ldr	r2, [pc, #680]	; (80075d8 <USB_EPStartXfer+0x115c>)
 8007330:	4694      	mov	ip, r2
 8007332:	4463      	add	r3, ip
 8007334:	21c8      	movs	r1, #200	; 0xc8
 8007336:	187a      	adds	r2, r7, r1
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	1d7b      	adds	r3, r7, #5
 800733c:	33ff      	adds	r3, #255	; 0xff
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d114      	bne.n	800736e <USB_EPStartXfer+0xef2>
 8007344:	187b      	adds	r3, r7, r1
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29b      	uxth	r3, r3
 800734c:	4aa3      	ldr	r2, [pc, #652]	; (80075dc <USB_EPStartXfer+0x1160>)
 800734e:	4013      	ands	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	187b      	adds	r3, r7, r1
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	187b      	adds	r3, r7, r1
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	4a9f      	ldr	r2, [pc, #636]	; (80075e0 <USB_EPStartXfer+0x1164>)
 8007362:	4313      	orrs	r3, r2
 8007364:	b29a      	uxth	r2, r3
 8007366:	187b      	adds	r3, r7, r1
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	e066      	b.n	800743c <USB_EPStartXfer+0xfc0>
 800736e:	1d7b      	adds	r3, r7, #5
 8007370:	33ff      	adds	r3, #255	; 0xff
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b3e      	cmp	r3, #62	; 0x3e
 8007376:	d81c      	bhi.n	80073b2 <USB_EPStartXfer+0xf36>
 8007378:	1d7b      	adds	r3, r7, #5
 800737a:	33ff      	adds	r3, #255	; 0xff
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	21dc      	movs	r1, #220	; 0xdc
 8007382:	187a      	adds	r2, r7, r1
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	1d7b      	adds	r3, r7, #5
 8007388:	33ff      	adds	r3, #255	; 0xff
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	4013      	ands	r3, r2
 8007390:	d004      	beq.n	800739c <USB_EPStartXfer+0xf20>
 8007392:	187b      	adds	r3, r7, r1
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3301      	adds	r3, #1
 8007398:	187a      	adds	r2, r7, r1
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	23dc      	movs	r3, #220	; 0xdc
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	029b      	lsls	r3, r3, #10
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	23c8      	movs	r3, #200	; 0xc8
 80073aa:	18fb      	adds	r3, r7, r3
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	e044      	b.n	800743c <USB_EPStartXfer+0xfc0>
 80073b2:	1d7b      	adds	r3, r7, #5
 80073b4:	33ff      	adds	r3, #255	; 0xff
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	21dc      	movs	r1, #220	; 0xdc
 80073bc:	187a      	adds	r2, r7, r1
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	1d7b      	adds	r3, r7, #5
 80073c2:	33ff      	adds	r3, #255	; 0xff
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	221f      	movs	r2, #31
 80073c8:	4013      	ands	r3, r2
 80073ca:	d104      	bne.n	80073d6 <USB_EPStartXfer+0xf5a>
 80073cc:	187b      	adds	r3, r7, r1
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	187a      	adds	r2, r7, r1
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	23dc      	movs	r3, #220	; 0xdc
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	029b      	lsls	r3, r3, #10
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	4a7f      	ldr	r2, [pc, #508]	; (80075e0 <USB_EPStartXfer+0x1164>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	23c8      	movs	r3, #200	; 0xc8
 80073ea:	18fb      	adds	r3, r7, r3
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e024      	b.n	800743c <USB_EPStartXfer+0xfc0>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	785b      	ldrb	r3, [r3, #1]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d120      	bne.n	800743c <USB_EPStartXfer+0xfc0>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	21d4      	movs	r1, #212	; 0xd4
 80073fe:	187a      	adds	r2, r7, r1
 8007400:	6013      	str	r3, [r2, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2250      	movs	r2, #80	; 0x50
 8007406:	5a9b      	ldrh	r3, [r3, r2]
 8007408:	b29b      	uxth	r3, r3
 800740a:	001a      	movs	r2, r3
 800740c:	187b      	adds	r3, r7, r1
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	189b      	adds	r3, r3, r2
 8007412:	187a      	adds	r2, r7, r1
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	00da      	lsls	r2, r3, #3
 800741c:	187b      	adds	r3, r7, r1
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	18d3      	adds	r3, r2, r3
 8007422:	4a6d      	ldr	r2, [pc, #436]	; (80075d8 <USB_EPStartXfer+0x115c>)
 8007424:	4694      	mov	ip, r2
 8007426:	4463      	add	r3, ip
 8007428:	21d0      	movs	r1, #208	; 0xd0
 800742a:	187a      	adds	r2, r7, r1
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	1d7b      	adds	r3, r7, #5
 8007430:	33ff      	adds	r3, #255	; 0xff
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	b29a      	uxth	r2, r3
 8007436:	187b      	adds	r3, r7, r1
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	22c4      	movs	r2, #196	; 0xc4
 8007440:	18ba      	adds	r2, r7, r2
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d000      	beq.n	800744e <USB_EPStartXfer+0xfd2>
 800744c:	e075      	b.n	800753a <USB_EPStartXfer+0x10be>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	21bc      	movs	r1, #188	; 0xbc
 8007452:	187a      	adds	r2, r7, r1
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2250      	movs	r2, #80	; 0x50
 800745a:	5a9b      	ldrh	r3, [r3, r2]
 800745c:	b29b      	uxth	r3, r3
 800745e:	001a      	movs	r2, r3
 8007460:	187b      	adds	r3, r7, r1
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	189b      	adds	r3, r3, r2
 8007466:	187a      	adds	r2, r7, r1
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	00da      	lsls	r2, r3, #3
 8007470:	187b      	adds	r3, r7, r1
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	18d3      	adds	r3, r2, r3
 8007476:	4a5b      	ldr	r2, [pc, #364]	; (80075e4 <USB_EPStartXfer+0x1168>)
 8007478:	4694      	mov	ip, r2
 800747a:	4463      	add	r3, ip
 800747c:	21b8      	movs	r1, #184	; 0xb8
 800747e:	187a      	adds	r2, r7, r1
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	1d7b      	adds	r3, r7, #5
 8007484:	33ff      	adds	r3, #255	; 0xff
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d114      	bne.n	80074b6 <USB_EPStartXfer+0x103a>
 800748c:	187b      	adds	r3, r7, r1
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	881b      	ldrh	r3, [r3, #0]
 8007492:	b29b      	uxth	r3, r3
 8007494:	4a51      	ldr	r2, [pc, #324]	; (80075dc <USB_EPStartXfer+0x1160>)
 8007496:	4013      	ands	r3, r2
 8007498:	b29a      	uxth	r2, r3
 800749a:	187b      	adds	r3, r7, r1
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	187b      	adds	r3, r7, r1
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4a4d      	ldr	r2, [pc, #308]	; (80075e0 <USB_EPStartXfer+0x1164>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	801a      	strh	r2, [r3, #0]
 80074b4:	e066      	b.n	8007584 <USB_EPStartXfer+0x1108>
 80074b6:	1d7b      	adds	r3, r7, #5
 80074b8:	33ff      	adds	r3, #255	; 0xff
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b3e      	cmp	r3, #62	; 0x3e
 80074be:	d81c      	bhi.n	80074fa <USB_EPStartXfer+0x107e>
 80074c0:	1d7b      	adds	r3, r7, #5
 80074c2:	33ff      	adds	r3, #255	; 0xff
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	21d8      	movs	r1, #216	; 0xd8
 80074ca:	187a      	adds	r2, r7, r1
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	1d7b      	adds	r3, r7, #5
 80074d0:	33ff      	adds	r3, #255	; 0xff
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2201      	movs	r2, #1
 80074d6:	4013      	ands	r3, r2
 80074d8:	d004      	beq.n	80074e4 <USB_EPStartXfer+0x1068>
 80074da:	187b      	adds	r3, r7, r1
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3301      	adds	r3, #1
 80074e0:	187a      	adds	r2, r7, r1
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	23d8      	movs	r3, #216	; 0xd8
 80074e6:	18fb      	adds	r3, r7, r3
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	23b8      	movs	r3, #184	; 0xb8
 80074f2:	18fb      	adds	r3, r7, r3
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	801a      	strh	r2, [r3, #0]
 80074f8:	e044      	b.n	8007584 <USB_EPStartXfer+0x1108>
 80074fa:	1d7b      	adds	r3, r7, #5
 80074fc:	33ff      	adds	r3, #255	; 0xff
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	21d8      	movs	r1, #216	; 0xd8
 8007504:	187a      	adds	r2, r7, r1
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	1d7b      	adds	r3, r7, #5
 800750a:	33ff      	adds	r3, #255	; 0xff
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	221f      	movs	r2, #31
 8007510:	4013      	ands	r3, r2
 8007512:	d104      	bne.n	800751e <USB_EPStartXfer+0x10a2>
 8007514:	187b      	adds	r3, r7, r1
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	3b01      	subs	r3, #1
 800751a:	187a      	adds	r2, r7, r1
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	23d8      	movs	r3, #216	; 0xd8
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	029b      	lsls	r3, r3, #10
 8007528:	b29b      	uxth	r3, r3
 800752a:	4a2d      	ldr	r2, [pc, #180]	; (80075e0 <USB_EPStartXfer+0x1164>)
 800752c:	4313      	orrs	r3, r2
 800752e:	b29a      	uxth	r2, r3
 8007530:	23b8      	movs	r3, #184	; 0xb8
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	801a      	strh	r2, [r3, #0]
 8007538:	e024      	b.n	8007584 <USB_EPStartXfer+0x1108>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d120      	bne.n	8007584 <USB_EPStartXfer+0x1108>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2250      	movs	r2, #80	; 0x50
 8007546:	5a9b      	ldrh	r3, [r3, r2]
 8007548:	b29b      	uxth	r3, r3
 800754a:	001a      	movs	r2, r3
 800754c:	21c4      	movs	r1, #196	; 0xc4
 800754e:	187b      	adds	r3, r7, r1
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	189b      	adds	r3, r3, r2
 8007554:	187a      	adds	r2, r7, r1
 8007556:	6013      	str	r3, [r2, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	00da      	lsls	r2, r3, #3
 800755e:	187b      	adds	r3, r7, r1
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	18d3      	adds	r3, r2, r3
 8007564:	4a1f      	ldr	r2, [pc, #124]	; (80075e4 <USB_EPStartXfer+0x1168>)
 8007566:	4694      	mov	ip, r2
 8007568:	4463      	add	r3, ip
 800756a:	21c0      	movs	r1, #192	; 0xc0
 800756c:	187a      	adds	r2, r7, r1
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	1d7b      	adds	r3, r7, #5
 8007572:	33ff      	adds	r3, #255	; 0xff
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	b29a      	uxth	r2, r3
 8007578:	187b      	adds	r3, r7, r1
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e001      	b.n	8007584 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e025      	b.n	80075d0 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	18d3      	adds	r3, r2, r3
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	b29a      	uxth	r2, r3
 8007592:	208a      	movs	r0, #138	; 0x8a
 8007594:	183b      	adds	r3, r7, r0
 8007596:	4914      	ldr	r1, [pc, #80]	; (80075e8 <USB_EPStartXfer+0x116c>)
 8007598:	400a      	ands	r2, r1
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	183b      	adds	r3, r7, r0
 800759e:	183a      	adds	r2, r7, r0
 80075a0:	8812      	ldrh	r2, [r2, #0]
 80075a2:	2180      	movs	r1, #128	; 0x80
 80075a4:	0149      	lsls	r1, r1, #5
 80075a6:	404a      	eors	r2, r1
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	183b      	adds	r3, r7, r0
 80075ac:	183a      	adds	r2, r7, r0
 80075ae:	8812      	ldrh	r2, [r2, #0]
 80075b0:	2180      	movs	r1, #128	; 0x80
 80075b2:	0189      	lsls	r1, r1, #6
 80075b4:	404a      	eors	r2, r1
 80075b6:	801a      	strh	r2, [r3, #0]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	18d3      	adds	r3, r2, r3
 80075c2:	183a      	adds	r2, r7, r0
 80075c4:	8812      	ldrh	r2, [r2, #0]
 80075c6:	4909      	ldr	r1, [pc, #36]	; (80075ec <USB_EPStartXfer+0x1170>)
 80075c8:	430a      	orrs	r2, r1
 80075ca:	b292      	uxth	r2, r2
 80075cc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	0018      	movs	r0, r3
 80075d2:	46bd      	mov	sp, r7
 80075d4:	b043      	add	sp, #268	; 0x10c
 80075d6:	bd90      	pop	{r4, r7, pc}
 80075d8:	00000402 	.word	0x00000402
 80075dc:	ffff83ff 	.word	0xffff83ff
 80075e0:	ffff8000 	.word	0xffff8000
 80075e4:	00000406 	.word	0x00000406
 80075e8:	ffffbf8f 	.word	0xffffbf8f
 80075ec:	ffff8080 	.word	0xffff8080

080075f0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	785b      	ldrb	r3, [r3, #1]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d01d      	beq.n	800763e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	18d3      	adds	r3, r2, r3
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29a      	uxth	r2, r3
 8007610:	200c      	movs	r0, #12
 8007612:	183b      	adds	r3, r7, r0
 8007614:	491b      	ldr	r1, [pc, #108]	; (8007684 <USB_EPSetStall+0x94>)
 8007616:	400a      	ands	r2, r1
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	183b      	adds	r3, r7, r0
 800761c:	183a      	adds	r2, r7, r0
 800761e:	8812      	ldrh	r2, [r2, #0]
 8007620:	2110      	movs	r1, #16
 8007622:	404a      	eors	r2, r1
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	18d3      	adds	r3, r2, r3
 8007630:	183a      	adds	r2, r7, r0
 8007632:	8812      	ldrh	r2, [r2, #0]
 8007634:	4914      	ldr	r1, [pc, #80]	; (8007688 <USB_EPSetStall+0x98>)
 8007636:	430a      	orrs	r2, r1
 8007638:	b292      	uxth	r2, r2
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	e01d      	b.n	800767a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	18d3      	adds	r3, r2, r3
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29a      	uxth	r2, r3
 800764c:	200e      	movs	r0, #14
 800764e:	183b      	adds	r3, r7, r0
 8007650:	490e      	ldr	r1, [pc, #56]	; (800768c <USB_EPSetStall+0x9c>)
 8007652:	400a      	ands	r2, r1
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	183b      	adds	r3, r7, r0
 8007658:	183a      	adds	r2, r7, r0
 800765a:	8812      	ldrh	r2, [r2, #0]
 800765c:	2180      	movs	r1, #128	; 0x80
 800765e:	0149      	lsls	r1, r1, #5
 8007660:	404a      	eors	r2, r1
 8007662:	801a      	strh	r2, [r3, #0]
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	18d3      	adds	r3, r2, r3
 800766e:	183a      	adds	r2, r7, r0
 8007670:	8812      	ldrh	r2, [r2, #0]
 8007672:	4905      	ldr	r1, [pc, #20]	; (8007688 <USB_EPSetStall+0x98>)
 8007674:	430a      	orrs	r2, r1
 8007676:	b292      	uxth	r2, r2
 8007678:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	0018      	movs	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	b004      	add	sp, #16
 8007682:	bd80      	pop	{r7, pc}
 8007684:	ffff8fbf 	.word	0xffff8fbf
 8007688:	ffff8080 	.word	0xffff8080
 800768c:	ffffbf8f 	.word	0xffffbf8f

08007690 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	7b1b      	ldrb	r3, [r3, #12]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d000      	beq.n	80076a4 <USB_EPClearStall+0x14>
 80076a2:	e095      	b.n	80077d0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d046      	beq.n	800773a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	18d2      	adds	r2, r2, r3
 80076b6:	2110      	movs	r1, #16
 80076b8:	187b      	adds	r3, r7, r1
 80076ba:	8812      	ldrh	r2, [r2, #0]
 80076bc:	801a      	strh	r2, [r3, #0]
 80076be:	187b      	adds	r3, r7, r1
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	2240      	movs	r2, #64	; 0x40
 80076c4:	4013      	ands	r3, r2
 80076c6:	d016      	beq.n	80076f6 <USB_EPClearStall+0x66>
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	18d3      	adds	r3, r2, r3
 80076d2:	881b      	ldrh	r3, [r3, #0]
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	200e      	movs	r0, #14
 80076d8:	183b      	adds	r3, r7, r0
 80076da:	4940      	ldr	r1, [pc, #256]	; (80077dc <USB_EPClearStall+0x14c>)
 80076dc:	400a      	ands	r2, r1
 80076de:	801a      	strh	r2, [r3, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	18d3      	adds	r3, r2, r3
 80076ea:	183a      	adds	r2, r7, r0
 80076ec:	8812      	ldrh	r2, [r2, #0]
 80076ee:	493c      	ldr	r1, [pc, #240]	; (80077e0 <USB_EPClearStall+0x150>)
 80076f0:	430a      	orrs	r2, r1
 80076f2:	b292      	uxth	r2, r2
 80076f4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d068      	beq.n	80077d0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	18d3      	adds	r3, r2, r3
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29a      	uxth	r2, r3
 800770c:	200c      	movs	r0, #12
 800770e:	183b      	adds	r3, r7, r0
 8007710:	4934      	ldr	r1, [pc, #208]	; (80077e4 <USB_EPClearStall+0x154>)
 8007712:	400a      	ands	r2, r1
 8007714:	801a      	strh	r2, [r3, #0]
 8007716:	183b      	adds	r3, r7, r0
 8007718:	183a      	adds	r2, r7, r0
 800771a:	8812      	ldrh	r2, [r2, #0]
 800771c:	2120      	movs	r1, #32
 800771e:	404a      	eors	r2, r1
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	18d3      	adds	r3, r2, r3
 800772c:	183a      	adds	r2, r7, r0
 800772e:	8812      	ldrh	r2, [r2, #0]
 8007730:	492d      	ldr	r1, [pc, #180]	; (80077e8 <USB_EPClearStall+0x158>)
 8007732:	430a      	orrs	r2, r1
 8007734:	b292      	uxth	r2, r2
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	e04a      	b.n	80077d0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	18d2      	adds	r2, r2, r3
 8007744:	2116      	movs	r1, #22
 8007746:	187b      	adds	r3, r7, r1
 8007748:	8812      	ldrh	r2, [r2, #0]
 800774a:	801a      	strh	r2, [r3, #0]
 800774c:	187b      	adds	r3, r7, r1
 800774e:	881a      	ldrh	r2, [r3, #0]
 8007750:	2380      	movs	r3, #128	; 0x80
 8007752:	01db      	lsls	r3, r3, #7
 8007754:	4013      	ands	r3, r2
 8007756:	d016      	beq.n	8007786 <USB_EPClearStall+0xf6>
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	18d3      	adds	r3, r2, r3
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29a      	uxth	r2, r3
 8007766:	2014      	movs	r0, #20
 8007768:	183b      	adds	r3, r7, r0
 800776a:	491c      	ldr	r1, [pc, #112]	; (80077dc <USB_EPClearStall+0x14c>)
 800776c:	400a      	ands	r2, r1
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	18d3      	adds	r3, r2, r3
 800777a:	183a      	adds	r2, r7, r0
 800777c:	8812      	ldrh	r2, [r2, #0]
 800777e:	491b      	ldr	r1, [pc, #108]	; (80077ec <USB_EPClearStall+0x15c>)
 8007780:	430a      	orrs	r2, r1
 8007782:	b292      	uxth	r2, r2
 8007784:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	18d3      	adds	r3, r2, r3
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	b29a      	uxth	r2, r3
 8007794:	2012      	movs	r0, #18
 8007796:	183b      	adds	r3, r7, r0
 8007798:	4915      	ldr	r1, [pc, #84]	; (80077f0 <USB_EPClearStall+0x160>)
 800779a:	400a      	ands	r2, r1
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	183b      	adds	r3, r7, r0
 80077a0:	183a      	adds	r2, r7, r0
 80077a2:	8812      	ldrh	r2, [r2, #0]
 80077a4:	2180      	movs	r1, #128	; 0x80
 80077a6:	0149      	lsls	r1, r1, #5
 80077a8:	404a      	eors	r2, r1
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	183b      	adds	r3, r7, r0
 80077ae:	183a      	adds	r2, r7, r0
 80077b0:	8812      	ldrh	r2, [r2, #0]
 80077b2:	2180      	movs	r1, #128	; 0x80
 80077b4:	0189      	lsls	r1, r1, #6
 80077b6:	404a      	eors	r2, r1
 80077b8:	801a      	strh	r2, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	18d3      	adds	r3, r2, r3
 80077c4:	183a      	adds	r2, r7, r0
 80077c6:	8812      	ldrh	r2, [r2, #0]
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <USB_EPClearStall+0x158>)
 80077ca:	430a      	orrs	r2, r1
 80077cc:	b292      	uxth	r2, r2
 80077ce:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	0018      	movs	r0, r3
 80077d4:	46bd      	mov	sp, r7
 80077d6:	b006      	add	sp, #24
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	ffff8f8f 	.word	0xffff8f8f
 80077e0:	ffff80c0 	.word	0xffff80c0
 80077e4:	ffff8fbf 	.word	0xffff8fbf
 80077e8:	ffff8080 	.word	0xffff8080
 80077ec:	ffffc080 	.word	0xffffc080
 80077f0:	ffffbf8f 	.word	0xffffbf8f

080077f4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	000a      	movs	r2, r1
 80077fe:	1cfb      	adds	r3, r7, #3
 8007800:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007802:	1cfb      	adds	r3, r7, #3
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	224c      	movs	r2, #76	; 0x4c
 800780e:	2180      	movs	r1, #128	; 0x80
 8007810:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b002      	add	sp, #8
 800781a:	bd80      	pop	{r7, pc}

0800781c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2258      	movs	r2, #88	; 0x58
 8007828:	5a9b      	ldrh	r3, [r3, r2]
 800782a:	b29b      	uxth	r3, r3
 800782c:	4a05      	ldr	r2, [pc, #20]	; (8007844 <USB_DevConnect+0x28>)
 800782e:	4313      	orrs	r3, r2
 8007830:	b299      	uxth	r1, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2258      	movs	r2, #88	; 0x58
 8007836:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	0018      	movs	r0, r3
 800783c:	46bd      	mov	sp, r7
 800783e:	b002      	add	sp, #8
 8007840:	bd80      	pop	{r7, pc}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	ffff8000 	.word	0xffff8000

08007848 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2244      	movs	r2, #68	; 0x44
 8007854:	5a9b      	ldrh	r3, [r3, r2]
 8007856:	b29b      	uxth	r3, r3
 8007858:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	0018      	movs	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	b004      	add	sp, #16
 8007862:	bd80      	pop	{r7, pc}

08007864 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08c      	sub	sp, #48	; 0x30
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	0019      	movs	r1, r3
 8007870:	1dbb      	adds	r3, r7, #6
 8007872:	801a      	strh	r2, [r3, #0]
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	1c0a      	adds	r2, r1, #0
 8007878:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800787a:	1d3b      	adds	r3, r7, #4
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800788c:	1dbb      	adds	r3, r7, #6
 800788e:	881a      	ldrh	r2, [r3, #0]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	2280      	movs	r2, #128	; 0x80
 8007896:	00d2      	lsls	r2, r2, #3
 8007898:	4694      	mov	ip, r2
 800789a:	4463      	add	r3, ip
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078a2:	e01b      	b.n	80078dc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	3301      	adds	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	001a      	movs	r2, r3
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	3302      	adds	r3, #2
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	3301      	adds	r3, #1
 80078d4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	3b01      	subs	r3, #1
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e0      	bne.n	80078a4 <USB_WritePMA+0x40>
  }
}
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b00c      	add	sp, #48	; 0x30
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	; 0x28
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	0019      	movs	r1, r3
 80078f8:	1dbb      	adds	r3, r7, #6
 80078fa:	801a      	strh	r2, [r3, #0]
 80078fc:	1d3b      	adds	r3, r7, #4
 80078fe:	1c0a      	adds	r2, r1, #0
 8007900:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007902:	1d3b      	adds	r3, r7, #4
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	085b      	lsrs	r3, r3, #1
 8007908:	b29b      	uxth	r3, r3
 800790a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007914:	1dbb      	adds	r3, r7, #6
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	18d3      	adds	r3, r2, r3
 800791c:	2280      	movs	r2, #128	; 0x80
 800791e:	00d2      	lsls	r2, r2, #3
 8007920:	4694      	mov	ip, r2
 8007922:	4463      	add	r3, ip
 8007924:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
 800792a:	e018      	b.n	800795e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	881b      	ldrh	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	3302      	adds	r3, #2
 8007938:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	b2da      	uxtb	r2, r3
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	b2da      	uxtb	r2, r3
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	3301      	adds	r3, #1
 8007956:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	3b01      	subs	r3, #1
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
 800795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e3      	bne.n	800792c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007964:	1d3b      	adds	r3, r7, #4
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	2201      	movs	r2, #1
 800796a:	4013      	ands	r3, r2
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d007      	beq.n	8007982 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	b2da      	uxtb	r2, r3
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	701a      	strb	r2, [r3, #0]
  }
}
 8007982:	46c0      	nop			; (mov r8, r8)
 8007984:	46bd      	mov	sp, r7
 8007986:	b00a      	add	sp, #40	; 0x28
 8007988:	bd80      	pop	{r7, pc}

0800798a <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	000a      	movs	r2, r1
 8007994:	1cfb      	adds	r3, r7, #3
 8007996:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	2304      	movs	r3, #4
 800799c:	2203      	movs	r2, #3
 800799e:	2181      	movs	r1, #129	; 0x81
 80079a0:	f001 fe3b 	bl	800961a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80079aa:	2010      	movs	r0, #16
 80079ac:	f001 ffb8 	bl	8009920 <USBD_static_malloc>
 80079b0:	0001      	movs	r1, r0
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	23ae      	movs	r3, #174	; 0xae
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	23ae      	movs	r3, #174	; 0xae
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	58d3      	ldr	r3, [r2, r3]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80079c6:	2302      	movs	r3, #2
 80079c8:	e006      	b.n	80079d8 <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	23ae      	movs	r3, #174	; 0xae
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	58d3      	ldr	r3, [r2, r3]
 80079d2:	2200      	movs	r2, #0
 80079d4:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b002      	add	sp, #8
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	000a      	movs	r2, r1
 80079ea:	1cfb      	adds	r3, r7, #3
 80079ec:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2181      	movs	r1, #129	; 0x81
 80079f2:	0018      	movs	r0, r3
 80079f4:	f001 fe48 	bl	8009688 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	23ae      	movs	r3, #174	; 0xae
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	58d3      	ldr	r3, [r2, r3]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	23ae      	movs	r3, #174	; 0xae
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	58d3      	ldr	r3, [r2, r3]
 8007a12:	0018      	movs	r0, r3
 8007a14:	f001 ff90 	bl	8009938 <USBD_static_free>
    pdev->pClassData = NULL;
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	23ae      	movs	r3, #174	; 0xae
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	2100      	movs	r1, #0
 8007a20:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	0018      	movs	r0, r3
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b002      	add	sp, #8
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	23ae      	movs	r3, #174	; 0xae
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	58d3      	ldr	r3, [r2, r3]
 8007a3e:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007a40:	231e      	movs	r3, #30
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	2200      	movs	r2, #0
 8007a46:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007a4c:	230e      	movs	r3, #14
 8007a4e:	18fb      	adds	r3, r7, r3
 8007a50:	2200      	movs	r2, #0
 8007a52:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a54:	2317      	movs	r3, #23
 8007a56:	18fb      	adds	r3, r7, r3
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	001a      	movs	r2, r3
 8007a62:	2360      	movs	r3, #96	; 0x60
 8007a64:	4013      	ands	r3, r2
 8007a66:	d03a      	beq.n	8007ade <USBD_HID_Setup+0xb2>
 8007a68:	2b20      	cmp	r3, #32
 8007a6a:	d000      	beq.n	8007a6e <USBD_HID_Setup+0x42>
 8007a6c:	e0d6      	b.n	8007c1c <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	785b      	ldrb	r3, [r3, #1]
 8007a72:	2b0b      	cmp	r3, #11
 8007a74:	d008      	beq.n	8007a88 <USBD_HID_Setup+0x5c>
 8007a76:	dc26      	bgt.n	8007ac6 <USBD_HID_Setup+0x9a>
 8007a78:	2b0a      	cmp	r3, #10
 8007a7a:	d013      	beq.n	8007aa4 <USBD_HID_Setup+0x78>
 8007a7c:	dc23      	bgt.n	8007ac6 <USBD_HID_Setup+0x9a>
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d019      	beq.n	8007ab6 <USBD_HID_Setup+0x8a>
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d007      	beq.n	8007a96 <USBD_HID_Setup+0x6a>
 8007a86:	e01e      	b.n	8007ac6 <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	885b      	ldrh	r3, [r3, #2]
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	001a      	movs	r2, r3
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	601a      	str	r2, [r3, #0]
          break;
 8007a94:	e022      	b.n	8007adc <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007a96:	6939      	ldr	r1, [r7, #16]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	0018      	movs	r0, r3
 8007a9e:	f001 fa99 	bl	8008fd4 <USBD_CtlSendData>
          break;
 8007aa2:	e01b      	b.n	8007adc <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	885b      	ldrh	r3, [r3, #2]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	001a      	movs	r2, r3
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	605a      	str	r2, [r3, #4]
          break;
 8007ab4:	e012      	b.n	8007adc <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1d19      	adds	r1, r3, #4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f001 fa88 	bl	8008fd4 <USBD_CtlSendData>
          break;
 8007ac4:	e00a      	b.n	8007adc <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	0011      	movs	r1, r2
 8007acc:	0018      	movs	r0, r3
 8007ace:	f001 fa03 	bl	8008ed8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ad2:	2317      	movs	r3, #23
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	701a      	strb	r2, [r3, #0]
          break;
 8007ada:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007adc:	e0a9      	b.n	8007c32 <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b0b      	cmp	r3, #11
 8007ae4:	d100      	bne.n	8007ae8 <USBD_HID_Setup+0xbc>
 8007ae6:	e075      	b.n	8007bd4 <USBD_HID_Setup+0x1a8>
 8007ae8:	dd00      	ble.n	8007aec <USBD_HID_Setup+0xc0>
 8007aea:	e08b      	b.n	8007c04 <USBD_HID_Setup+0x1d8>
 8007aec:	2b0a      	cmp	r3, #10
 8007aee:	d057      	beq.n	8007ba0 <USBD_HID_Setup+0x174>
 8007af0:	dd00      	ble.n	8007af4 <USBD_HID_Setup+0xc8>
 8007af2:	e087      	b.n	8007c04 <USBD_HID_Setup+0x1d8>
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <USBD_HID_Setup+0xd2>
 8007af8:	2b06      	cmp	r3, #6
 8007afa:	d019      	beq.n	8007b30 <USBD_HID_Setup+0x104>
 8007afc:	e082      	b.n	8007c04 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	23a7      	movs	r3, #167	; 0xa7
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	5cd3      	ldrb	r3, [r2, r3]
 8007b06:	2b03      	cmp	r3, #3
 8007b08:	d107      	bne.n	8007b1a <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007b0a:	230e      	movs	r3, #14
 8007b0c:	18f9      	adds	r1, r7, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2202      	movs	r2, #2
 8007b12:	0018      	movs	r0, r3
 8007b14:	f001 fa5e 	bl	8008fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b18:	e07f      	b.n	8007c1a <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	0011      	movs	r1, r2
 8007b20:	0018      	movs	r0, r3
 8007b22:	f001 f9d9 	bl	8008ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b26:	2317      	movs	r3, #23
 8007b28:	18fb      	adds	r3, r7, r3
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	701a      	strb	r2, [r3, #0]
          break;
 8007b2e:	e074      	b.n	8007c1a <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	885b      	ldrh	r3, [r3, #2]
 8007b34:	0a1b      	lsrs	r3, r3, #8
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	2b22      	cmp	r3, #34	; 0x22
 8007b3a:	d10b      	bne.n	8007b54 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	88db      	ldrh	r3, [r3, #6]
 8007b40:	221e      	movs	r2, #30
 8007b42:	18ba      	adds	r2, r7, r2
 8007b44:	b299      	uxth	r1, r3
 8007b46:	294a      	cmp	r1, #74	; 0x4a
 8007b48:	d900      	bls.n	8007b4c <USBD_HID_Setup+0x120>
 8007b4a:	234a      	movs	r3, #74	; 0x4a
 8007b4c:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8007b4e:	4b3c      	ldr	r3, [pc, #240]	; (8007c40 <USBD_HID_Setup+0x214>)
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e01c      	b.n	8007b8e <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	0a1b      	lsrs	r3, r3, #8
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b21      	cmp	r3, #33	; 0x21
 8007b5e:	d10b      	bne.n	8007b78 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8007b60:	4b38      	ldr	r3, [pc, #224]	; (8007c44 <USBD_HID_Setup+0x218>)
 8007b62:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	88db      	ldrh	r3, [r3, #6]
 8007b68:	221e      	movs	r2, #30
 8007b6a:	18ba      	adds	r2, r7, r2
 8007b6c:	b299      	uxth	r1, r3
 8007b6e:	2909      	cmp	r1, #9
 8007b70:	d900      	bls.n	8007b74 <USBD_HID_Setup+0x148>
 8007b72:	2309      	movs	r3, #9
 8007b74:	8013      	strh	r3, [r2, #0]
 8007b76:	e00a      	b.n	8007b8e <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	0011      	movs	r1, r2
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f001 f9aa 	bl	8008ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b84:	2317      	movs	r3, #23
 8007b86:	18fb      	adds	r3, r7, r3
 8007b88:	2202      	movs	r2, #2
 8007b8a:	701a      	strb	r2, [r3, #0]
            break;
 8007b8c:	e045      	b.n	8007c1a <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007b8e:	231e      	movs	r3, #30
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	881a      	ldrh	r2, [r3, #0]
 8007b94:	69b9      	ldr	r1, [r7, #24]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f001 fa1b 	bl	8008fd4 <USBD_CtlSendData>
          break;
 8007b9e:	e03c      	b.n	8007c1a <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	23a7      	movs	r3, #167	; 0xa7
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	5cd3      	ldrb	r3, [r2, r3]
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d108      	bne.n	8007bbe <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	0019      	movs	r1, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f001 fa0c 	bl	8008fd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bbc:	e02d      	b.n	8007c1a <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	0011      	movs	r1, r2
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	f001 f987 	bl	8008ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bca:	2317      	movs	r3, #23
 8007bcc:	18fb      	adds	r3, r7, r3
 8007bce:	2202      	movs	r2, #2
 8007bd0:	701a      	strb	r2, [r3, #0]
          break;
 8007bd2:	e022      	b.n	8007c1a <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	23a7      	movs	r3, #167	; 0xa7
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	5cd3      	ldrb	r3, [r2, r3]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d106      	bne.n	8007bee <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	885b      	ldrh	r3, [r3, #2]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	001a      	movs	r2, r3
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bec:	e015      	b.n	8007c1a <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	0011      	movs	r1, r2
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f001 f96f 	bl	8008ed8 <USBD_CtlError>
            ret = USBD_FAIL;
 8007bfa:	2317      	movs	r3, #23
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	2202      	movs	r2, #2
 8007c00:	701a      	strb	r2, [r3, #0]
          break;
 8007c02:	e00a      	b.n	8007c1a <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	0011      	movs	r1, r2
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f001 f964 	bl	8008ed8 <USBD_CtlError>
          ret = USBD_FAIL;
 8007c10:	2317      	movs	r3, #23
 8007c12:	18fb      	adds	r3, r7, r3
 8007c14:	2202      	movs	r2, #2
 8007c16:	701a      	strb	r2, [r3, #0]
          break;
 8007c18:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007c1a:	e00a      	b.n	8007c32 <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8007c1c:	683a      	ldr	r2, [r7, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	0011      	movs	r1, r2
 8007c22:	0018      	movs	r0, r3
 8007c24:	f001 f958 	bl	8008ed8 <USBD_CtlError>
      ret = USBD_FAIL;
 8007c28:	2317      	movs	r3, #23
 8007c2a:	18fb      	adds	r3, r7, r3
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	701a      	strb	r2, [r3, #0]
      break;
 8007c30:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007c32:	2317      	movs	r3, #23
 8007c34:	18fb      	adds	r3, r7, r3
 8007c36:	781b      	ldrb	r3, [r3, #0]
}
 8007c38:	0018      	movs	r0, r3
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b008      	add	sp, #32
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200000c8 	.word	0x200000c8
 8007c44:	200000b0 	.word	0x200000b0

08007c48 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2222      	movs	r2, #34	; 0x22
 8007c54:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007c56:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8007c58:	0018      	movs	r0, r3
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b002      	add	sp, #8
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000044 	.word	0x20000044

08007c64 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2222      	movs	r2, #34	; 0x22
 8007c70:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007c72:	4b02      	ldr	r3, [pc, #8]	; (8007c7c <USBD_HID_GetHSCfgDesc+0x18>)
}
 8007c74:	0018      	movs	r0, r3
 8007c76:	46bd      	mov	sp, r7
 8007c78:	b002      	add	sp, #8
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	20000068 	.word	0x20000068

08007c80 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2222      	movs	r2, #34	; 0x22
 8007c8c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007c8e:	4b02      	ldr	r3, [pc, #8]	; (8007c98 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007c90:	0018      	movs	r0, r3
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b002      	add	sp, #8
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	2000008c 	.word	0x2000008c

08007c9c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	000a      	movs	r2, r1
 8007ca6:	1cfb      	adds	r3, r7, #3
 8007ca8:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	23ae      	movs	r3, #174	; 0xae
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	58d3      	ldr	r3, [r2, r3]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	0018      	movs	r0, r3
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	220a      	movs	r2, #10
 8007ccc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007cce:	4b02      	ldr	r3, [pc, #8]	; (8007cd8 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	200000bc 	.word	0x200000bc

08007cdc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	1dfb      	adds	r3, r7, #7
 8007ce8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e020      	b.n	8007d36 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	23ad      	movs	r3, #173	; 0xad
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	58d3      	ldr	r3, [r2, r3]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	23ad      	movs	r3, #173	; 0xad
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	2100      	movs	r1, #0
 8007d08:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	23ac      	movs	r3, #172	; 0xac
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	68b9      	ldr	r1, [r7, #8]
 8007d18:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	23a7      	movs	r3, #167	; 0xa7
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	2101      	movs	r1, #1
 8007d22:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	1dfa      	adds	r2, r7, #7
 8007d28:	7812      	ldrb	r2, [r2, #0]
 8007d2a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f001 fbfe 	bl	8009530 <USBD_LL_Init>

  return USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	0018      	movs	r0, r3
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	b004      	add	sp, #16
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007d48:	200f      	movs	r0, #15
 8007d4a:	183b      	adds	r3, r7, r0
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	23ad      	movs	r3, #173	; 0xad
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007d60:	183b      	adds	r3, r7, r0
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e003      	b.n	8007d70 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007d68:	230f      	movs	r3, #15
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007d70:	230f      	movs	r3, #15
 8007d72:	18fb      	adds	r3, r7, r3
 8007d74:	781b      	ldrb	r3, [r3, #0]
}
 8007d76:	0018      	movs	r0, r3
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b004      	add	sp, #16
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f001 fc21 	bl	80095d0 <USBD_LL_Start>

  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	0018      	movs	r0, r3
 8007d92:	46bd      	mov	sp, r7
 8007d94:	b002      	add	sp, #8
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	0018      	movs	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b002      	add	sp, #8
 8007da8:	bd80      	pop	{r7, pc}

08007daa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007daa:	b590      	push	{r4, r7, lr}
 8007dac:	b085      	sub	sp, #20
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	000a      	movs	r2, r1
 8007db4:	1cfb      	adds	r3, r7, #3
 8007db6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007db8:	240f      	movs	r4, #15
 8007dba:	193b      	adds	r3, r7, r4
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	23ad      	movs	r3, #173	; 0xad
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	58d3      	ldr	r3, [r2, r3]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00e      	beq.n	8007dea <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	23ad      	movs	r3, #173	; 0xad
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	58d3      	ldr	r3, [r2, r3]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1cfa      	adds	r2, r7, #3
 8007dd8:	7811      	ldrb	r1, [r2, #0]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	0010      	movs	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	1e03      	subs	r3, r0, #0
 8007de2:	d102      	bne.n	8007dea <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007de4:	193b      	adds	r3, r7, r4
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007dea:	230f      	movs	r3, #15
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	781b      	ldrb	r3, [r3, #0]
}
 8007df0:	0018      	movs	r0, r3
 8007df2:	46bd      	mov	sp, r7
 8007df4:	b005      	add	sp, #20
 8007df6:	bd90      	pop	{r4, r7, pc}

08007df8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	000a      	movs	r2, r1
 8007e02:	1cfb      	adds	r3, r7, #3
 8007e04:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	23ad      	movs	r3, #173	; 0xad
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	58d3      	ldr	r3, [r2, r3]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	1cfa      	adds	r2, r7, #3
 8007e12:	7811      	ldrb	r1, [r2, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	0010      	movs	r0, r2
 8007e18:	4798      	blx	r3

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	0018      	movs	r0, r3
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b002      	add	sp, #8
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	22aa      	movs	r2, #170	; 0xaa
 8007e32:	0092      	lsls	r2, r2, #2
 8007e34:	4694      	mov	ip, r2
 8007e36:	4463      	add	r3, ip
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	0011      	movs	r1, r2
 8007e3c:	0018      	movs	r0, r3
 8007e3e:	f001 f810 	bl	8008e62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	23a5      	movs	r3, #165	; 0xa5
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	2101      	movs	r1, #1
 8007e4a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a23      	ldr	r2, [pc, #140]	; (8007edc <USBD_LL_SetupStage+0xb8>)
 8007e50:	5a9b      	ldrh	r3, [r3, r2]
 8007e52:	0019      	movs	r1, r3
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	23a6      	movs	r3, #166	; 0xa6
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	23aa      	movs	r3, #170	; 0xaa
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	5cd3      	ldrb	r3, [r2, r3]
 8007e64:	001a      	movs	r2, r3
 8007e66:	231f      	movs	r3, #31
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d019      	beq.n	8007ea2 <USBD_LL_SetupStage+0x7e>
 8007e6e:	d822      	bhi.n	8007eb6 <USBD_LL_SetupStage+0x92>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <USBD_LL_SetupStage+0x56>
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d00a      	beq.n	8007e8e <USBD_LL_SetupStage+0x6a>
 8007e78:	e01d      	b.n	8007eb6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	22aa      	movs	r2, #170	; 0xaa
 8007e7e:	0092      	lsls	r2, r2, #2
 8007e80:	189a      	adds	r2, r3, r2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	0011      	movs	r1, r2
 8007e86:	0018      	movs	r0, r3
 8007e88:	f000 fa10 	bl	80082ac <USBD_StdDevReq>
      break;
 8007e8c:	e020      	b.n	8007ed0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	22aa      	movs	r2, #170	; 0xaa
 8007e92:	0092      	lsls	r2, r2, #2
 8007e94:	189a      	adds	r2, r3, r2
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	0011      	movs	r1, r2
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f000 fa78 	bl	8008390 <USBD_StdItfReq>
      break;
 8007ea0:	e016      	b.n	8007ed0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	22aa      	movs	r2, #170	; 0xaa
 8007ea6:	0092      	lsls	r2, r2, #2
 8007ea8:	189a      	adds	r2, r3, r2
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	0011      	movs	r1, r2
 8007eae:	0018      	movs	r0, r3
 8007eb0:	f000 fac5 	bl	800843e <USBD_StdEPReq>
      break;
 8007eb4:	e00c      	b.n	8007ed0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	23aa      	movs	r3, #170	; 0xaa
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	5cd3      	ldrb	r3, [r2, r3]
 8007ebe:	227f      	movs	r2, #127	; 0x7f
 8007ec0:	4393      	bics	r3, r2
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	0011      	movs	r1, r2
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f001 fc08 	bl	80096de <USBD_LL_StallEP>
      break;
 8007ece:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	0018      	movs	r0, r3
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	b002      	add	sp, #8
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	000002ae 	.word	0x000002ae

08007ee0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	200b      	movs	r0, #11
 8007eec:	183b      	adds	r3, r7, r0
 8007eee:	1c0a      	adds	r2, r1, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d154      	bne.n	8007fa4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3355      	adds	r3, #85	; 0x55
 8007efe:	33ff      	adds	r3, #255	; 0xff
 8007f00:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	23a5      	movs	r3, #165	; 0xa5
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	58d3      	ldr	r3, [r2, r3]
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d139      	bne.n	8007f82 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d919      	bls.n	8007f4e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	1ad2      	subs	r2, r2, r3
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d203      	bcs.n	8007f3c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	e002      	b.n	8007f42 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	001a      	movs	r2, r3
 8007f48:	f001 f877 	bl	800903a <USBD_CtlContinueRx>
 8007f4c:	e045      	b.n	8007fda <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	23ad      	movs	r3, #173	; 0xad
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	58d3      	ldr	r3, [r2, r3]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	23a7      	movs	r3, #167	; 0xa7
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d107      	bne.n	8007f78 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	23ad      	movs	r3, #173	; 0xad
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	58d3      	ldr	r3, [r2, r3]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	0010      	movs	r0, r2
 8007f76:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f001 f870 	bl	8009060 <USBD_CtlSendStatus>
 8007f80:	e02b      	b.n	8007fda <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	23a5      	movs	r3, #165	; 0xa5
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	58d3      	ldr	r3, [r2, r3]
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d125      	bne.n	8007fda <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	23a5      	movs	r3, #165	; 0xa5
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	2100      	movs	r1, #0
 8007f96:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f001 fb9e 	bl	80096de <USBD_LL_StallEP>
 8007fa2:	e01a      	b.n	8007fda <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	23ad      	movs	r3, #173	; 0xad
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	58d3      	ldr	r3, [r2, r3]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d011      	beq.n	8007fd6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	23a7      	movs	r3, #167	; 0xa7
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d10b      	bne.n	8007fd6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	23ad      	movs	r3, #173	; 0xad
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	58d3      	ldr	r3, [r2, r3]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	220b      	movs	r2, #11
 8007fca:	18ba      	adds	r2, r7, r2
 8007fcc:	7811      	ldrb	r1, [r2, #0]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	0010      	movs	r0, r2
 8007fd2:	4798      	blx	r3
 8007fd4:	e001      	b.n	8007fda <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	e000      	b.n	8007fdc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	0018      	movs	r0, r3
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b006      	add	sp, #24
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	200b      	movs	r0, #11
 8007ff0:	183b      	adds	r3, r7, r0
 8007ff2:	1c0a      	adds	r2, r1, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ff6:	183b      	adds	r3, r7, r0
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d000      	beq.n	8008000 <USBD_LL_DataInStage+0x1c>
 8007ffe:	e08e      	b.n	800811e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	3314      	adds	r3, #20
 8008004:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	23a5      	movs	r3, #165	; 0xa5
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	58d3      	ldr	r3, [r2, r3]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d164      	bne.n	80080dc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	429a      	cmp	r2, r3
 800801c:	d915      	bls.n	800804a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	1ad2      	subs	r2, r2, r3
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	b29a      	uxth	r2, r3
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0018      	movs	r0, r3
 8008038:	f000 ffec 	bl	8009014 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	2300      	movs	r3, #0
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	f001 fc34 	bl	80098b0 <USBD_LL_PrepareReceive>
 8008048:	e059      	b.n	80080fe <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	689a      	ldr	r2, [r3, #8]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	0019      	movs	r1, r3
 8008054:	0010      	movs	r0, r2
 8008056:	f7f8 f8dd 	bl	8000214 <__aeabi_uidivmod>
 800805a:	1e0b      	subs	r3, r1, #0
 800805c:	d11f      	bne.n	800809e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	689a      	ldr	r2, [r3, #8]
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008066:	429a      	cmp	r2, r3
 8008068:	d319      	bcc.n	800809e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	68f9      	ldr	r1, [r7, #12]
 8008070:	23a6      	movs	r3, #166	; 0xa6
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8008076:	429a      	cmp	r2, r3
 8008078:	d211      	bcs.n	800809e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	0018      	movs	r0, r3
 8008082:	f000 ffc7 	bl	8009014 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	23a6      	movs	r3, #166	; 0xa6
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	2100      	movs	r1, #0
 800808e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	2300      	movs	r3, #0
 8008094:	2200      	movs	r2, #0
 8008096:	2100      	movs	r1, #0
 8008098:	f001 fc0a 	bl	80098b0 <USBD_LL_PrepareReceive>
 800809c:	e02f      	b.n	80080fe <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	23ad      	movs	r3, #173	; 0xad
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	58d3      	ldr	r3, [r2, r3]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00d      	beq.n	80080c8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	23a7      	movs	r3, #167	; 0xa7
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d107      	bne.n	80080c8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	23ad      	movs	r3, #173	; 0xad
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	58d3      	ldr	r3, [r2, r3]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	0010      	movs	r0, r2
 80080c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2180      	movs	r1, #128	; 0x80
 80080cc:	0018      	movs	r0, r3
 80080ce:	f001 fb06 	bl	80096de <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	0018      	movs	r0, r3
 80080d6:	f000 ffd7 	bl	8009088 <USBD_CtlReceiveStatus>
 80080da:	e010      	b.n	80080fe <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	23a5      	movs	r3, #165	; 0xa5
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	58d3      	ldr	r3, [r2, r3]
 80080e4:	2b04      	cmp	r3, #4
 80080e6:	d005      	beq.n	80080f4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	23a5      	movs	r3, #165	; 0xa5
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d104      	bne.n	80080fe <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2180      	movs	r1, #128	; 0x80
 80080f8:	0018      	movs	r0, r3
 80080fa:	f001 faf0 	bl	80096de <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	23a8      	movs	r3, #168	; 0xa8
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	5cd3      	ldrb	r3, [r2, r3]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d124      	bne.n	8008154 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	0018      	movs	r0, r3
 800810e:	f7ff fe43 	bl	8007d98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	23a8      	movs	r3, #168	; 0xa8
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	2100      	movs	r1, #0
 800811a:	54d1      	strb	r1, [r2, r3]
 800811c:	e01a      	b.n	8008154 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	23ad      	movs	r3, #173	; 0xad
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	58d3      	ldr	r3, [r2, r3]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d011      	beq.n	8008150 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	23a7      	movs	r3, #167	; 0xa7
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8008134:	2b03      	cmp	r3, #3
 8008136:	d10b      	bne.n	8008150 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	23ad      	movs	r3, #173	; 0xad
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	58d3      	ldr	r3, [r2, r3]
 8008140:	695b      	ldr	r3, [r3, #20]
 8008142:	220b      	movs	r2, #11
 8008144:	18ba      	adds	r2, r7, r2
 8008146:	7811      	ldrb	r1, [r2, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	0010      	movs	r0, r2
 800814c:	4798      	blx	r3
 800814e:	e001      	b.n	8008154 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008150:	2302      	movs	r3, #2
 8008152:	e000      	b.n	8008156 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b006      	add	sp, #24
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	2340      	movs	r3, #64	; 0x40
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	f001 fa54 	bl	800961a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	23ac      	movs	r3, #172	; 0xac
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	2101      	movs	r1, #1
 800817a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	23b2      	movs	r3, #178	; 0xb2
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	2140      	movs	r1, #64	; 0x40
 8008184:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	2200      	movs	r2, #0
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	f001 fa44 	bl	800961a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	23a7      	movs	r3, #167	; 0xa7
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	2101      	movs	r1, #1
 80081a6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	23a5      	movs	r3, #165	; 0xa5
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	2100      	movs	r1, #0
 80081b0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	23a9      	movs	r3, #169	; 0xa9
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	2100      	movs	r1, #0
 80081c0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	23ae      	movs	r3, #174	; 0xae
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	58d3      	ldr	r3, [r2, r3]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00a      	beq.n	80081e4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	23ad      	movs	r3, #173	; 0xad
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	58d3      	ldr	r3, [r2, r3]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	b2d9      	uxtb	r1, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	0018      	movs	r0, r3
 80081e2:	4790      	blx	r2
  }

  return USBD_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	0018      	movs	r0, r3
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b002      	add	sp, #8
 80081ec:	bd80      	pop	{r7, pc}

080081ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	000a      	movs	r2, r1
 80081f8:	1cfb      	adds	r3, r7, #3
 80081fa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	1cfa      	adds	r2, r7, #3
 8008200:	7812      	ldrb	r2, [r2, #0]
 8008202:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	0018      	movs	r0, r3
 8008208:	46bd      	mov	sp, r7
 800820a:	b002      	add	sp, #8
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	23a7      	movs	r3, #167	; 0xa7
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	5cd1      	ldrb	r1, [r2, r3]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a06      	ldr	r2, [pc, #24]	; (800823c <USBD_LL_Suspend+0x2c>)
 8008224:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	23a7      	movs	r3, #167	; 0xa7
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	2104      	movs	r1, #4
 800822e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	0018      	movs	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	b002      	add	sp, #8
 8008238:	bd80      	pop	{r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	0000029d 	.word	0x0000029d

08008240 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	23a7      	movs	r3, #167	; 0xa7
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	5cd3      	ldrb	r3, [r2, r3]
 8008250:	2b04      	cmp	r3, #4
 8008252:	d106      	bne.n	8008262 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a05      	ldr	r2, [pc, #20]	; (800826c <USBD_LL_Resume+0x2c>)
 8008258:	5c99      	ldrb	r1, [r3, r2]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	23a7      	movs	r3, #167	; 0xa7
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	0018      	movs	r0, r3
 8008266:	46bd      	mov	sp, r7
 8008268:	b002      	add	sp, #8
 800826a:	bd80      	pop	{r7, pc}
 800826c:	0000029d 	.word	0x0000029d

08008270 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	23a7      	movs	r3, #167	; 0xa7
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	5cd3      	ldrb	r3, [r2, r3]
 8008280:	2b03      	cmp	r3, #3
 8008282:	d10e      	bne.n	80082a2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	23ad      	movs	r3, #173	; 0xad
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	58d3      	ldr	r3, [r2, r3]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	23ad      	movs	r3, #173	; 0xad
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	58d3      	ldr	r3, [r2, r3]
 800829a:	69db      	ldr	r3, [r3, #28]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	0010      	movs	r0, r2
 80082a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	0018      	movs	r0, r3
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b002      	add	sp, #8
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082b6:	230f      	movs	r3, #15
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	2200      	movs	r2, #0
 80082bc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	001a      	movs	r2, r3
 80082c4:	2360      	movs	r3, #96	; 0x60
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	d004      	beq.n	80082d6 <USBD_StdDevReq+0x2a>
 80082cc:	d84f      	bhi.n	800836e <USBD_StdDevReq+0xc2>
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00b      	beq.n	80082ea <USBD_StdDevReq+0x3e>
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d14b      	bne.n	800836e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	23ad      	movs	r3, #173	; 0xad
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	58d3      	ldr	r3, [r2, r3]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	0010      	movs	r0, r2
 80082e6:	4798      	blx	r3
      break;
 80082e8:	e048      	b.n	800837c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	785b      	ldrb	r3, [r3, #1]
 80082ee:	2b09      	cmp	r3, #9
 80082f0:	d835      	bhi.n	800835e <USBD_StdDevReq+0xb2>
 80082f2:	009a      	lsls	r2, r3, #2
 80082f4:	4b25      	ldr	r3, [pc, #148]	; (800838c <USBD_StdDevReq+0xe0>)
 80082f6:	18d3      	adds	r3, r2, r3
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	0011      	movs	r1, r2
 8008302:	0018      	movs	r0, r3
 8008304:	f000 fa52 	bl	80087ac <USBD_GetDescriptor>
          break;
 8008308:	e030      	b.n	800836c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	0011      	movs	r1, r2
 8008310:	0018      	movs	r0, r3
 8008312:	f000 fbfd 	bl	8008b10 <USBD_SetAddress>
          break;
 8008316:	e029      	b.n	800836c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	0011      	movs	r1, r2
 800831e:	0018      	movs	r0, r3
 8008320:	f000 fc4a 	bl	8008bb8 <USBD_SetConfig>
          break;
 8008324:	e022      	b.n	800836c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	0011      	movs	r1, r2
 800832c:	0018      	movs	r0, r3
 800832e:	f000 fce7 	bl	8008d00 <USBD_GetConfig>
          break;
 8008332:	e01b      	b.n	800836c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	0011      	movs	r1, r2
 800833a:	0018      	movs	r0, r3
 800833c:	f000 fd1b 	bl	8008d76 <USBD_GetStatus>
          break;
 8008340:	e014      	b.n	800836c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	0011      	movs	r1, r2
 8008348:	0018      	movs	r0, r3
 800834a:	f000 fd4e 	bl	8008dea <USBD_SetFeature>
          break;
 800834e:	e00d      	b.n	800836c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	0011      	movs	r1, r2
 8008356:	0018      	movs	r0, r3
 8008358:	f000 fd5d 	bl	8008e16 <USBD_ClrFeature>
          break;
 800835c:	e006      	b.n	800836c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	0011      	movs	r1, r2
 8008364:	0018      	movs	r0, r3
 8008366:	f000 fdb7 	bl	8008ed8 <USBD_CtlError>
          break;
 800836a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800836c:	e006      	b.n	800837c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	0011      	movs	r1, r2
 8008374:	0018      	movs	r0, r3
 8008376:	f000 fdaf 	bl	8008ed8 <USBD_CtlError>
      break;
 800837a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800837c:	230f      	movs	r3, #15
 800837e:	18fb      	adds	r3, r7, r3
 8008380:	781b      	ldrb	r3, [r3, #0]
}
 8008382:	0018      	movs	r0, r3
 8008384:	46bd      	mov	sp, r7
 8008386:	b004      	add	sp, #16
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	08009ab4 	.word	0x08009ab4

08008390 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008390:	b5b0      	push	{r4, r5, r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	230f      	movs	r3, #15
 800839c:	18fb      	adds	r3, r7, r3
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	001a      	movs	r2, r3
 80083a8:	2360      	movs	r3, #96	; 0x60
 80083aa:	4013      	ands	r3, r2
 80083ac:	2b40      	cmp	r3, #64	; 0x40
 80083ae:	d004      	beq.n	80083ba <USBD_StdItfReq+0x2a>
 80083b0:	d839      	bhi.n	8008426 <USBD_StdItfReq+0x96>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <USBD_StdItfReq+0x2a>
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d135      	bne.n	8008426 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	23a7      	movs	r3, #167	; 0xa7
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	5cd3      	ldrb	r3, [r2, r3]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d825      	bhi.n	8008414 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	889b      	ldrh	r3, [r3, #4]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d819      	bhi.n	8008406 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	23ad      	movs	r3, #173	; 0xad
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	58d3      	ldr	r3, [r2, r3]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	250f      	movs	r5, #15
 80083de:	197c      	adds	r4, r7, r5
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	0010      	movs	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	0003      	movs	r3, r0
 80083ea:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	88db      	ldrh	r3, [r3, #6]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d116      	bne.n	8008422 <USBD_StdItfReq+0x92>
 80083f4:	197b      	adds	r3, r7, r5
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d112      	bne.n	8008422 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	0018      	movs	r0, r3
 8008400:	f000 fe2e 	bl	8009060 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008404:	e00d      	b.n	8008422 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	0011      	movs	r1, r2
 800840c:	0018      	movs	r0, r3
 800840e:	f000 fd63 	bl	8008ed8 <USBD_CtlError>
          break;
 8008412:	e006      	b.n	8008422 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	0011      	movs	r1, r2
 800841a:	0018      	movs	r0, r3
 800841c:	f000 fd5c 	bl	8008ed8 <USBD_CtlError>
          break;
 8008420:	e000      	b.n	8008424 <USBD_StdItfReq+0x94>
          break;
 8008422:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008424:	e006      	b.n	8008434 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	0011      	movs	r1, r2
 800842c:	0018      	movs	r0, r3
 800842e:	f000 fd53 	bl	8008ed8 <USBD_CtlError>
      break;
 8008432:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	0018      	movs	r0, r3
 8008438:	46bd      	mov	sp, r7
 800843a:	b004      	add	sp, #16
 800843c:	bdb0      	pop	{r4, r5, r7, pc}

0800843e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800843e:	b5b0      	push	{r4, r5, r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008448:	230f      	movs	r3, #15
 800844a:	18fb      	adds	r3, r7, r3
 800844c:	2200      	movs	r2, #0
 800844e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	889a      	ldrh	r2, [r3, #4]
 8008454:	230e      	movs	r3, #14
 8008456:	18fb      	adds	r3, r7, r3
 8008458:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	001a      	movs	r2, r3
 8008460:	2360      	movs	r3, #96	; 0x60
 8008462:	4013      	ands	r3, r2
 8008464:	2b40      	cmp	r3, #64	; 0x40
 8008466:	d006      	beq.n	8008476 <USBD_StdEPReq+0x38>
 8008468:	d900      	bls.n	800846c <USBD_StdEPReq+0x2e>
 800846a:	e190      	b.n	800878e <USBD_StdEPReq+0x350>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00c      	beq.n	800848a <USBD_StdEPReq+0x4c>
 8008470:	2b20      	cmp	r3, #32
 8008472:	d000      	beq.n	8008476 <USBD_StdEPReq+0x38>
 8008474:	e18b      	b.n	800878e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	23ad      	movs	r3, #173	; 0xad
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	58d3      	ldr	r3, [r2, r3]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	0010      	movs	r0, r2
 8008486:	4798      	blx	r3
      break;
 8008488:	e188      	b.n	800879c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	001a      	movs	r2, r3
 8008490:	2360      	movs	r3, #96	; 0x60
 8008492:	4013      	ands	r3, r2
 8008494:	2b20      	cmp	r3, #32
 8008496:	d10f      	bne.n	80084b8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	23ad      	movs	r3, #173	; 0xad
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	58d3      	ldr	r3, [r2, r3]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	250f      	movs	r5, #15
 80084a4:	197c      	adds	r4, r7, r5
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	0010      	movs	r0, r2
 80084ac:	4798      	blx	r3
 80084ae:	0003      	movs	r3, r0
 80084b0:	7023      	strb	r3, [r4, #0]

        return ret;
 80084b2:	197b      	adds	r3, r7, r5
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	e174      	b.n	80087a2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d007      	beq.n	80084d0 <USBD_StdEPReq+0x92>
 80084c0:	dd00      	ble.n	80084c4 <USBD_StdEPReq+0x86>
 80084c2:	e15c      	b.n	800877e <USBD_StdEPReq+0x340>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d100      	bne.n	80084ca <USBD_StdEPReq+0x8c>
 80084c8:	e092      	b.n	80085f0 <USBD_StdEPReq+0x1b2>
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d04b      	beq.n	8008566 <USBD_StdEPReq+0x128>
 80084ce:	e156      	b.n	800877e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	23a7      	movs	r3, #167	; 0xa7
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	5cd3      	ldrb	r3, [r2, r3]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d002      	beq.n	80084e2 <USBD_StdEPReq+0xa4>
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d01d      	beq.n	800851c <USBD_StdEPReq+0xde>
 80084e0:	e039      	b.n	8008556 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e2:	220e      	movs	r2, #14
 80084e4:	18bb      	adds	r3, r7, r2
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d010      	beq.n	800850e <USBD_StdEPReq+0xd0>
 80084ec:	18bb      	adds	r3, r7, r2
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d00c      	beq.n	800850e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084f4:	18bb      	adds	r3, r7, r2
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	0011      	movs	r1, r2
 80084fc:	0018      	movs	r0, r3
 80084fe:	f001 f8ee 	bl	80096de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2180      	movs	r1, #128	; 0x80
 8008506:	0018      	movs	r0, r3
 8008508:	f001 f8e9 	bl	80096de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800850c:	e02a      	b.n	8008564 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	0011      	movs	r1, r2
 8008514:	0018      	movs	r0, r3
 8008516:	f000 fcdf 	bl	8008ed8 <USBD_CtlError>
              break;
 800851a:	e023      	b.n	8008564 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	885b      	ldrh	r3, [r3, #2]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d113      	bne.n	800854c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008524:	220e      	movs	r2, #14
 8008526:	18bb      	adds	r3, r7, r2
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <USBD_StdEPReq+0x10e>
 800852e:	18bb      	adds	r3, r7, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b80      	cmp	r3, #128	; 0x80
 8008534:	d00a      	beq.n	800854c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	88db      	ldrh	r3, [r3, #6]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d106      	bne.n	800854c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800853e:	18bb      	adds	r3, r7, r2
 8008540:	781a      	ldrb	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	0011      	movs	r1, r2
 8008546:	0018      	movs	r0, r3
 8008548:	f001 f8c9 	bl	80096de <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	0018      	movs	r0, r3
 8008550:	f000 fd86 	bl	8009060 <USBD_CtlSendStatus>

              break;
 8008554:	e006      	b.n	8008564 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	0011      	movs	r1, r2
 800855c:	0018      	movs	r0, r3
 800855e:	f000 fcbb 	bl	8008ed8 <USBD_CtlError>
              break;
 8008562:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008564:	e112      	b.n	800878c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	23a7      	movs	r3, #167	; 0xa7
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	5cd3      	ldrb	r3, [r2, r3]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d002      	beq.n	8008578 <USBD_StdEPReq+0x13a>
 8008572:	2b03      	cmp	r3, #3
 8008574:	d01d      	beq.n	80085b2 <USBD_StdEPReq+0x174>
 8008576:	e032      	b.n	80085de <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008578:	220e      	movs	r2, #14
 800857a:	18bb      	adds	r3, r7, r2
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <USBD_StdEPReq+0x166>
 8008582:	18bb      	adds	r3, r7, r2
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d00c      	beq.n	80085a4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800858a:	18bb      	adds	r3, r7, r2
 800858c:	781a      	ldrb	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	0011      	movs	r1, r2
 8008592:	0018      	movs	r0, r3
 8008594:	f001 f8a3 	bl	80096de <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2180      	movs	r1, #128	; 0x80
 800859c:	0018      	movs	r0, r3
 800859e:	f001 f89e 	bl	80096de <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085a2:	e024      	b.n	80085ee <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	0011      	movs	r1, r2
 80085aa:	0018      	movs	r0, r3
 80085ac:	f000 fc94 	bl	8008ed8 <USBD_CtlError>
              break;
 80085b0:	e01d      	b.n	80085ee <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	885b      	ldrh	r3, [r3, #2]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d118      	bne.n	80085ec <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80085ba:	210e      	movs	r1, #14
 80085bc:	187b      	adds	r3, r7, r1
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	227f      	movs	r2, #127	; 0x7f
 80085c2:	4013      	ands	r3, r2
 80085c4:	d006      	beq.n	80085d4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80085c6:	187b      	adds	r3, r7, r1
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	0011      	movs	r1, r2
 80085ce:	0018      	movs	r0, r3
 80085d0:	f001 f8b0 	bl	8009734 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	0018      	movs	r0, r3
 80085d8:	f000 fd42 	bl	8009060 <USBD_CtlSendStatus>
              }
              break;
 80085dc:	e006      	b.n	80085ec <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	0011      	movs	r1, r2
 80085e4:	0018      	movs	r0, r3
 80085e6:	f000 fc77 	bl	8008ed8 <USBD_CtlError>
              break;
 80085ea:	e000      	b.n	80085ee <USBD_StdEPReq+0x1b0>
              break;
 80085ec:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80085ee:	e0cd      	b.n	800878c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	23a7      	movs	r3, #167	; 0xa7
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	5cd3      	ldrb	r3, [r2, r3]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d002      	beq.n	8008602 <USBD_StdEPReq+0x1c4>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d03c      	beq.n	800867a <USBD_StdEPReq+0x23c>
 8008600:	e0b5      	b.n	800876e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008602:	220e      	movs	r2, #14
 8008604:	18bb      	adds	r3, r7, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00a      	beq.n	8008622 <USBD_StdEPReq+0x1e4>
 800860c:	18bb      	adds	r3, r7, r2
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b80      	cmp	r3, #128	; 0x80
 8008612:	d006      	beq.n	8008622 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	0011      	movs	r1, r2
 800861a:	0018      	movs	r0, r3
 800861c:	f000 fc5c 	bl	8008ed8 <USBD_CtlError>
                break;
 8008620:	e0ac      	b.n	800877c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008622:	220e      	movs	r2, #14
 8008624:	18bb      	adds	r3, r7, r2
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	b25b      	sxtb	r3, r3
 800862a:	2b00      	cmp	r3, #0
 800862c:	da0c      	bge.n	8008648 <USBD_StdEPReq+0x20a>
 800862e:	18bb      	adds	r3, r7, r2
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	227f      	movs	r2, #127	; 0x7f
 8008634:	401a      	ands	r2, r3
 8008636:	0013      	movs	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	189b      	adds	r3, r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	3310      	adds	r3, #16
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	18d3      	adds	r3, r2, r3
 8008644:	3304      	adds	r3, #4
 8008646:	e00d      	b.n	8008664 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008648:	230e      	movs	r3, #14
 800864a:	18fb      	adds	r3, r7, r3
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	227f      	movs	r2, #127	; 0x7f
 8008650:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008652:	0013      	movs	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	189b      	adds	r3, r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	3351      	adds	r3, #81	; 0x51
 800865c:	33ff      	adds	r3, #255	; 0xff
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	3304      	adds	r3, #4
 8008664:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2200      	movs	r2, #0
 800866a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2202      	movs	r2, #2
 8008672:	0018      	movs	r0, r3
 8008674:	f000 fcae 	bl	8008fd4 <USBD_CtlSendData>
              break;
 8008678:	e080      	b.n	800877c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800867a:	220e      	movs	r2, #14
 800867c:	18bb      	adds	r3, r7, r2
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	b25b      	sxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	da14      	bge.n	80086b0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008686:	18bb      	adds	r3, r7, r2
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	220f      	movs	r2, #15
 800868c:	401a      	ands	r2, r3
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	0013      	movs	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	189b      	adds	r3, r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	18cb      	adds	r3, r1, r3
 800869a:	3318      	adds	r3, #24
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d11e      	bne.n	80086e0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80086a2:	683a      	ldr	r2, [r7, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	0011      	movs	r1, r2
 80086a8:	0018      	movs	r0, r3
 80086aa:	f000 fc15 	bl	8008ed8 <USBD_CtlError>
                  break;
 80086ae:	e065      	b.n	800877c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086b0:	230e      	movs	r3, #14
 80086b2:	18fb      	adds	r3, r7, r3
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	220f      	movs	r2, #15
 80086b8:	401a      	ands	r2, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	23ac      	movs	r3, #172	; 0xac
 80086be:	0059      	lsls	r1, r3, #1
 80086c0:	0013      	movs	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	189b      	adds	r3, r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	18c3      	adds	r3, r0, r3
 80086ca:	185b      	adds	r3, r3, r1
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	0011      	movs	r1, r2
 80086d8:	0018      	movs	r0, r3
 80086da:	f000 fbfd 	bl	8008ed8 <USBD_CtlError>
                  break;
 80086de:	e04d      	b.n	800877c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e0:	220e      	movs	r2, #14
 80086e2:	18bb      	adds	r3, r7, r2
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0c      	bge.n	8008706 <USBD_StdEPReq+0x2c8>
 80086ec:	18bb      	adds	r3, r7, r2
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	227f      	movs	r2, #127	; 0x7f
 80086f2:	401a      	ands	r2, r3
 80086f4:	0013      	movs	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	189b      	adds	r3, r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	3310      	adds	r3, #16
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	18d3      	adds	r3, r2, r3
 8008702:	3304      	adds	r3, #4
 8008704:	e00d      	b.n	8008722 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008706:	230e      	movs	r3, #14
 8008708:	18fb      	adds	r3, r7, r3
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	227f      	movs	r2, #127	; 0x7f
 800870e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008710:	0013      	movs	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	189b      	adds	r3, r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	3351      	adds	r3, #81	; 0x51
 800871a:	33ff      	adds	r3, #255	; 0xff
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	18d3      	adds	r3, r2, r3
 8008720:	3304      	adds	r3, #4
 8008722:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008724:	220e      	movs	r2, #14
 8008726:	18bb      	adds	r3, r7, r2
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <USBD_StdEPReq+0x2f8>
 800872e:	18bb      	adds	r3, r7, r2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b80      	cmp	r3, #128	; 0x80
 8008734:	d103      	bne.n	800873e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	e010      	b.n	8008760 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800873e:	230e      	movs	r3, #14
 8008740:	18fb      	adds	r3, r7, r3
 8008742:	781a      	ldrb	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	0011      	movs	r1, r2
 8008748:	0018      	movs	r0, r3
 800874a:	f001 f81e 	bl	800978a <USBD_LL_IsStallEP>
 800874e:	1e03      	subs	r3, r0, #0
 8008750:	d003      	beq.n	800875a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
 8008758:	e002      	b.n	8008760 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008760:	68b9      	ldr	r1, [r7, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	0018      	movs	r0, r3
 8008768:	f000 fc34 	bl	8008fd4 <USBD_CtlSendData>
              break;
 800876c:	e006      	b.n	800877c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	0011      	movs	r1, r2
 8008774:	0018      	movs	r0, r3
 8008776:	f000 fbaf 	bl	8008ed8 <USBD_CtlError>
              break;
 800877a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800877c:	e006      	b.n	800878c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	0011      	movs	r1, r2
 8008784:	0018      	movs	r0, r3
 8008786:	f000 fba7 	bl	8008ed8 <USBD_CtlError>
          break;
 800878a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800878c:	e006      	b.n	800879c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	0011      	movs	r1, r2
 8008794:	0018      	movs	r0, r3
 8008796:	f000 fb9f 	bl	8008ed8 <USBD_CtlError>
      break;
 800879a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800879c:	230f      	movs	r3, #15
 800879e:	18fb      	adds	r3, r7, r3
 80087a0:	781b      	ldrb	r3, [r3, #0]
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b004      	add	sp, #16
 80087a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080087ac <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087b6:	2308      	movs	r3, #8
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	2200      	movs	r2, #0
 80087bc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80087c2:	230b      	movs	r3, #11
 80087c4:	18fb      	adds	r3, r7, r3
 80087c6:	2200      	movs	r2, #0
 80087c8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	0a1b      	lsrs	r3, r3, #8
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b07      	cmp	r3, #7
 80087d4:	d900      	bls.n	80087d8 <USBD_GetDescriptor+0x2c>
 80087d6:	e159      	b.n	8008a8c <USBD_GetDescriptor+0x2e0>
 80087d8:	009a      	lsls	r2, r3, #2
 80087da:	4bcb      	ldr	r3, [pc, #812]	; (8008b08 <USBD_GetDescriptor+0x35c>)
 80087dc:	18d3      	adds	r3, r2, r3
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	23ac      	movs	r3, #172	; 0xac
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	58d3      	ldr	r3, [r2, r3]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	7c12      	ldrb	r2, [r2, #16]
 80087f0:	2108      	movs	r1, #8
 80087f2:	1879      	adds	r1, r7, r1
 80087f4:	0010      	movs	r0, r2
 80087f6:	4798      	blx	r3
 80087f8:	0003      	movs	r3, r0
 80087fa:	60fb      	str	r3, [r7, #12]
      break;
 80087fc:	e153      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7c1b      	ldrb	r3, [r3, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10f      	bne.n	8008826 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	23ad      	movs	r3, #173	; 0xad
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	58d3      	ldr	r3, [r2, r3]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	2208      	movs	r2, #8
 8008812:	18ba      	adds	r2, r7, r2
 8008814:	0010      	movs	r0, r2
 8008816:	4798      	blx	r3
 8008818:	0003      	movs	r3, r0
 800881a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	3301      	adds	r3, #1
 8008820:	2202      	movs	r2, #2
 8008822:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008824:	e13f      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	23ad      	movs	r3, #173	; 0xad
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	58d3      	ldr	r3, [r2, r3]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	2208      	movs	r2, #8
 8008832:	18ba      	adds	r2, r7, r2
 8008834:	0010      	movs	r0, r2
 8008836:	4798      	blx	r3
 8008838:	0003      	movs	r3, r0
 800883a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	3301      	adds	r3, #1
 8008840:	2202      	movs	r2, #2
 8008842:	701a      	strb	r2, [r3, #0]
      break;
 8008844:	e12f      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b05      	cmp	r3, #5
 800884e:	d900      	bls.n	8008852 <USBD_GetDescriptor+0xa6>
 8008850:	e0d0      	b.n	80089f4 <USBD_GetDescriptor+0x248>
 8008852:	009a      	lsls	r2, r3, #2
 8008854:	4bad      	ldr	r3, [pc, #692]	; (8008b0c <USBD_GetDescriptor+0x360>)
 8008856:	18d3      	adds	r3, r2, r3
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	23ac      	movs	r3, #172	; 0xac
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	58d3      	ldr	r3, [r2, r3]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00d      	beq.n	8008886 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	23ac      	movs	r3, #172	; 0xac
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	58d3      	ldr	r3, [r2, r3]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	7c12      	ldrb	r2, [r2, #16]
 8008878:	2108      	movs	r1, #8
 800887a:	1879      	adds	r1, r7, r1
 800887c:	0010      	movs	r0, r2
 800887e:	4798      	blx	r3
 8008880:	0003      	movs	r3, r0
 8008882:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008884:	e0c3      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	0011      	movs	r1, r2
 800888c:	0018      	movs	r0, r3
 800888e:	f000 fb23 	bl	8008ed8 <USBD_CtlError>
            err++;
 8008892:	210b      	movs	r1, #11
 8008894:	187b      	adds	r3, r7, r1
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	187b      	adds	r3, r7, r1
 800889a:	3201      	adds	r2, #1
 800889c:	701a      	strb	r2, [r3, #0]
          break;
 800889e:	e0b6      	b.n	8008a0e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	23ac      	movs	r3, #172	; 0xac
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	58d3      	ldr	r3, [r2, r3]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00d      	beq.n	80088ca <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	23ac      	movs	r3, #172	; 0xac
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	58d3      	ldr	r3, [r2, r3]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	7c12      	ldrb	r2, [r2, #16]
 80088bc:	2108      	movs	r1, #8
 80088be:	1879      	adds	r1, r7, r1
 80088c0:	0010      	movs	r0, r2
 80088c2:	4798      	blx	r3
 80088c4:	0003      	movs	r3, r0
 80088c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c8:	e0a1      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	0011      	movs	r1, r2
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 fb01 	bl	8008ed8 <USBD_CtlError>
            err++;
 80088d6:	210b      	movs	r1, #11
 80088d8:	187b      	adds	r3, r7, r1
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	3201      	adds	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
          break;
 80088e2:	e094      	b.n	8008a0e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	23ac      	movs	r3, #172	; 0xac
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	58d3      	ldr	r3, [r2, r3]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00d      	beq.n	800890e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	23ac      	movs	r3, #172	; 0xac
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	58d3      	ldr	r3, [r2, r3]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	7c12      	ldrb	r2, [r2, #16]
 8008900:	2108      	movs	r1, #8
 8008902:	1879      	adds	r1, r7, r1
 8008904:	0010      	movs	r0, r2
 8008906:	4798      	blx	r3
 8008908:	0003      	movs	r3, r0
 800890a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800890c:	e07f      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	0011      	movs	r1, r2
 8008914:	0018      	movs	r0, r3
 8008916:	f000 fadf 	bl	8008ed8 <USBD_CtlError>
            err++;
 800891a:	210b      	movs	r1, #11
 800891c:	187b      	adds	r3, r7, r1
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	187b      	adds	r3, r7, r1
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
          break;
 8008926:	e072      	b.n	8008a0e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	23ac      	movs	r3, #172	; 0xac
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	58d3      	ldr	r3, [r2, r3]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00d      	beq.n	8008952 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	23ac      	movs	r3, #172	; 0xac
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	58d3      	ldr	r3, [r2, r3]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	2108      	movs	r1, #8
 8008946:	1879      	adds	r1, r7, r1
 8008948:	0010      	movs	r0, r2
 800894a:	4798      	blx	r3
 800894c:	0003      	movs	r3, r0
 800894e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008950:	e05d      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	0011      	movs	r1, r2
 8008958:	0018      	movs	r0, r3
 800895a:	f000 fabd 	bl	8008ed8 <USBD_CtlError>
            err++;
 800895e:	210b      	movs	r1, #11
 8008960:	187b      	adds	r3, r7, r1
 8008962:	781a      	ldrb	r2, [r3, #0]
 8008964:	187b      	adds	r3, r7, r1
 8008966:	3201      	adds	r2, #1
 8008968:	701a      	strb	r2, [r3, #0]
          break;
 800896a:	e050      	b.n	8008a0e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	23ac      	movs	r3, #172	; 0xac
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	58d3      	ldr	r3, [r2, r3]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	23ac      	movs	r3, #172	; 0xac
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	58d3      	ldr	r3, [r2, r3]
 8008982:	695b      	ldr	r3, [r3, #20]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	2108      	movs	r1, #8
 800898a:	1879      	adds	r1, r7, r1
 800898c:	0010      	movs	r0, r2
 800898e:	4798      	blx	r3
 8008990:	0003      	movs	r3, r0
 8008992:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008994:	e03b      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	0011      	movs	r1, r2
 800899c:	0018      	movs	r0, r3
 800899e:	f000 fa9b 	bl	8008ed8 <USBD_CtlError>
            err++;
 80089a2:	210b      	movs	r1, #11
 80089a4:	187b      	adds	r3, r7, r1
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	187b      	adds	r3, r7, r1
 80089aa:	3201      	adds	r2, #1
 80089ac:	701a      	strb	r2, [r3, #0]
          break;
 80089ae:	e02e      	b.n	8008a0e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	23ac      	movs	r3, #172	; 0xac
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	58d3      	ldr	r3, [r2, r3]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00d      	beq.n	80089da <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	23ac      	movs	r3, #172	; 0xac
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	58d3      	ldr	r3, [r2, r3]
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	2108      	movs	r1, #8
 80089ce:	1879      	adds	r1, r7, r1
 80089d0:	0010      	movs	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	0003      	movs	r3, r0
 80089d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089d8:	e019      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	0011      	movs	r1, r2
 80089e0:	0018      	movs	r0, r3
 80089e2:	f000 fa79 	bl	8008ed8 <USBD_CtlError>
            err++;
 80089e6:	210b      	movs	r1, #11
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	781a      	ldrb	r2, [r3, #0]
 80089ec:	187b      	adds	r3, r7, r1
 80089ee:	3201      	adds	r2, #1
 80089f0:	701a      	strb	r2, [r3, #0]
          break;
 80089f2:	e00c      	b.n	8008a0e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	0011      	movs	r1, r2
 80089fa:	0018      	movs	r0, r3
 80089fc:	f000 fa6c 	bl	8008ed8 <USBD_CtlError>
          err++;
 8008a00:	210b      	movs	r1, #11
 8008a02:	187b      	adds	r3, r7, r1
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	187b      	adds	r3, r7, r1
 8008a08:	3201      	adds	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008a0c:	e04b      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>
 8008a0e:	e04a      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	7c1b      	ldrb	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10b      	bne.n	8008a30 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	23ad      	movs	r3, #173	; 0xad
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	58d3      	ldr	r3, [r2, r3]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a22:	2208      	movs	r2, #8
 8008a24:	18ba      	adds	r2, r7, r2
 8008a26:	0010      	movs	r0, r2
 8008a28:	4798      	blx	r3
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a2e:	e03a      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008a30:	683a      	ldr	r2, [r7, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	0011      	movs	r1, r2
 8008a36:	0018      	movs	r0, r3
 8008a38:	f000 fa4e 	bl	8008ed8 <USBD_CtlError>
        err++;
 8008a3c:	210b      	movs	r1, #11
 8008a3e:	187b      	adds	r3, r7, r1
 8008a40:	781a      	ldrb	r2, [r3, #0]
 8008a42:	187b      	adds	r3, r7, r1
 8008a44:	3201      	adds	r2, #1
 8008a46:	701a      	strb	r2, [r3, #0]
      break;
 8008a48:	e02d      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7c1b      	ldrb	r3, [r3, #16]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10f      	bne.n	8008a72 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	23ad      	movs	r3, #173	; 0xad
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	58d3      	ldr	r3, [r2, r3]
 8008a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	18ba      	adds	r2, r7, r2
 8008a60:	0010      	movs	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	0003      	movs	r3, r0
 8008a66:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	2207      	movs	r2, #7
 8008a6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a70:	e019      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008a72:	683a      	ldr	r2, [r7, #0]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	0011      	movs	r1, r2
 8008a78:	0018      	movs	r0, r3
 8008a7a:	f000 fa2d 	bl	8008ed8 <USBD_CtlError>
        err++;
 8008a7e:	210b      	movs	r1, #11
 8008a80:	187b      	adds	r3, r7, r1
 8008a82:	781a      	ldrb	r2, [r3, #0]
 8008a84:	187b      	adds	r3, r7, r1
 8008a86:	3201      	adds	r2, #1
 8008a88:	701a      	strb	r2, [r3, #0]
      break;
 8008a8a:	e00c      	b.n	8008aa6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008a8c:	683a      	ldr	r2, [r7, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	0011      	movs	r1, r2
 8008a92:	0018      	movs	r0, r3
 8008a94:	f000 fa20 	bl	8008ed8 <USBD_CtlError>
      err++;
 8008a98:	210b      	movs	r1, #11
 8008a9a:	187b      	adds	r3, r7, r1
 8008a9c:	781a      	ldrb	r2, [r3, #0]
 8008a9e:	187b      	adds	r3, r7, r1
 8008aa0:	3201      	adds	r2, #1
 8008aa2:	701a      	strb	r2, [r3, #0]
      break;
 8008aa4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008aa6:	230b      	movs	r3, #11
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d127      	bne.n	8008b00 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008ab0:	2108      	movs	r1, #8
 8008ab2:	187b      	adds	r3, r7, r1
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d019      	beq.n	8008aee <USBD_GetDescriptor+0x342>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	88db      	ldrh	r3, [r3, #6]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d015      	beq.n	8008aee <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	88da      	ldrh	r2, [r3, #6]
 8008ac6:	187b      	adds	r3, r7, r1
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	1c18      	adds	r0, r3, #0
 8008acc:	1c11      	adds	r1, r2, #0
 8008ace:	b28a      	uxth	r2, r1
 8008ad0:	b283      	uxth	r3, r0
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d900      	bls.n	8008ad8 <USBD_GetDescriptor+0x32c>
 8008ad6:	1c01      	adds	r1, r0, #0
 8008ad8:	b28a      	uxth	r2, r1
 8008ada:	2108      	movs	r1, #8
 8008adc:	187b      	adds	r3, r7, r1
 8008ade:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ae0:	187b      	adds	r3, r7, r1
 8008ae2:	881a      	ldrh	r2, [r3, #0]
 8008ae4:	68f9      	ldr	r1, [r7, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	0018      	movs	r0, r3
 8008aea:	f000 fa73 	bl	8008fd4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	88db      	ldrh	r3, [r3, #6]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d105      	bne.n	8008b02 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	0018      	movs	r0, r3
 8008afa:	f000 fab1 	bl	8009060 <USBD_CtlSendStatus>
 8008afe:	e000      	b.n	8008b02 <USBD_GetDescriptor+0x356>
    return;
 8008b00:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008b02:	46bd      	mov	sp, r7
 8008b04:	b004      	add	sp, #16
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	08009adc 	.word	0x08009adc
 8008b0c:	08009afc 	.word	0x08009afc

08008b10 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008b10:	b590      	push	{r4, r7, lr}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	889b      	ldrh	r3, [r3, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d13d      	bne.n	8008b9e <USBD_SetAddress+0x8e>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d139      	bne.n	8008b9e <USBD_SetAddress+0x8e>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b30:	d835      	bhi.n	8008b9e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	885b      	ldrh	r3, [r3, #2]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	230f      	movs	r3, #15
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	217f      	movs	r1, #127	; 0x7f
 8008b3e:	400a      	ands	r2, r1
 8008b40:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	23a7      	movs	r3, #167	; 0xa7
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	5cd3      	ldrb	r3, [r2, r3]
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d106      	bne.n	8008b5c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	0011      	movs	r1, r2
 8008b54:	0018      	movs	r0, r3
 8008b56:	f000 f9bf 	bl	8008ed8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	e027      	b.n	8008bac <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	240f      	movs	r4, #15
 8008b60:	193a      	adds	r2, r7, r4
 8008b62:	4914      	ldr	r1, [pc, #80]	; (8008bb4 <USBD_SetAddress+0xa4>)
 8008b64:	7812      	ldrb	r2, [r2, #0]
 8008b66:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b68:	193b      	adds	r3, r7, r4
 8008b6a:	781a      	ldrb	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	0011      	movs	r1, r2
 8008b70:	0018      	movs	r0, r3
 8008b72:	f000 fe3b 	bl	80097ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f000 fa71 	bl	8009060 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b7e:	193b      	adds	r3, r7, r4
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d005      	beq.n	8008b92 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	23a7      	movs	r3, #167	; 0xa7
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	2102      	movs	r1, #2
 8008b8e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b90:	e00c      	b.n	8008bac <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	23a7      	movs	r3, #167	; 0xa7
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	2101      	movs	r1, #1
 8008b9a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9c:	e006      	b.n	8008bac <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	0011      	movs	r1, r2
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f000 f997 	bl	8008ed8 <USBD_CtlError>
  }
}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	46c0      	nop			; (mov r8, r8)
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	b005      	add	sp, #20
 8008bb2:	bd90      	pop	{r4, r7, pc}
 8008bb4:	0000029e 	.word	0x0000029e

08008bb8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	885b      	ldrh	r3, [r3, #2]
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	4b4c      	ldr	r3, [pc, #304]	; (8008cfc <USBD_SetConfig+0x144>)
 8008bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bcc:	4b4b      	ldr	r3, [pc, #300]	; (8008cfc <USBD_SetConfig+0x144>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d906      	bls.n	8008be2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	0011      	movs	r1, r2
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f000 f97c 	bl	8008ed8 <USBD_CtlError>
 8008be0:	e088      	b.n	8008cf4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	23a7      	movs	r3, #167	; 0xa7
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	5cd3      	ldrb	r3, [r2, r3]
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d002      	beq.n	8008bf4 <USBD_SetConfig+0x3c>
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	d029      	beq.n	8008c46 <USBD_SetConfig+0x8e>
 8008bf2:	e071      	b.n	8008cd8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008bf4:	4b41      	ldr	r3, [pc, #260]	; (8008cfc <USBD_SetConfig+0x144>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01f      	beq.n	8008c3c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008bfc:	4b3f      	ldr	r3, [pc, #252]	; (8008cfc <USBD_SetConfig+0x144>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	001a      	movs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	23a7      	movs	r3, #167	; 0xa7
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	2103      	movs	r1, #3
 8008c0e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c10:	4b3a      	ldr	r3, [pc, #232]	; (8008cfc <USBD_SetConfig+0x144>)
 8008c12:	781a      	ldrb	r2, [r3, #0]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	0011      	movs	r1, r2
 8008c18:	0018      	movs	r0, r3
 8008c1a:	f7ff f8c6 	bl	8007daa <USBD_SetClassConfig>
 8008c1e:	0003      	movs	r3, r0
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d106      	bne.n	8008c32 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	0011      	movs	r1, r2
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	f000 f954 	bl	8008ed8 <USBD_CtlError>
            return;
 8008c30:	e060      	b.n	8008cf4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 fa13 	bl	8009060 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c3a:	e05b      	b.n	8008cf4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	0018      	movs	r0, r3
 8008c40:	f000 fa0e 	bl	8009060 <USBD_CtlSendStatus>
        break;
 8008c44:	e056      	b.n	8008cf4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008c46:	4b2d      	ldr	r3, [pc, #180]	; (8008cfc <USBD_SetConfig+0x144>)
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d115      	bne.n	8008c7a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	23a7      	movs	r3, #167	; 0xa7
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	2102      	movs	r1, #2
 8008c56:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008c58:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <USBD_SetConfig+0x144>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	001a      	movs	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b26      	ldr	r3, [pc, #152]	; (8008cfc <USBD_SetConfig+0x144>)
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	0011      	movs	r1, r2
 8008c6a:	0018      	movs	r0, r3
 8008c6c:	f7ff f8c4 	bl	8007df8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	0018      	movs	r0, r3
 8008c74:	f000 f9f4 	bl	8009060 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c78:	e03c      	b.n	8008cf4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008c7a:	4b20      	ldr	r3, [pc, #128]	; (8008cfc <USBD_SetConfig+0x144>)
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	001a      	movs	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d022      	beq.n	8008cce <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	b2da      	uxtb	r2, r3
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	0011      	movs	r1, r2
 8008c92:	0018      	movs	r0, r3
 8008c94:	f7ff f8b0 	bl	8007df8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c98:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <USBD_SetConfig+0x144>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	001a      	movs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ca2:	4b16      	ldr	r3, [pc, #88]	; (8008cfc <USBD_SetConfig+0x144>)
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	0011      	movs	r1, r2
 8008caa:	0018      	movs	r0, r3
 8008cac:	f7ff f87d 	bl	8007daa <USBD_SetClassConfig>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d106      	bne.n	8008cc4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008cb6:	683a      	ldr	r2, [r7, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	0011      	movs	r1, r2
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f000 f90b 	bl	8008ed8 <USBD_CtlError>
            return;
 8008cc2:	e017      	b.n	8008cf4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f000 f9ca 	bl	8009060 <USBD_CtlSendStatus>
        break;
 8008ccc:	e012      	b.n	8008cf4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 f9c5 	bl	8009060 <USBD_CtlSendStatus>
        break;
 8008cd6:	e00d      	b.n	8008cf4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	0011      	movs	r1, r2
 8008cde:	0018      	movs	r0, r3
 8008ce0:	f000 f8fa 	bl	8008ed8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <USBD_SetConfig+0x144>)
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	0011      	movs	r1, r2
 8008cec:	0018      	movs	r0, r3
 8008cee:	f7ff f883 	bl	8007df8 <USBD_ClrClassConfig>
        break;
 8008cf2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b002      	add	sp, #8
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	46c0      	nop			; (mov r8, r8)
 8008cfc:	20000470 	.word	0x20000470

08008d00 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	88db      	ldrh	r3, [r3, #6]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d006      	beq.n	8008d20 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	0011      	movs	r1, r2
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f000 f8dd 	bl	8008ed8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d1e:	e026      	b.n	8008d6e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	23a7      	movs	r3, #167	; 0xa7
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	5cd3      	ldrb	r3, [r2, r3]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	dc02      	bgt.n	8008d32 <USBD_GetConfig+0x32>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dc03      	bgt.n	8008d38 <USBD_GetConfig+0x38>
 8008d30:	e016      	b.n	8008d60 <USBD_GetConfig+0x60>
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	d00c      	beq.n	8008d50 <USBD_GetConfig+0x50>
 8008d36:	e013      	b.n	8008d60 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3308      	adds	r3, #8
 8008d42:	0019      	movs	r1, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f000 f943 	bl	8008fd4 <USBD_CtlSendData>
        break;
 8008d4e:	e00e      	b.n	8008d6e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	1d19      	adds	r1, r3, #4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	0018      	movs	r0, r3
 8008d5a:	f000 f93b 	bl	8008fd4 <USBD_CtlSendData>
        break;
 8008d5e:	e006      	b.n	8008d6e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	0011      	movs	r1, r2
 8008d66:	0018      	movs	r0, r3
 8008d68:	f000 f8b6 	bl	8008ed8 <USBD_CtlError>
        break;
 8008d6c:	46c0      	nop			; (mov r8, r8)
}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b002      	add	sp, #8
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	23a7      	movs	r3, #167	; 0xa7
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	5cd3      	ldrb	r3, [r2, r3]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d822      	bhi.n	8008dd4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	88db      	ldrh	r3, [r3, #6]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d006      	beq.n	8008da4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	0011      	movs	r1, r2
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f000 f89b 	bl	8008ed8 <USBD_CtlError>
        break;
 8008da2:	e01e      	b.n	8008de2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	23a9      	movs	r3, #169	; 0xa9
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	58d3      	ldr	r3, [r2, r3]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	431a      	orrs	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	330c      	adds	r3, #12
 8008dc6:	0019      	movs	r1, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f000 f901 	bl	8008fd4 <USBD_CtlSendData>
      break;
 8008dd2:	e006      	b.n	8008de2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008dd4:	683a      	ldr	r2, [r7, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	0011      	movs	r1, r2
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f000 f87c 	bl	8008ed8 <USBD_CtlError>
      break;
 8008de0:	46c0      	nop			; (mov r8, r8)
  }
}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b002      	add	sp, #8
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	885b      	ldrh	r3, [r3, #2]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d108      	bne.n	8008e0e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	23a9      	movs	r3, #169	; 0xa9
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	2101      	movs	r1, #1
 8008e04:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	0018      	movs	r0, r3
 8008e0a:	f000 f929 	bl	8009060 <USBD_CtlSendStatus>
  }
}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b002      	add	sp, #8
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	23a7      	movs	r3, #167	; 0xa7
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	5cd3      	ldrb	r3, [r2, r3]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d80d      	bhi.n	8008e4a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	885b      	ldrh	r3, [r3, #2]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d110      	bne.n	8008e58 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	23a9      	movs	r3, #169	; 0xa9
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	0018      	movs	r0, r3
 8008e44:	f000 f90c 	bl	8009060 <USBD_CtlSendStatus>
      }
      break;
 8008e48:	e006      	b.n	8008e58 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008e4a:	683a      	ldr	r2, [r7, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	0011      	movs	r1, r2
 8008e50:	0018      	movs	r0, r3
 8008e52:	f000 f841 	bl	8008ed8 <USBD_CtlError>
      break;
 8008e56:	e000      	b.n	8008e5a <USBD_ClrFeature+0x44>
      break;
 8008e58:	46c0      	nop			; (mov r8, r8)
  }
}
 8008e5a:	46c0      	nop			; (mov r8, r8)
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b002      	add	sp, #8
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781a      	ldrb	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	785a      	ldrb	r2, [r3, #1]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	3302      	adds	r3, #2
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	3303      	adds	r3, #3
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	18d3      	adds	r3, r2, r3
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	3305      	adds	r3, #5
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	18d3      	adds	r3, r2, r3
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	3306      	adds	r3, #6
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	3307      	adds	r3, #7
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	021b      	lsls	r3, r3, #8
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	18d3      	adds	r3, r2, r3
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	80da      	strh	r2, [r3, #6]

}
 8008ed0:	46c0      	nop			; (mov r8, r8)
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	b002      	add	sp, #8
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2180      	movs	r1, #128	; 0x80
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f000 fbf9 	bl	80096de <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2100      	movs	r1, #0
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f000 fbf4 	bl	80096de <USBD_LL_StallEP>
}
 8008ef6:	46c0      	nop			; (mov r8, r8)
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	b002      	add	sp, #8
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008efe:	b590      	push	{r4, r7, lr}
 8008f00:	b087      	sub	sp, #28
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f0a:	2417      	movs	r4, #23
 8008f0c:	193b      	adds	r3, r7, r4
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d03c      	beq.n	8008f92 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f000 f83d 	bl	8008f9a <USBD_GetLen>
 8008f20:	0003      	movs	r3, r0
 8008f22:	3301      	adds	r3, #1
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	18db      	adds	r3, r3, r3
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008f2e:	193b      	adds	r3, r7, r4
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	193a      	adds	r2, r7, r4
 8008f34:	1c59      	adds	r1, r3, #1
 8008f36:	7011      	strb	r1, [r2, #0]
 8008f38:	001a      	movs	r2, r3
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	189b      	adds	r3, r3, r2
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	7812      	ldrb	r2, [r2, #0]
 8008f42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008f44:	193b      	adds	r3, r7, r4
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	193a      	adds	r2, r7, r4
 8008f4a:	1c59      	adds	r1, r3, #1
 8008f4c:	7011      	strb	r1, [r2, #0]
 8008f4e:	001a      	movs	r2, r3
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	189b      	adds	r3, r3, r2
 8008f54:	2203      	movs	r2, #3
 8008f56:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008f58:	e017      	b.n	8008f8a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	60fa      	str	r2, [r7, #12]
 8008f60:	2417      	movs	r4, #23
 8008f62:	193a      	adds	r2, r7, r4
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	1939      	adds	r1, r7, r4
 8008f68:	1c50      	adds	r0, r2, #1
 8008f6a:	7008      	strb	r0, [r1, #0]
 8008f6c:	0011      	movs	r1, r2
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	1852      	adds	r2, r2, r1
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008f76:	193b      	adds	r3, r7, r4
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	193a      	adds	r2, r7, r4
 8008f7c:	1c59      	adds	r1, r3, #1
 8008f7e:	7011      	strb	r1, [r2, #0]
 8008f80:	001a      	movs	r2, r3
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	189b      	adds	r3, r3, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e3      	bne.n	8008f5a <USBD_GetString+0x5c>
    }
  }
}
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	46bd      	mov	sp, r7
 8008f96:	b007      	add	sp, #28
 8008f98:	bd90      	pop	{r4, r7, pc}

08008f9a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fa2:	230f      	movs	r3, #15
 8008fa4:	18fb      	adds	r3, r7, r3
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008faa:	e008      	b.n	8008fbe <USBD_GetLen+0x24>
  {
    len++;
 8008fac:	210f      	movs	r1, #15
 8008fae:	187b      	adds	r3, r7, r1
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	187b      	adds	r3, r7, r1
 8008fb4:	3201      	adds	r2, #1
 8008fb6:	701a      	strb	r2, [r3, #0]
    buf++;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1f2      	bne.n	8008fac <USBD_GetLen+0x12>
  }

  return len;
 8008fc6:	230f      	movs	r3, #15
 8008fc8:	18fb      	adds	r3, r7, r3
 8008fca:	781b      	ldrb	r3, [r3, #0]
}
 8008fcc:	0018      	movs	r0, r3
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	b004      	add	sp, #16
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	1dbb      	adds	r3, r7, #6
 8008fe0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	23a5      	movs	r3, #165	; 0xa5
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	2102      	movs	r1, #2
 8008fea:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008fec:	1dbb      	adds	r3, r7, #6
 8008fee:	881a      	ldrh	r2, [r3, #0]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ff4:	1dbb      	adds	r3, r7, #6
 8008ff6:	881a      	ldrh	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ffc:	1dbb      	adds	r3, r7, #6
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	2100      	movs	r1, #0
 8009006:	f000 fc1c 	bl	8009842 <USBD_LL_Transmit>

  return USBD_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	0018      	movs	r0, r3
 800900e:	46bd      	mov	sp, r7
 8009010:	b004      	add	sp, #16
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	1dbb      	adds	r3, r7, #6
 8009020:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009022:	1dbb      	adds	r3, r7, #6
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	2100      	movs	r1, #0
 800902c:	f000 fc09 	bl	8009842 <USBD_LL_Transmit>

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b004      	add	sp, #16
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b084      	sub	sp, #16
 800903e:	af00      	add	r7, sp, #0
 8009040:	60f8      	str	r0, [r7, #12]
 8009042:	60b9      	str	r1, [r7, #8]
 8009044:	1dbb      	adds	r3, r7, #6
 8009046:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009048:	1dbb      	adds	r3, r7, #6
 800904a:	881b      	ldrh	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	2100      	movs	r1, #0
 8009052:	f000 fc2d 	bl	80098b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	0018      	movs	r0, r3
 800905a:	46bd      	mov	sp, r7
 800905c:	b004      	add	sp, #16
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	23a5      	movs	r3, #165	; 0xa5
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	2104      	movs	r1, #4
 8009070:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	2300      	movs	r3, #0
 8009076:	2200      	movs	r2, #0
 8009078:	2100      	movs	r1, #0
 800907a:	f000 fbe2 	bl	8009842 <USBD_LL_Transmit>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	b002      	add	sp, #8
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	23a5      	movs	r3, #165	; 0xa5
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	2105      	movs	r1, #5
 8009098:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	2300      	movs	r3, #0
 800909e:	2200      	movs	r2, #0
 80090a0:	2100      	movs	r1, #0
 80090a2:	f000 fc05 	bl	80098b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b002      	add	sp, #8
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090b4:	490f      	ldr	r1, [pc, #60]	; (80090f4 <MX_USB_DEVICE_Init+0x44>)
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <MX_USB_DEVICE_Init+0x48>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	0018      	movs	r0, r3
 80090bc:	f7fe fe0e 	bl	8007cdc <USBD_Init>
 80090c0:	1e03      	subs	r3, r0, #0
 80090c2:	d001      	beq.n	80090c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090c4:	f7f7 fb88 	bl	80007d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80090c8:	4a0c      	ldr	r2, [pc, #48]	; (80090fc <MX_USB_DEVICE_Init+0x4c>)
 80090ca:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <MX_USB_DEVICE_Init+0x48>)
 80090cc:	0011      	movs	r1, r2
 80090ce:	0018      	movs	r0, r3
 80090d0:	f7fe fe35 	bl	8007d3e <USBD_RegisterClass>
 80090d4:	1e03      	subs	r3, r0, #0
 80090d6:	d001      	beq.n	80090dc <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80090d8:	f7f7 fb7e 	bl	80007d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090dc:	4b06      	ldr	r3, [pc, #24]	; (80090f8 <MX_USB_DEVICE_Init+0x48>)
 80090de:	0018      	movs	r0, r3
 80090e0:	f7fe fe4d 	bl	8007d7e <USBD_Start>
 80090e4:	1e03      	subs	r3, r0, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090e8:	f7f7 fb76 	bl	80007d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090ec:	46c0      	nop			; (mov r8, r8)
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	20000114 	.word	0x20000114
 80090f8:	20000474 	.word	0x20000474
 80090fc:	2000000c 	.word	0x2000000c

08009100 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	0002      	movs	r2, r0
 8009108:	6039      	str	r1, [r7, #0]
 800910a:	1dfb      	adds	r3, r7, #7
 800910c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2212      	movs	r2, #18
 8009112:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009116:	0018      	movs	r0, r3
 8009118:	46bd      	mov	sp, r7
 800911a:	b002      	add	sp, #8
 800911c:	bd80      	pop	{r7, pc}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	20000130 	.word	0x20000130

08009124 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	0002      	movs	r2, r0
 800912c:	6039      	str	r1, [r7, #0]
 800912e:	1dfb      	adds	r3, r7, #7
 8009130:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2204      	movs	r2, #4
 8009136:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009138:	4b02      	ldr	r3, [pc, #8]	; (8009144 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800913a:	0018      	movs	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	b002      	add	sp, #8
 8009140:	bd80      	pop	{r7, pc}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	20000144 	.word	0x20000144

08009148 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	0002      	movs	r2, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	1dfb      	adds	r3, r7, #7
 8009154:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009156:	1dfb      	adds	r3, r7, #7
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d106      	bne.n	800916c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4908      	ldr	r1, [pc, #32]	; (8009184 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <USBD_FS_ProductStrDescriptor+0x40>)
 8009164:	0018      	movs	r0, r3
 8009166:	f7ff feca 	bl	8008efe <USBD_GetString>
 800916a:	e005      	b.n	8009178 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800916c:	683a      	ldr	r2, [r7, #0]
 800916e:	4905      	ldr	r1, [pc, #20]	; (8009184 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009170:	4b05      	ldr	r3, [pc, #20]	; (8009188 <USBD_FS_ProductStrDescriptor+0x40>)
 8009172:	0018      	movs	r0, r3
 8009174:	f7ff fec3 	bl	8008efe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009178:	4b02      	ldr	r3, [pc, #8]	; (8009184 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800917a:	0018      	movs	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	b002      	add	sp, #8
 8009180:	bd80      	pop	{r7, pc}
 8009182:	46c0      	nop			; (mov r8, r8)
 8009184:	20000738 	.word	0x20000738
 8009188:	08009a54 	.word	0x08009a54

0800918c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	0002      	movs	r2, r0
 8009194:	6039      	str	r1, [r7, #0]
 8009196:	1dfb      	adds	r3, r7, #7
 8009198:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	4904      	ldr	r1, [pc, #16]	; (80091b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800919e:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff feac 	bl	8008efe <USBD_GetString>
  return USBD_StrDesc;
 80091a6:	4b02      	ldr	r3, [pc, #8]	; (80091b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80091a8:	0018      	movs	r0, r3
 80091aa:	46bd      	mov	sp, r7
 80091ac:	b002      	add	sp, #8
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20000738 	.word	0x20000738
 80091b4:	08009a6c 	.word	0x08009a6c

080091b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	0002      	movs	r2, r0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	1dfb      	adds	r3, r7, #7
 80091c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	221a      	movs	r2, #26
 80091ca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091cc:	f000 f84c 	bl	8009268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80091d2:	0018      	movs	r0, r3
 80091d4:	46bd      	mov	sp, r7
 80091d6:	b002      	add	sp, #8
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	20000148 	.word	0x20000148

080091e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	0002      	movs	r2, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	1dfb      	adds	r3, r7, #7
 80091ec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80091ee:	1dfb      	adds	r3, r7, #7
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d106      	bne.n	8009204 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	4908      	ldr	r1, [pc, #32]	; (800921c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x40>)
 80091fc:	0018      	movs	r0, r3
 80091fe:	f7ff fe7e 	bl	8008efe <USBD_GetString>
 8009202:	e005      	b.n	8009210 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009204:	683a      	ldr	r2, [r7, #0]
 8009206:	4905      	ldr	r1, [pc, #20]	; (800921c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x40>)
 800920a:	0018      	movs	r0, r3
 800920c:	f7ff fe77 	bl	8008efe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009210:	4b02      	ldr	r3, [pc, #8]	; (800921c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009212:	0018      	movs	r0, r3
 8009214:	46bd      	mov	sp, r7
 8009216:	b002      	add	sp, #8
 8009218:	bd80      	pop	{r7, pc}
 800921a:	46c0      	nop			; (mov r8, r8)
 800921c:	20000738 	.word	0x20000738
 8009220:	08009a80 	.word	0x08009a80

08009224 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	0002      	movs	r2, r0
 800922c:	6039      	str	r1, [r7, #0]
 800922e:	1dfb      	adds	r3, r7, #7
 8009230:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009232:	1dfb      	adds	r3, r7, #7
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d106      	bne.n	8009248 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	4908      	ldr	r1, [pc, #32]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800923e:	4b09      	ldr	r3, [pc, #36]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009240:	0018      	movs	r0, r3
 8009242:	f7ff fe5c 	bl	8008efe <USBD_GetString>
 8009246:	e005      	b.n	8009254 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	4905      	ldr	r1, [pc, #20]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800924c:	4b05      	ldr	r3, [pc, #20]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800924e:	0018      	movs	r0, r3
 8009250:	f7ff fe55 	bl	8008efe <USBD_GetString>
  }
  return USBD_StrDesc;
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009256:	0018      	movs	r0, r3
 8009258:	46bd      	mov	sp, r7
 800925a:	b002      	add	sp, #8
 800925c:	bd80      	pop	{r7, pc}
 800925e:	46c0      	nop			; (mov r8, r8)
 8009260:	20000738 	.word	0x20000738
 8009264:	08009a8c 	.word	0x08009a8c

08009268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800926e:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <Get_SerialNum+0x48>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009274:	4b0f      	ldr	r3, [pc, #60]	; (80092b4 <Get_SerialNum+0x4c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <Get_SerialNum+0x50>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	18d3      	adds	r3, r2, r3
 8009286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800928e:	490b      	ldr	r1, [pc, #44]	; (80092bc <Get_SerialNum+0x54>)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2208      	movs	r2, #8
 8009294:	0018      	movs	r0, r3
 8009296:	f000 f815 	bl	80092c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800929a:	4909      	ldr	r1, [pc, #36]	; (80092c0 <Get_SerialNum+0x58>)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2204      	movs	r2, #4
 80092a0:	0018      	movs	r0, r3
 80092a2:	f000 f80f 	bl	80092c4 <IntToUnicode>
  }
}
 80092a6:	46c0      	nop			; (mov r8, r8)
 80092a8:	46bd      	mov	sp, r7
 80092aa:	b004      	add	sp, #16
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	46c0      	nop			; (mov r8, r8)
 80092b0:	1ffff7ac 	.word	0x1ffff7ac
 80092b4:	1ffff7b0 	.word	0x1ffff7b0
 80092b8:	1ffff7b4 	.word	0x1ffff7b4
 80092bc:	2000014a 	.word	0x2000014a
 80092c0:	2000015a 	.word	0x2000015a

080092c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b086      	sub	sp, #24
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	1dfb      	adds	r3, r7, #7
 80092d0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80092d2:	2117      	movs	r1, #23
 80092d4:	187b      	adds	r3, r7, r1
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80092da:	187b      	adds	r3, r7, r1
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
 80092e0:	e02f      	b.n	8009342 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	0f1b      	lsrs	r3, r3, #28
 80092e6:	2b09      	cmp	r3, #9
 80092e8:	d80d      	bhi.n	8009306 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	0f1b      	lsrs	r3, r3, #28
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	2317      	movs	r3, #23
 80092f2:	18fb      	adds	r3, r7, r3
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	005b      	lsls	r3, r3, #1
 80092f8:	0019      	movs	r1, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	185b      	adds	r3, r3, r1
 80092fe:	3230      	adds	r2, #48	; 0x30
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	e00c      	b.n	8009320 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	0f1b      	lsrs	r3, r3, #28
 800930a:	b2da      	uxtb	r2, r3
 800930c:	2317      	movs	r3, #23
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	0019      	movs	r1, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	185b      	adds	r3, r3, r1
 800931a:	3237      	adds	r2, #55	; 0x37
 800931c:	b2d2      	uxtb	r2, r2
 800931e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	011b      	lsls	r3, r3, #4
 8009324:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009326:	2117      	movs	r1, #23
 8009328:	187b      	adds	r3, r7, r1
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	3301      	adds	r3, #1
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	18d3      	adds	r3, r2, r3
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009338:	187b      	adds	r3, r7, r1
 800933a:	781a      	ldrb	r2, [r3, #0]
 800933c:	187b      	adds	r3, r7, r1
 800933e:	3201      	adds	r2, #1
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	2317      	movs	r3, #23
 8009344:	18fa      	adds	r2, r7, r3
 8009346:	1dfb      	adds	r3, r7, #7
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	429a      	cmp	r2, r3
 800934e:	d3c8      	bcc.n	80092e2 <IntToUnicode+0x1e>
  }
}
 8009350:	46c0      	nop			; (mov r8, r8)
 8009352:	46c0      	nop			; (mov r8, r8)
 8009354:	46bd      	mov	sp, r7
 8009356:	b006      	add	sp, #24
 8009358:	bd80      	pop	{r7, pc}
	...

0800935c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <HAL_PCD_MspInit+0x48>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d115      	bne.n	800939a <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800936e:	4b0e      	ldr	r3, [pc, #56]	; (80093a8 <HAL_PCD_MspInit+0x4c>)
 8009370:	69da      	ldr	r2, [r3, #28]
 8009372:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <HAL_PCD_MspInit+0x4c>)
 8009374:	2180      	movs	r1, #128	; 0x80
 8009376:	0409      	lsls	r1, r1, #16
 8009378:	430a      	orrs	r2, r1
 800937a:	61da      	str	r2, [r3, #28]
 800937c:	4b0a      	ldr	r3, [pc, #40]	; (80093a8 <HAL_PCD_MspInit+0x4c>)
 800937e:	69da      	ldr	r2, [r3, #28]
 8009380:	2380      	movs	r3, #128	; 0x80
 8009382:	041b      	lsls	r3, r3, #16
 8009384:	4013      	ands	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
 8009388:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800938a:	2200      	movs	r2, #0
 800938c:	2100      	movs	r1, #0
 800938e:	201f      	movs	r0, #31
 8009390:	f7f7 fdf2 	bl	8000f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009394:	201f      	movs	r0, #31
 8009396:	f7f7 fe04 	bl	8000fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800939a:	46c0      	nop			; (mov r8, r8)
 800939c:	46bd      	mov	sp, r7
 800939e:	b004      	add	sp, #16
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	40005c00 	.word	0x40005c00
 80093a8:	40021000 	.word	0x40021000

080093ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	23bc      	movs	r3, #188	; 0xbc
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	58d2      	ldr	r2, [r2, r3]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	21ac      	movs	r1, #172	; 0xac
 80093c0:	0089      	lsls	r1, r1, #2
 80093c2:	468c      	mov	ip, r1
 80093c4:	4463      	add	r3, ip
 80093c6:	0019      	movs	r1, r3
 80093c8:	0010      	movs	r0, r2
 80093ca:	f7fe fd2b 	bl	8007e24 <USBD_LL_SetupStage>
}
 80093ce:	46c0      	nop			; (mov r8, r8)
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b002      	add	sp, #8
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d6:	b590      	push	{r4, r7, lr}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	000a      	movs	r2, r1
 80093e0:	1cfb      	adds	r3, r7, #3
 80093e2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	23bc      	movs	r3, #188	; 0xbc
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	58d4      	ldr	r4, [r2, r3]
 80093ec:	1cfb      	adds	r3, r7, #3
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	23be      	movs	r3, #190	; 0xbe
 80093f4:	0059      	lsls	r1, r3, #1
 80093f6:	0013      	movs	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	189b      	adds	r3, r3, r2
 80093fc:	00db      	lsls	r3, r3, #3
 80093fe:	18c3      	adds	r3, r0, r3
 8009400:	185b      	adds	r3, r3, r1
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	1cfb      	adds	r3, r7, #3
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	0019      	movs	r1, r3
 800940a:	0020      	movs	r0, r4
 800940c:	f7fe fd68 	bl	8007ee0 <USBD_LL_DataOutStage>
}
 8009410:	46c0      	nop			; (mov r8, r8)
 8009412:	46bd      	mov	sp, r7
 8009414:	b003      	add	sp, #12
 8009416:	bd90      	pop	{r4, r7, pc}

08009418 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	000a      	movs	r2, r1
 8009422:	1cfb      	adds	r3, r7, #3
 8009424:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	23bc      	movs	r3, #188	; 0xbc
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	58d0      	ldr	r0, [r2, r3]
 800942e:	1cfb      	adds	r3, r7, #3
 8009430:	781a      	ldrb	r2, [r3, #0]
 8009432:	6879      	ldr	r1, [r7, #4]
 8009434:	0013      	movs	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	189b      	adds	r3, r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	18cb      	adds	r3, r1, r3
 800943e:	333c      	adds	r3, #60	; 0x3c
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	1cfb      	adds	r3, r7, #3
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	0019      	movs	r1, r3
 8009448:	f7fe fdcc 	bl	8007fe4 <USBD_LL_DataInStage>
}
 800944c:	46c0      	nop			; (mov r8, r8)
 800944e:	46bd      	mov	sp, r7
 8009450:	b002      	add	sp, #8
 8009452:	bd80      	pop	{r7, pc}

08009454 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	23bc      	movs	r3, #188	; 0xbc
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	58d3      	ldr	r3, [r2, r3]
 8009464:	0018      	movs	r0, r3
 8009466:	f7fe ff03 	bl	8008270 <USBD_LL_SOF>
}
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	46bd      	mov	sp, r7
 800946e:	b002      	add	sp, #8
 8009470:	bd80      	pop	{r7, pc}

08009472 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800947a:	230f      	movs	r3, #15
 800947c:	18fb      	adds	r3, r7, r3
 800947e:	2201      	movs	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b02      	cmp	r3, #2
 8009488:	d001      	beq.n	800948e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800948a:	f7f7 f9a5 	bl	80007d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	23bc      	movs	r3, #188	; 0xbc
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	58d2      	ldr	r2, [r2, r3]
 8009496:	230f      	movs	r3, #15
 8009498:	18fb      	adds	r3, r7, r3
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	0019      	movs	r1, r3
 800949e:	0010      	movs	r0, r2
 80094a0:	f7fe fea5 	bl	80081ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	23bc      	movs	r3, #188	; 0xbc
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	58d3      	ldr	r3, [r2, r3]
 80094ac:	0018      	movs	r0, r3
 80094ae:	f7fe fe56 	bl	800815e <USBD_LL_Reset>
}
 80094b2:	46c0      	nop			; (mov r8, r8)
 80094b4:	46bd      	mov	sp, r7
 80094b6:	b004      	add	sp, #16
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b082      	sub	sp, #8
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	23bc      	movs	r3, #188	; 0xbc
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	58d3      	ldr	r3, [r2, r3]
 80094cc:	0018      	movs	r0, r3
 80094ce:	f7fe fe9f 	bl	8008210 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094da:	4b05      	ldr	r3, [pc, #20]	; (80094f0 <HAL_PCD_SuspendCallback+0x34>)
 80094dc:	691a      	ldr	r2, [r3, #16]
 80094de:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <HAL_PCD_SuspendCallback+0x34>)
 80094e0:	2106      	movs	r1, #6
 80094e2:	430a      	orrs	r2, r1
 80094e4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	46bd      	mov	sp, r7
 80094ea:	b002      	add	sp, #8
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	e000ed00 	.word	0xe000ed00

080094f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d007      	beq.n	8009514 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009504:	4b09      	ldr	r3, [pc, #36]	; (800952c <HAL_PCD_ResumeCallback+0x38>)
 8009506:	691a      	ldr	r2, [r3, #16]
 8009508:	4b08      	ldr	r3, [pc, #32]	; (800952c <HAL_PCD_ResumeCallback+0x38>)
 800950a:	2106      	movs	r1, #6
 800950c:	438a      	bics	r2, r1
 800950e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009510:	f000 fa1a 	bl	8009948 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	23bc      	movs	r3, #188	; 0xbc
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	58d3      	ldr	r3, [r2, r3]
 800951c:	0018      	movs	r0, r3
 800951e:	f7fe fe8f 	bl	8008240 <USBD_LL_Resume>
}
 8009522:	46c0      	nop			; (mov r8, r8)
 8009524:	46bd      	mov	sp, r7
 8009526:	b002      	add	sp, #8
 8009528:	bd80      	pop	{r7, pc}
 800952a:	46c0      	nop			; (mov r8, r8)
 800952c:	e000ed00 	.word	0xe000ed00

08009530 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009538:	4a23      	ldr	r2, [pc, #140]	; (80095c8 <USBD_LL_Init+0x98>)
 800953a:	23bc      	movs	r3, #188	; 0xbc
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	6879      	ldr	r1, [r7, #4]
 8009540:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	23b0      	movs	r3, #176	; 0xb0
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	491f      	ldr	r1, [pc, #124]	; (80095c8 <USBD_LL_Init+0x98>)
 800954a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800954c:	4b1e      	ldr	r3, [pc, #120]	; (80095c8 <USBD_LL_Init+0x98>)
 800954e:	4a1f      	ldr	r2, [pc, #124]	; (80095cc <USBD_LL_Init+0x9c>)
 8009550:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009552:	4b1d      	ldr	r3, [pc, #116]	; (80095c8 <USBD_LL_Init+0x98>)
 8009554:	2208      	movs	r2, #8
 8009556:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009558:	4b1b      	ldr	r3, [pc, #108]	; (80095c8 <USBD_LL_Init+0x98>)
 800955a:	2202      	movs	r2, #2
 800955c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800955e:	4b1a      	ldr	r3, [pc, #104]	; (80095c8 <USBD_LL_Init+0x98>)
 8009560:	2202      	movs	r2, #2
 8009562:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009564:	4b18      	ldr	r3, [pc, #96]	; (80095c8 <USBD_LL_Init+0x98>)
 8009566:	2200      	movs	r2, #0
 8009568:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800956a:	4b17      	ldr	r3, [pc, #92]	; (80095c8 <USBD_LL_Init+0x98>)
 800956c:	2200      	movs	r2, #0
 800956e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009570:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <USBD_LL_Init+0x98>)
 8009572:	2200      	movs	r2, #0
 8009574:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009576:	4b14      	ldr	r3, [pc, #80]	; (80095c8 <USBD_LL_Init+0x98>)
 8009578:	0018      	movs	r0, r3
 800957a:	f7f8 f869 	bl	8001650 <HAL_PCD_Init>
 800957e:	1e03      	subs	r3, r0, #0
 8009580:	d001      	beq.n	8009586 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009582:	f7f7 f929 	bl	80007d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	23b0      	movs	r3, #176	; 0xb0
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	58d0      	ldr	r0, [r2, r3]
 800958e:	2318      	movs	r3, #24
 8009590:	2200      	movs	r2, #0
 8009592:	2100      	movs	r1, #0
 8009594:	f7f9 fe32 	bl	80031fc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	23b0      	movs	r3, #176	; 0xb0
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	58d0      	ldr	r0, [r2, r3]
 80095a0:	2358      	movs	r3, #88	; 0x58
 80095a2:	2200      	movs	r2, #0
 80095a4:	2180      	movs	r1, #128	; 0x80
 80095a6:	f7f9 fe29 	bl	80031fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	23b0      	movs	r3, #176	; 0xb0
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	58d0      	ldr	r0, [r2, r3]
 80095b2:	2380      	movs	r3, #128	; 0x80
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	2200      	movs	r2, #0
 80095b8:	2181      	movs	r1, #129	; 0x81
 80095ba:	f7f9 fe1f 	bl	80031fc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	0018      	movs	r0, r3
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b002      	add	sp, #8
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	20000938 	.word	0x20000938
 80095cc:	40005c00 	.word	0x40005c00

080095d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d8:	210f      	movs	r1, #15
 80095da:	187b      	adds	r3, r7, r1
 80095dc:	2200      	movs	r2, #0
 80095de:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e0:	260e      	movs	r6, #14
 80095e2:	19bb      	adds	r3, r7, r6
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	23b0      	movs	r3, #176	; 0xb0
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	58d3      	ldr	r3, [r2, r3]
 80095f0:	000d      	movs	r5, r1
 80095f2:	187c      	adds	r4, r7, r1
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7f8 f93b 	bl	8001870 <HAL_PCD_Start>
 80095fa:	0003      	movs	r3, r0
 80095fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fe:	19bc      	adds	r4, r7, r6
 8009600:	197b      	adds	r3, r7, r5
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	0018      	movs	r0, r3
 8009606:	f000 f9a6 	bl	8009956 <USBD_Get_USB_Status>
 800960a:	0003      	movs	r3, r0
 800960c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800960e:	19bb      	adds	r3, r7, r6
 8009610:	781b      	ldrb	r3, [r3, #0]
}
 8009612:	0018      	movs	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	b005      	add	sp, #20
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800961a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800961a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	000c      	movs	r4, r1
 8009624:	0010      	movs	r0, r2
 8009626:	0019      	movs	r1, r3
 8009628:	1cfb      	adds	r3, r7, #3
 800962a:	1c22      	adds	r2, r4, #0
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	1cbb      	adds	r3, r7, #2
 8009630:	1c02      	adds	r2, r0, #0
 8009632:	701a      	strb	r2, [r3, #0]
 8009634:	003b      	movs	r3, r7
 8009636:	1c0a      	adds	r2, r1, #0
 8009638:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963a:	260f      	movs	r6, #15
 800963c:	19bb      	adds	r3, r7, r6
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009642:	250e      	movs	r5, #14
 8009644:	197b      	adds	r3, r7, r5
 8009646:	2200      	movs	r2, #0
 8009648:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	23b0      	movs	r3, #176	; 0xb0
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	58d0      	ldr	r0, [r2, r3]
 8009652:	19bc      	adds	r4, r7, r6
 8009654:	1cbb      	adds	r3, r7, #2
 8009656:	781d      	ldrb	r5, [r3, #0]
 8009658:	003b      	movs	r3, r7
 800965a:	881a      	ldrh	r2, [r3, #0]
 800965c:	1cfb      	adds	r3, r7, #3
 800965e:	7819      	ldrb	r1, [r3, #0]
 8009660:	002b      	movs	r3, r5
 8009662:	f7f8 fad2 	bl	8001c0a <HAL_PCD_EP_Open>
 8009666:	0003      	movs	r3, r0
 8009668:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800966a:	250e      	movs	r5, #14
 800966c:	197c      	adds	r4, r7, r5
 800966e:	19bb      	adds	r3, r7, r6
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	0018      	movs	r0, r3
 8009674:	f000 f96f 	bl	8009956 <USBD_Get_USB_Status>
 8009678:	0003      	movs	r3, r0
 800967a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800967c:	197b      	adds	r3, r7, r5
 800967e:	781b      	ldrb	r3, [r3, #0]
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b005      	add	sp, #20
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009688 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	000a      	movs	r2, r1
 8009692:	1cfb      	adds	r3, r7, #3
 8009694:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009696:	210f      	movs	r1, #15
 8009698:	187b      	adds	r3, r7, r1
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969e:	260e      	movs	r6, #14
 80096a0:	19bb      	adds	r3, r7, r6
 80096a2:	2200      	movs	r2, #0
 80096a4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	23b0      	movs	r3, #176	; 0xb0
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	58d2      	ldr	r2, [r2, r3]
 80096ae:	000d      	movs	r5, r1
 80096b0:	187c      	adds	r4, r7, r1
 80096b2:	1cfb      	adds	r3, r7, #3
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	0019      	movs	r1, r3
 80096b8:	0010      	movs	r0, r2
 80096ba:	f7f8 fb1e 	bl	8001cfa <HAL_PCD_EP_Close>
 80096be:	0003      	movs	r3, r0
 80096c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c2:	19bc      	adds	r4, r7, r6
 80096c4:	197b      	adds	r3, r7, r5
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f000 f944 	bl	8009956 <USBD_Get_USB_Status>
 80096ce:	0003      	movs	r3, r0
 80096d0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096d2:	19bb      	adds	r3, r7, r6
 80096d4:	781b      	ldrb	r3, [r3, #0]
}
 80096d6:	0018      	movs	r0, r3
 80096d8:	46bd      	mov	sp, r7
 80096da:	b005      	add	sp, #20
 80096dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096de <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e0:	b085      	sub	sp, #20
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	000a      	movs	r2, r1
 80096e8:	1cfb      	adds	r3, r7, #3
 80096ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ec:	210f      	movs	r1, #15
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f4:	260e      	movs	r6, #14
 80096f6:	19bb      	adds	r3, r7, r6
 80096f8:	2200      	movs	r2, #0
 80096fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	23b0      	movs	r3, #176	; 0xb0
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	58d2      	ldr	r2, [r2, r3]
 8009704:	000d      	movs	r5, r1
 8009706:	187c      	adds	r4, r7, r1
 8009708:	1cfb      	adds	r3, r7, #3
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	0019      	movs	r1, r3
 800970e:	0010      	movs	r0, r2
 8009710:	f7f8 fbd1 	bl	8001eb6 <HAL_PCD_EP_SetStall>
 8009714:	0003      	movs	r3, r0
 8009716:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009718:	19bc      	adds	r4, r7, r6
 800971a:	197b      	adds	r3, r7, r5
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	0018      	movs	r0, r3
 8009720:	f000 f919 	bl	8009956 <USBD_Get_USB_Status>
 8009724:	0003      	movs	r3, r0
 8009726:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009728:	19bb      	adds	r3, r7, r6
 800972a:	781b      	ldrb	r3, [r3, #0]
}
 800972c:	0018      	movs	r0, r3
 800972e:	46bd      	mov	sp, r7
 8009730:	b005      	add	sp, #20
 8009732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009734 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	000a      	movs	r2, r1
 800973e:	1cfb      	adds	r3, r7, #3
 8009740:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009742:	210f      	movs	r1, #15
 8009744:	187b      	adds	r3, r7, r1
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974a:	260e      	movs	r6, #14
 800974c:	19bb      	adds	r3, r7, r6
 800974e:	2200      	movs	r2, #0
 8009750:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	23b0      	movs	r3, #176	; 0xb0
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	58d2      	ldr	r2, [r2, r3]
 800975a:	000d      	movs	r5, r1
 800975c:	187c      	adds	r4, r7, r1
 800975e:	1cfb      	adds	r3, r7, #3
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	0019      	movs	r1, r3
 8009764:	0010      	movs	r0, r2
 8009766:	f7f8 fc02 	bl	8001f6e <HAL_PCD_EP_ClrStall>
 800976a:	0003      	movs	r3, r0
 800976c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976e:	19bc      	adds	r4, r7, r6
 8009770:	197b      	adds	r3, r7, r5
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	0018      	movs	r0, r3
 8009776:	f000 f8ee 	bl	8009956 <USBD_Get_USB_Status>
 800977a:	0003      	movs	r3, r0
 800977c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800977e:	19bb      	adds	r3, r7, r6
 8009780:	781b      	ldrb	r3, [r3, #0]
}
 8009782:	0018      	movs	r0, r3
 8009784:	46bd      	mov	sp, r7
 8009786:	b005      	add	sp, #20
 8009788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800978a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	000a      	movs	r2, r1
 8009794:	1cfb      	adds	r3, r7, #3
 8009796:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	23b0      	movs	r3, #176	; 0xb0
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	58d3      	ldr	r3, [r2, r3]
 80097a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a2:	1cfb      	adds	r3, r7, #3
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	b25b      	sxtb	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	da0d      	bge.n	80097c8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097ac:	1cfb      	adds	r3, r7, #3
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	227f      	movs	r2, #127	; 0x7f
 80097b2:	4013      	ands	r3, r2
 80097b4:	68f9      	ldr	r1, [r7, #12]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	0013      	movs	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	189b      	adds	r3, r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	18cb      	adds	r3, r1, r3
 80097c2:	3302      	adds	r3, #2
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	e00d      	b.n	80097e4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c8:	1cfb      	adds	r3, r7, #3
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	227f      	movs	r2, #127	; 0x7f
 80097ce:	401a      	ands	r2, r3
 80097d0:	68f8      	ldr	r0, [r7, #12]
 80097d2:	23b5      	movs	r3, #181	; 0xb5
 80097d4:	0059      	lsls	r1, r3, #1
 80097d6:	0013      	movs	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	189b      	adds	r3, r3, r2
 80097dc:	00db      	lsls	r3, r3, #3
 80097de:	18c3      	adds	r3, r0, r3
 80097e0:	185b      	adds	r3, r3, r1
 80097e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097e4:	0018      	movs	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	b004      	add	sp, #16
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	000a      	movs	r2, r1
 80097f6:	1cfb      	adds	r3, r7, #3
 80097f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fa:	210f      	movs	r1, #15
 80097fc:	187b      	adds	r3, r7, r1
 80097fe:	2200      	movs	r2, #0
 8009800:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	260e      	movs	r6, #14
 8009804:	19bb      	adds	r3, r7, r6
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	23b0      	movs	r3, #176	; 0xb0
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	58d2      	ldr	r2, [r2, r3]
 8009812:	000d      	movs	r5, r1
 8009814:	187c      	adds	r4, r7, r1
 8009816:	1cfb      	adds	r3, r7, #3
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	0019      	movs	r1, r3
 800981c:	0010      	movs	r0, r2
 800981e:	f7f8 f9c9 	bl	8001bb4 <HAL_PCD_SetAddress>
 8009822:	0003      	movs	r3, r0
 8009824:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009826:	19bc      	adds	r4, r7, r6
 8009828:	197b      	adds	r3, r7, r5
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	0018      	movs	r0, r3
 800982e:	f000 f892 	bl	8009956 <USBD_Get_USB_Status>
 8009832:	0003      	movs	r3, r0
 8009834:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009836:	19bb      	adds	r3, r7, r6
 8009838:	781b      	ldrb	r3, [r3, #0]
}
 800983a:	0018      	movs	r0, r3
 800983c:	46bd      	mov	sp, r7
 800983e:	b005      	add	sp, #20
 8009840:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009842 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009844:	b087      	sub	sp, #28
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	0008      	movs	r0, r1
 800984c:	607a      	str	r2, [r7, #4]
 800984e:	0019      	movs	r1, r3
 8009850:	230b      	movs	r3, #11
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	1c02      	adds	r2, r0, #0
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	2408      	movs	r4, #8
 800985a:	193b      	adds	r3, r7, r4
 800985c:	1c0a      	adds	r2, r1, #0
 800985e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009860:	2117      	movs	r1, #23
 8009862:	187b      	adds	r3, r7, r1
 8009864:	2200      	movs	r2, #0
 8009866:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009868:	2516      	movs	r5, #22
 800986a:	197b      	adds	r3, r7, r5
 800986c:	2200      	movs	r2, #0
 800986e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	23b0      	movs	r3, #176	; 0xb0
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	58d0      	ldr	r0, [r2, r3]
 8009878:	193b      	adds	r3, r7, r4
 800987a:	881d      	ldrh	r5, [r3, #0]
 800987c:	000e      	movs	r6, r1
 800987e:	187c      	adds	r4, r7, r1
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	230b      	movs	r3, #11
 8009884:	18fb      	adds	r3, r7, r3
 8009886:	7819      	ldrb	r1, [r3, #0]
 8009888:	002b      	movs	r3, r5
 800988a:	f7f8 facb 	bl	8001e24 <HAL_PCD_EP_Transmit>
 800988e:	0003      	movs	r3, r0
 8009890:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009892:	2516      	movs	r5, #22
 8009894:	197c      	adds	r4, r7, r5
 8009896:	19bb      	adds	r3, r7, r6
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	0018      	movs	r0, r3
 800989c:	f000 f85b 	bl	8009956 <USBD_Get_USB_Status>
 80098a0:	0003      	movs	r3, r0
 80098a2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80098a4:	197b      	adds	r3, r7, r5
 80098a6:	781b      	ldrb	r3, [r3, #0]
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b007      	add	sp, #28
 80098ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	0008      	movs	r0, r1
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	0019      	movs	r1, r3
 80098be:	230b      	movs	r3, #11
 80098c0:	18fb      	adds	r3, r7, r3
 80098c2:	1c02      	adds	r2, r0, #0
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	2408      	movs	r4, #8
 80098c8:	193b      	adds	r3, r7, r4
 80098ca:	1c0a      	adds	r2, r1, #0
 80098cc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ce:	2117      	movs	r1, #23
 80098d0:	187b      	adds	r3, r7, r1
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098d6:	2516      	movs	r5, #22
 80098d8:	197b      	adds	r3, r7, r5
 80098da:	2200      	movs	r2, #0
 80098dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	23b0      	movs	r3, #176	; 0xb0
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	58d0      	ldr	r0, [r2, r3]
 80098e6:	193b      	adds	r3, r7, r4
 80098e8:	881d      	ldrh	r5, [r3, #0]
 80098ea:	000e      	movs	r6, r1
 80098ec:	187c      	adds	r4, r7, r1
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	230b      	movs	r3, #11
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	7819      	ldrb	r1, [r3, #0]
 80098f6:	002b      	movs	r3, r5
 80098f8:	f7f8 fa50 	bl	8001d9c <HAL_PCD_EP_Receive>
 80098fc:	0003      	movs	r3, r0
 80098fe:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009900:	2516      	movs	r5, #22
 8009902:	197c      	adds	r4, r7, r5
 8009904:	19bb      	adds	r3, r7, r6
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	0018      	movs	r0, r3
 800990a:	f000 f824 	bl	8009956 <USBD_Get_USB_Status>
 800990e:	0003      	movs	r3, r0
 8009910:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009912:	197b      	adds	r3, r7, r5
 8009914:	781b      	ldrb	r3, [r3, #0]
}
 8009916:	0018      	movs	r0, r3
 8009918:	46bd      	mov	sp, r7
 800991a:	b007      	add	sp, #28
 800991c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009920 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009928:	4b02      	ldr	r3, [pc, #8]	; (8009934 <USBD_static_malloc+0x14>)
}
 800992a:	0018      	movs	r0, r3
 800992c:	46bd      	mov	sp, r7
 800992e:	b002      	add	sp, #8
 8009930:	bd80      	pop	{r7, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	20000c2c 	.word	0x20000c2c

08009938 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b082      	sub	sp, #8
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]

}
 8009940:	46c0      	nop			; (mov r8, r8)
 8009942:	46bd      	mov	sp, r7
 8009944:	b002      	add	sp, #8
 8009946:	bd80      	pop	{r7, pc}

08009948 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800994c:	f7f6 fc82 	bl	8000254 <SystemClock_Config>
}
 8009950:	46c0      	nop			; (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	0002      	movs	r2, r0
 800995e:	1dfb      	adds	r3, r7, #7
 8009960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009962:	230f      	movs	r3, #15
 8009964:	18fb      	adds	r3, r7, r3
 8009966:	2200      	movs	r2, #0
 8009968:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800996a:	1dfb      	adds	r3, r7, #7
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	2b03      	cmp	r3, #3
 8009970:	d017      	beq.n	80099a2 <USBD_Get_USB_Status+0x4c>
 8009972:	dc1b      	bgt.n	80099ac <USBD_Get_USB_Status+0x56>
 8009974:	2b02      	cmp	r3, #2
 8009976:	d00f      	beq.n	8009998 <USBD_Get_USB_Status+0x42>
 8009978:	dc18      	bgt.n	80099ac <USBD_Get_USB_Status+0x56>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <USBD_Get_USB_Status+0x2e>
 800997e:	2b01      	cmp	r3, #1
 8009980:	d005      	beq.n	800998e <USBD_Get_USB_Status+0x38>
 8009982:	e013      	b.n	80099ac <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009984:	230f      	movs	r3, #15
 8009986:	18fb      	adds	r3, r7, r3
 8009988:	2200      	movs	r2, #0
 800998a:	701a      	strb	r2, [r3, #0]
    break;
 800998c:	e013      	b.n	80099b6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800998e:	230f      	movs	r3, #15
 8009990:	18fb      	adds	r3, r7, r3
 8009992:	2202      	movs	r2, #2
 8009994:	701a      	strb	r2, [r3, #0]
    break;
 8009996:	e00e      	b.n	80099b6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009998:	230f      	movs	r3, #15
 800999a:	18fb      	adds	r3, r7, r3
 800999c:	2201      	movs	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]
    break;
 80099a0:	e009      	b.n	80099b6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099a2:	230f      	movs	r3, #15
 80099a4:	18fb      	adds	r3, r7, r3
 80099a6:	2202      	movs	r2, #2
 80099a8:	701a      	strb	r2, [r3, #0]
    break;
 80099aa:	e004      	b.n	80099b6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80099ac:	230f      	movs	r3, #15
 80099ae:	18fb      	adds	r3, r7, r3
 80099b0:	2202      	movs	r2, #2
 80099b2:	701a      	strb	r2, [r3, #0]
    break;
 80099b4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80099b6:	230f      	movs	r3, #15
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	781b      	ldrb	r3, [r3, #0]
}
 80099bc:	0018      	movs	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	b004      	add	sp, #16
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <__libc_init_array>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	2600      	movs	r6, #0
 80099c8:	4d0c      	ldr	r5, [pc, #48]	; (80099fc <__libc_init_array+0x38>)
 80099ca:	4c0d      	ldr	r4, [pc, #52]	; (8009a00 <__libc_init_array+0x3c>)
 80099cc:	1b64      	subs	r4, r4, r5
 80099ce:	10a4      	asrs	r4, r4, #2
 80099d0:	42a6      	cmp	r6, r4
 80099d2:	d109      	bne.n	80099e8 <__libc_init_array+0x24>
 80099d4:	2600      	movs	r6, #0
 80099d6:	f000 f821 	bl	8009a1c <_init>
 80099da:	4d0a      	ldr	r5, [pc, #40]	; (8009a04 <__libc_init_array+0x40>)
 80099dc:	4c0a      	ldr	r4, [pc, #40]	; (8009a08 <__libc_init_array+0x44>)
 80099de:	1b64      	subs	r4, r4, r5
 80099e0:	10a4      	asrs	r4, r4, #2
 80099e2:	42a6      	cmp	r6, r4
 80099e4:	d105      	bne.n	80099f2 <__libc_init_array+0x2e>
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	00b3      	lsls	r3, r6, #2
 80099ea:	58eb      	ldr	r3, [r5, r3]
 80099ec:	4798      	blx	r3
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7ee      	b.n	80099d0 <__libc_init_array+0xc>
 80099f2:	00b3      	lsls	r3, r6, #2
 80099f4:	58eb      	ldr	r3, [r5, r3]
 80099f6:	4798      	blx	r3
 80099f8:	3601      	adds	r6, #1
 80099fa:	e7f2      	b.n	80099e2 <__libc_init_array+0x1e>
 80099fc:	08009b14 	.word	0x08009b14
 8009a00:	08009b14 	.word	0x08009b14
 8009a04:	08009b14 	.word	0x08009b14
 8009a08:	08009b18 	.word	0x08009b18

08009a0c <memset>:
 8009a0c:	0003      	movs	r3, r0
 8009a0e:	1882      	adds	r2, r0, r2
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d100      	bne.n	8009a16 <memset+0xa>
 8009a14:	4770      	bx	lr
 8009a16:	7019      	strb	r1, [r3, #0]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	e7f9      	b.n	8009a10 <memset+0x4>

08009a1c <_init>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	46c0      	nop			; (mov r8, r8)
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr

08009a28 <_fini>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	46c0      	nop			; (mov r8, r8)
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr
